
/Users/raventt/MBP_Projects/arduino/maxPhoton0/target/maxPhoton0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014b8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a14d0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000068  20000300  080a14d4  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000190  20000368  20000368  00030368  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a153c  080a153c  0002153c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a1564  080a1564  00021564  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0008f527  00000000  00000000  00021568  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d531  00000000  00000000  000b0a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f1a6  00000000  00000000  000bdfc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ac0  00000000  00000000  000cd166  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002b60  00000000  00000000  000cec26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000231b5  00000000  00000000  000d1786  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e398  00000000  00000000  000f493b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a2c39  00000000  00000000  00112cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a8f0  00000000  00000000  001b590c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	c4 11 0a 08                                         ....

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f885 	bl	80a113c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f88a 	bl	80a1152 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a14d4 	.word	0x080a14d4
 80a004c:	20000368 	.word	0x20000368
 80a0050:	20000368 	.word	0x20000368
 80a0054:	200004f8 	.word	0x200004f8
 80a0058:	200004f8 	.word	0x200004f8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fe3d 	bl	80a0cdc <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1498 	.word	0x080a1498
 80a0084:	080a14cc 	.word	0x080a14cc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f839 	bl	80a0104 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bde3 	b.w	80a0c60 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 ba35 	b.w	80a0508 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 ba3b 	b.w	80a0518 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
int maxOn = D0;  // Photon output pin to toggle pin 4 on Maxbotix

char buf[5]; // Create buffer to handle RxxxCR

void setup()
{
 80a00b4:	b510      	push	{r4, lr}
  pinMode(maxOn, OUTPUT);
 80a00b6:	4c10      	ldr	r4, [pc, #64]	; (80a00f8 <setup+0x44>)
 80a00b8:	2101      	movs	r1, #1
 80a00ba:	8820      	ldrh	r0, [r4, #0]
 80a00bc:	f000 fe5e 	bl	80a0d7c <pinMode>
  Serial.begin(9600);
 80a00c0:	f000 fce8 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a00c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00c8:	f000 fcd8 	bl	80a0a7c <_ZN9USBSerial5beginEl>
  Serial.println("Hello ravenTT!");
 80a00cc:	f000 fce2 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a00d0:	490a      	ldr	r1, [pc, #40]	; (80a00fc <setup+0x48>)
 80a00d2:	f000 fb80 	bl	80a07d6 <_ZN5Print7printlnEPKc>
  Serial1.begin(9600);
 80a00d6:	f000 fc53 	bl	80a0980 <_Z22__fetch_global_Serial1v>
 80a00da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00de:	f000 fc49 	bl	80a0974 <_ZN11USARTSerial5beginEm>
  Serial.println("Sonar connected");
 80a00e2:	f000 fcd7 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a00e6:	4906      	ldr	r1, [pc, #24]	; (80a0100 <setup+0x4c>)
 80a00e8:	f000 fb75 	bl	80a07d6 <_ZN5Print7printlnEPKc>
  digitalWrite(maxOn, LOW); // Stop continuous reading mode on sensor
 80a00ec:	8820      	ldrh	r0, [r4, #0]
 80a00ee:	2100      	movs	r1, #0
}
 80a00f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinMode(maxOn, OUTPUT);
  Serial.begin(9600);
  Serial.println("Hello ravenTT!");
  Serial1.begin(9600);
  Serial.println("Sonar connected");
  digitalWrite(maxOn, LOW); // Stop continuous reading mode on sensor
 80a00f4:	f000 be53 	b.w	80a0d9e <digitalWrite>
 80a00f8:	20000370 	.word	0x20000370
 80a00fc:	080a11d8 	.word	0x080a11d8
 80a0100:	080a11e7 	.word	0x080a11e7

080a0104 <loop>:
}

unsigned long currentMillis = millis(); // Timing and Serial.print's are for debug 

void loop ()
{ 
 80a0104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0106:	f000 f881 	bl	80a020c <HAL_Timer_Get_Micro_Seconds>
  unsigned long start = micros();
  digitalWrite(maxOn, HIGH); // Bring HIGH to trigger range reading
 80a010a:	4c2e      	ldr	r4, [pc, #184]	; (80a01c4 <loop+0xc0>)
 80a010c:	2101      	movs	r1, #1
 80a010e:	4606      	mov	r6, r0
 80a0110:	8820      	ldrh	r0, [r4, #0]
 80a0112:	f000 fe44 	bl	80a0d9e <digitalWrite>
  Serial1.read(); // Only reads one character at a time
 80a0116:	f000 fc33 	bl	80a0980 <_Z22__fetch_global_Serial1v>
 80a011a:	6803      	ldr	r3, [r0, #0]
 80a011c:	695b      	ldr	r3, [r3, #20]
 80a011e:	4798      	blx	r3
  if (Serial1.available() >=4) // Only iterate over the range data if there is a minimum of Rxxx
 80a0120:	f000 fc2e 	bl	80a0980 <_Z22__fetch_global_Serial1v>
 80a0124:	6803      	ldr	r3, [r0, #0]
 80a0126:	691b      	ldr	r3, [r3, #16]
 80a0128:	4798      	blx	r3
 80a012a:	2803      	cmp	r0, #3
 80a012c:	dc3d      	bgt.n	80a01aa <loop+0xa6>
  {
    for (int i=0; i<4; i++) {
      buf[i] = Serial1.read(); // Push data into buffer
    }
  }
  digitalWrite(maxOn, LOW); // End range reading
 80a012e:	2100      	movs	r1, #0
 80a0130:	8820      	ldrh	r0, [r4, #0]
 80a0132:	f000 fe34 	bl	80a0d9e <digitalWrite>
 80a0136:	f000 f869 	bl	80a020c <HAL_Timer_Get_Micro_Seconds>
 80a013a:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a013c:	f000 f86e 	bl	80a021c <HAL_Timer_Get_Milli_Seconds>
 80a0140:	4604      	mov	r4, r0
    unsigned long end = micros();
    unsigned long elapsed = millis() / (60 * 1000); // millis is the time since code was started
  Serial1.flush();
 80a0142:	f000 fc1d 	bl	80a0980 <_Z22__fetch_global_Serial1v>
 80a0146:	6803      	ldr	r3, [r0, #0]
 80a0148:	69db      	ldr	r3, [r3, #28]
 80a014a:	4798      	blx	r3
  Serial.print("Start: ");
 80a014c:	f000 fca2 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a0150:	491d      	ldr	r1, [pc, #116]	; (80a01c8 <loop+0xc4>)
 80a0152:	f000 fb2d 	bl	80a07b0 <_ZN5Print5printEPKc>
  Serial.println(start);
 80a0156:	f000 fc9d 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a015a:	220a      	movs	r2, #10
 80a015c:	4631      	mov	r1, r6
 80a015e:	f000 fb70 	bl	80a0842 <_ZN5Print7printlnEmi>
  Serial.print("End: ");
 80a0162:	f000 fc97 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a0166:	4919      	ldr	r1, [pc, #100]	; (80a01cc <loop+0xc8>)
 80a0168:	f000 fb22 	bl	80a07b0 <_ZN5Print5printEPKc>
  Serial.println(end);
 80a016c:	f000 fc92 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a0170:	220a      	movs	r2, #10
 80a0172:	4629      	mov	r1, r5
 80a0174:	f000 fb65 	bl	80a0842 <_ZN5Print7printlnEmi>
  Serial.print("Elapsed: ");
 80a0178:	f000 fc8c 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a017c:	4914      	ldr	r1, [pc, #80]	; (80a01d0 <loop+0xcc>)
 80a017e:	f000 fb17 	bl	80a07b0 <_ZN5Print5printEPKc>
  Serial.println(elapsed);
 80a0182:	f000 fc87 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a0186:	f64e 2160 	movw	r1, #60000	; 0xea60
 80a018a:	220a      	movs	r2, #10
 80a018c:	fbb4 f1f1 	udiv	r1, r4, r1
 80a0190:	f000 fb57 	bl	80a0842 <_ZN5Print7printlnEmi>
  // int data = parseInt(buf);
  Serial.println(buf);
 80a0194:	f000 fc7e 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a0198:	490e      	ldr	r1, [pc, #56]	; (80a01d4 <loop+0xd0>)
 80a019a:	f000 fb1c 	bl	80a07d6 <_ZN5Print7printlnEPKc>
  delay(1200); // Repeat the process every X milliseconds
}
 80a019e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Serial.println(end);
  Serial.print("Elapsed: ");
  Serial.println(elapsed);
  // int data = parseInt(buf);
  Serial.println(buf);
  delay(1200); // Repeat the process every X milliseconds
 80a01a2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80a01a6:	f000 b9bf 	b.w	80a0528 <delay>
  digitalWrite(maxOn, HIGH); // Bring HIGH to trigger range reading
  Serial1.read(); // Only reads one character at a time
  if (Serial1.available() >=4) // Only iterate over the range data if there is a minimum of Rxxx
  {
    for (int i=0; i<4; i++) {
      buf[i] = Serial1.read(); // Push data into buffer
 80a01aa:	4f0a      	ldr	r7, [pc, #40]	; (80a01d4 <loop+0xd0>)
 80a01ac:	2500      	movs	r5, #0
 80a01ae:	f000 fbe7 	bl	80a0980 <_Z22__fetch_global_Serial1v>
 80a01b2:	6803      	ldr	r3, [r0, #0]
 80a01b4:	695b      	ldr	r3, [r3, #20]
 80a01b6:	4798      	blx	r3
 80a01b8:	5578      	strb	r0, [r7, r5]
  unsigned long start = micros();
  digitalWrite(maxOn, HIGH); // Bring HIGH to trigger range reading
  Serial1.read(); // Only reads one character at a time
  if (Serial1.available() >=4) // Only iterate over the range data if there is a minimum of Rxxx
  {
    for (int i=0; i<4; i++) {
 80a01ba:	3501      	adds	r5, #1
 80a01bc:	2d04      	cmp	r5, #4
 80a01be:	d1f6      	bne.n	80a01ae <loop+0xaa>
 80a01c0:	e7b5      	b.n	80a012e <loop+0x2a>
 80a01c2:	bf00      	nop
 80a01c4:	20000370 	.word	0x20000370
 80a01c8:	080a11f7 	.word	0x080a11f7
 80a01cc:	080a11ff 	.word	0x080a11ff
 80a01d0:	080a1205 	.word	0x080a1205
 80a01d4:	20000374 	.word	0x20000374

080a01d8 <_GLOBAL__sub_I_maxOn>:
  Serial.print("Elapsed: ");
  Serial.println(elapsed);
  // int data = parseInt(buf);
  Serial.println(buf);
  delay(1200); // Repeat the process every X milliseconds
}
 80a01d8:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a01da:	f000 f827 	bl	80a022c <HAL_Pin_Map>
 80a01de:	f000 f81d 	bl	80a021c <HAL_Timer_Get_Milli_Seconds>
  Serial1.begin(9600);
  Serial.println("Sonar connected");
  digitalWrite(maxOn, LOW); // Stop continuous reading mode on sensor
}

unsigned long currentMillis = millis(); // Timing and Serial.print's are for debug 
 80a01e2:	4b01      	ldr	r3, [pc, #4]	; (80a01e8 <_GLOBAL__sub_I_maxOn+0x10>)
 80a01e4:	6018      	str	r0, [r3, #0]
 80a01e6:	bd08      	pop	{r3, pc}
 80a01e8:	2000036c 	.word	0x2000036c

080a01ec <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a01ec:	b508      	push	{r3, lr}
 80a01ee:	4b02      	ldr	r3, [pc, #8]	; (80a01f8 <os_mutex_create+0xc>)
 80a01f0:	681b      	ldr	r3, [r3, #0]
 80a01f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a01f4:	9301      	str	r3, [sp, #4]
 80a01f6:	bd08      	pop	{r3, pc}
 80a01f8:	080601d0 	.word	0x080601d0

080a01fc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a01fc:	b508      	push	{r3, lr}
 80a01fe:	4b02      	ldr	r3, [pc, #8]	; (80a0208 <HAL_RNG_GetRandomNumber+0xc>)
 80a0200:	681b      	ldr	r3, [r3, #0]
 80a0202:	685b      	ldr	r3, [r3, #4]
 80a0204:	9301      	str	r3, [sp, #4]
 80a0206:	bd08      	pop	{r3, pc}
 80a0208:	0806019c 	.word	0x0806019c

080a020c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a020c:	b508      	push	{r3, lr}
 80a020e:	4b02      	ldr	r3, [pc, #8]	; (80a0218 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0210:	681b      	ldr	r3, [r3, #0]
 80a0212:	691b      	ldr	r3, [r3, #16]
 80a0214:	9301      	str	r3, [sp, #4]
 80a0216:	bd08      	pop	{r3, pc}
 80a0218:	0806019c 	.word	0x0806019c

080a021c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a021c:	b508      	push	{r3, lr}
 80a021e:	4b02      	ldr	r3, [pc, #8]	; (80a0228 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0220:	681b      	ldr	r3, [r3, #0]
 80a0222:	695b      	ldr	r3, [r3, #20]
 80a0224:	9301      	str	r3, [sp, #4]
 80a0226:	bd08      	pop	{r3, pc}
 80a0228:	0806019c 	.word	0x0806019c

080a022c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a022c:	b508      	push	{r3, lr}
 80a022e:	4b02      	ldr	r3, [pc, #8]	; (80a0238 <HAL_Pin_Map+0xc>)
 80a0230:	681b      	ldr	r3, [r3, #0]
 80a0232:	681b      	ldr	r3, [r3, #0]
 80a0234:	9301      	str	r3, [sp, #4]
 80a0236:	bd08      	pop	{r3, pc}
 80a0238:	080601b0 	.word	0x080601b0

080a023c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a023c:	b508      	push	{r3, lr}
 80a023e:	4b02      	ldr	r3, [pc, #8]	; (80a0248 <HAL_Pin_Mode+0xc>)
 80a0240:	681b      	ldr	r3, [r3, #0]
 80a0242:	689b      	ldr	r3, [r3, #8]
 80a0244:	9301      	str	r3, [sp, #4]
 80a0246:	bd08      	pop	{r3, pc}
 80a0248:	080601b0 	.word	0x080601b0

080a024c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a024c:	b508      	push	{r3, lr}
 80a024e:	4b02      	ldr	r3, [pc, #8]	; (80a0258 <HAL_Get_Pin_Mode+0xc>)
 80a0250:	681b      	ldr	r3, [r3, #0]
 80a0252:	68db      	ldr	r3, [r3, #12]
 80a0254:	9301      	str	r3, [sp, #4]
 80a0256:	bd08      	pop	{r3, pc}
 80a0258:	080601b0 	.word	0x080601b0

080a025c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a025c:	b508      	push	{r3, lr}
 80a025e:	4b02      	ldr	r3, [pc, #8]	; (80a0268 <HAL_GPIO_Write+0xc>)
 80a0260:	681b      	ldr	r3, [r3, #0]
 80a0262:	691b      	ldr	r3, [r3, #16]
 80a0264:	9301      	str	r3, [sp, #4]
 80a0266:	bd08      	pop	{r3, pc}
 80a0268:	080601b0 	.word	0x080601b0

080a026c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a026c:	b508      	push	{r3, lr}
 80a026e:	4b02      	ldr	r3, [pc, #8]	; (80a0278 <HAL_I2C_Write_Data+0xc>)
 80a0270:	681b      	ldr	r3, [r3, #0]
 80a0272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0274:	9301      	str	r3, [sp, #4]
 80a0276:	bd08      	pop	{r3, pc}
 80a0278:	080601ac 	.word	0x080601ac

080a027c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a027c:	b508      	push	{r3, lr}
 80a027e:	4b02      	ldr	r3, [pc, #8]	; (80a0288 <HAL_I2C_Available_Data+0xc>)
 80a0280:	681b      	ldr	r3, [r3, #0]
 80a0282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0284:	9301      	str	r3, [sp, #4]
 80a0286:	bd08      	pop	{r3, pc}
 80a0288:	080601ac 	.word	0x080601ac

080a028c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a028c:	b508      	push	{r3, lr}
 80a028e:	4b02      	ldr	r3, [pc, #8]	; (80a0298 <HAL_I2C_Read_Data+0xc>)
 80a0290:	681b      	ldr	r3, [r3, #0]
 80a0292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0294:	9301      	str	r3, [sp, #4]
 80a0296:	bd08      	pop	{r3, pc}
 80a0298:	080601ac 	.word	0x080601ac

080a029c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a029c:	b508      	push	{r3, lr}
 80a029e:	4b02      	ldr	r3, [pc, #8]	; (80a02a8 <HAL_I2C_Peek_Data+0xc>)
 80a02a0:	681b      	ldr	r3, [r3, #0]
 80a02a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a02a4:	9301      	str	r3, [sp, #4]
 80a02a6:	bd08      	pop	{r3, pc}
 80a02a8:	080601ac 	.word	0x080601ac

080a02ac <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a02ac:	b508      	push	{r3, lr}
 80a02ae:	4b02      	ldr	r3, [pc, #8]	; (80a02b8 <HAL_I2C_Flush_Data+0xc>)
 80a02b0:	681b      	ldr	r3, [r3, #0]
 80a02b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a02b4:	9301      	str	r3, [sp, #4]
 80a02b6:	bd08      	pop	{r3, pc}
 80a02b8:	080601ac 	.word	0x080601ac

080a02bc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a02bc:	b508      	push	{r3, lr}
 80a02be:	4b02      	ldr	r3, [pc, #8]	; (80a02c8 <HAL_I2C_Is_Enabled+0xc>)
 80a02c0:	681b      	ldr	r3, [r3, #0]
 80a02c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a02c4:	9301      	str	r3, [sp, #4]
 80a02c6:	bd08      	pop	{r3, pc}
 80a02c8:	080601ac 	.word	0x080601ac

080a02cc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a02cc:	b508      	push	{r3, lr}
 80a02ce:	4b03      	ldr	r3, [pc, #12]	; (80a02dc <HAL_I2C_Init+0x10>)
 80a02d0:	681b      	ldr	r3, [r3, #0]
 80a02d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a02d6:	9301      	str	r3, [sp, #4]
 80a02d8:	bd08      	pop	{r3, pc}
 80a02da:	0000      	.short	0x0000
 80a02dc:	080601ac 	.word	0x080601ac

080a02e0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b02      	ldr	r3, [pc, #8]	; (80a02ec <HAL_SPI_Init+0xc>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	69db      	ldr	r3, [r3, #28]
 80a02e8:	9301      	str	r3, [sp, #4]
 80a02ea:	bd08      	pop	{r3, pc}
 80a02ec:	080601b4 	.word	0x080601b4

080a02f0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a02f0:	b508      	push	{r3, lr}
 80a02f2:	4b02      	ldr	r3, [pc, #8]	; (80a02fc <HAL_SPI_Is_Enabled+0xc>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	6a1b      	ldr	r3, [r3, #32]
 80a02f8:	9301      	str	r3, [sp, #4]
 80a02fa:	bd08      	pop	{r3, pc}
 80a02fc:	080601b4 	.word	0x080601b4

080a0300 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0300:	b508      	push	{r3, lr}
 80a0302:	4b02      	ldr	r3, [pc, #8]	; (80a030c <HAL_USART_Init+0xc>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	699b      	ldr	r3, [r3, #24]
 80a0308:	9301      	str	r3, [sp, #4]
 80a030a:	bd08      	pop	{r3, pc}
 80a030c:	080601c4 	.word	0x080601c4

080a0310 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <HAL_USART_Write_Data+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	080601c4 	.word	0x080601c4

080a0320 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b02      	ldr	r3, [pc, #8]	; (80a032c <HAL_USART_Available_Data+0xc>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0328:	9301      	str	r3, [sp, #4]
 80a032a:	bd08      	pop	{r3, pc}
 80a032c:	080601c4 	.word	0x080601c4

080a0330 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0330:	b508      	push	{r3, lr}
 80a0332:	4b02      	ldr	r3, [pc, #8]	; (80a033c <HAL_USART_Read_Data+0xc>)
 80a0334:	681b      	ldr	r3, [r3, #0]
 80a0336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0338:	9301      	str	r3, [sp, #4]
 80a033a:	bd08      	pop	{r3, pc}
 80a033c:	080601c4 	.word	0x080601c4

080a0340 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0340:	b508      	push	{r3, lr}
 80a0342:	4b02      	ldr	r3, [pc, #8]	; (80a034c <HAL_USART_Peek_Data+0xc>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0348:	9301      	str	r3, [sp, #4]
 80a034a:	bd08      	pop	{r3, pc}
 80a034c:	080601c4 	.word	0x080601c4

080a0350 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0350:	b508      	push	{r3, lr}
 80a0352:	4b02      	ldr	r3, [pc, #8]	; (80a035c <HAL_USART_Flush_Data+0xc>)
 80a0354:	681b      	ldr	r3, [r3, #0]
 80a0356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0358:	9301      	str	r3, [sp, #4]
 80a035a:	bd08      	pop	{r3, pc}
 80a035c:	080601c4 	.word	0x080601c4

080a0360 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0360:	b508      	push	{r3, lr}
 80a0362:	4b02      	ldr	r3, [pc, #8]	; (80a036c <HAL_USART_Is_Enabled+0xc>)
 80a0364:	681b      	ldr	r3, [r3, #0]
 80a0366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0368:	9301      	str	r3, [sp, #4]
 80a036a:	bd08      	pop	{r3, pc}
 80a036c:	080601c4 	.word	0x080601c4

080a0370 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0370:	b508      	push	{r3, lr}
 80a0372:	4b02      	ldr	r3, [pc, #8]	; (80a037c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0374:	681b      	ldr	r3, [r3, #0]
 80a0376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0378:	9301      	str	r3, [sp, #4]
 80a037a:	bd08      	pop	{r3, pc}
 80a037c:	080601c4 	.word	0x080601c4

080a0380 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a0380:	b508      	push	{r3, lr}
 80a0382:	4b02      	ldr	r3, [pc, #8]	; (80a038c <HAL_USART_BeginConfig+0xc>)
 80a0384:	681b      	ldr	r3, [r3, #0]
 80a0386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0388:	9301      	str	r3, [sp, #4]
 80a038a:	bd08      	pop	{r3, pc}
 80a038c:	080601c4 	.word	0x080601c4

080a0390 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0390:	b508      	push	{r3, lr}
 80a0392:	4b02      	ldr	r3, [pc, #8]	; (80a039c <HAL_USB_USART_Init+0xc>)
 80a0394:	681b      	ldr	r3, [r3, #0]
 80a0396:	681b      	ldr	r3, [r3, #0]
 80a0398:	9301      	str	r3, [sp, #4]
 80a039a:	bd08      	pop	{r3, pc}
 80a039c:	080601d8 	.word	0x080601d8

080a03a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a03a0:	b508      	push	{r3, lr}
 80a03a2:	4b02      	ldr	r3, [pc, #8]	; (80a03ac <HAL_USB_USART_Begin+0xc>)
 80a03a4:	681b      	ldr	r3, [r3, #0]
 80a03a6:	685b      	ldr	r3, [r3, #4]
 80a03a8:	9301      	str	r3, [sp, #4]
 80a03aa:	bd08      	pop	{r3, pc}
 80a03ac:	080601d8 	.word	0x080601d8

080a03b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a03b0:	b508      	push	{r3, lr}
 80a03b2:	4b02      	ldr	r3, [pc, #8]	; (80a03bc <HAL_USB_USART_Available_Data+0xc>)
 80a03b4:	681b      	ldr	r3, [r3, #0]
 80a03b6:	691b      	ldr	r3, [r3, #16]
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	bd08      	pop	{r3, pc}
 80a03bc:	080601d8 	.word	0x080601d8

080a03c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a03c0:	b508      	push	{r3, lr}
 80a03c2:	4b02      	ldr	r3, [pc, #8]	; (80a03cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a03c4:	681b      	ldr	r3, [r3, #0]
 80a03c6:	695b      	ldr	r3, [r3, #20]
 80a03c8:	9301      	str	r3, [sp, #4]
 80a03ca:	bd08      	pop	{r3, pc}
 80a03cc:	080601d8 	.word	0x080601d8

080a03d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a03d0:	b508      	push	{r3, lr}
 80a03d2:	4b02      	ldr	r3, [pc, #8]	; (80a03dc <HAL_USB_USART_Receive_Data+0xc>)
 80a03d4:	681b      	ldr	r3, [r3, #0]
 80a03d6:	699b      	ldr	r3, [r3, #24]
 80a03d8:	9301      	str	r3, [sp, #4]
 80a03da:	bd08      	pop	{r3, pc}
 80a03dc:	080601d8 	.word	0x080601d8

080a03e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a03e0:	b508      	push	{r3, lr}
 80a03e2:	4b02      	ldr	r3, [pc, #8]	; (80a03ec <HAL_USB_USART_Send_Data+0xc>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	69db      	ldr	r3, [r3, #28]
 80a03e8:	9301      	str	r3, [sp, #4]
 80a03ea:	bd08      	pop	{r3, pc}
 80a03ec:	080601d8 	.word	0x080601d8

080a03f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a03f0:	b508      	push	{r3, lr}
 80a03f2:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <HAL_USB_USART_Flush_Data+0xc>)
 80a03f4:	681b      	ldr	r3, [r3, #0]
 80a03f6:	6a1b      	ldr	r3, [r3, #32]
 80a03f8:	9301      	str	r3, [sp, #4]
 80a03fa:	bd08      	pop	{r3, pc}
 80a03fc:	080601d8 	.word	0x080601d8

080a0400 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b02      	ldr	r3, [pc, #8]	; (80a040c <inet_gethostbyname+0xc>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0408:	9301      	str	r3, [sp, #4]
 80a040a:	bd08      	pop	{r3, pc}
 80a040c:	080601c0 	.word	0x080601c0

080a0410 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <set_system_mode+0xc>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	685b      	ldr	r3, [r3, #4]
 80a0418:	9301      	str	r3, [sp, #4]
 80a041a:	bd08      	pop	{r3, pc}
 80a041c:	080601a4 	.word	0x080601a4

080a0420 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0420:	b508      	push	{r3, lr}
 80a0422:	4b02      	ldr	r3, [pc, #8]	; (80a042c <system_delay_ms+0xc>)
 80a0424:	681b      	ldr	r3, [r3, #0]
 80a0426:	695b      	ldr	r3, [r3, #20]
 80a0428:	9301      	str	r3, [sp, #4]
 80a042a:	bd08      	pop	{r3, pc}
 80a042c:	080601a4 	.word	0x080601a4

080a0430 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0430:	b508      	push	{r3, lr}
 80a0432:	4b03      	ldr	r3, [pc, #12]	; (80a0440 <system_ctrl_set_app_request_handler+0x10>)
 80a0434:	681b      	ldr	r3, [r3, #0]
 80a0436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a043a:	9301      	str	r3, [sp, #4]
 80a043c:	bd08      	pop	{r3, pc}
 80a043e:	0000      	.short	0x0000
 80a0440:	080601a4 	.word	0x080601a4

080a0444 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0444:	b508      	push	{r3, lr}
 80a0446:	4b03      	ldr	r3, [pc, #12]	; (80a0454 <system_ctrl_set_result+0x10>)
 80a0448:	681b      	ldr	r3, [r3, #0]
 80a044a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a044e:	9301      	str	r3, [sp, #4]
 80a0450:	bd08      	pop	{r3, pc}
 80a0452:	0000      	.short	0x0000
 80a0454:	080601a4 	.word	0x080601a4

080a0458 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0458:	b508      	push	{r3, lr}
 80a045a:	4b02      	ldr	r3, [pc, #8]	; (80a0464 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a045c:	681b      	ldr	r3, [r3, #0]
 80a045e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0460:	9301      	str	r3, [sp, #4]
 80a0462:	bd08      	pop	{r3, pc}
 80a0464:	080601cc 	.word	0x080601cc

080a0468 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0468:	b508      	push	{r3, lr}
 80a046a:	4b02      	ldr	r3, [pc, #8]	; (80a0474 <network_connect+0xc>)
 80a046c:	681b      	ldr	r3, [r3, #0]
 80a046e:	685b      	ldr	r3, [r3, #4]
 80a0470:	9301      	str	r3, [sp, #4]
 80a0472:	bd08      	pop	{r3, pc}
 80a0474:	080601c8 	.word	0x080601c8

080a0478 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <network_connecting+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	689b      	ldr	r3, [r3, #8]
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601c8 	.word	0x080601c8

080a0488 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <network_disconnect+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	68db      	ldr	r3, [r3, #12]
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601c8 	.word	0x080601c8

080a0498 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <network_ready+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	691b      	ldr	r3, [r3, #16]
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601c8 	.word	0x080601c8

080a04a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <network_on+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	695b      	ldr	r3, [r3, #20]
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	080601c8 	.word	0x080601c8

080a04b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04b8:	b508      	push	{r3, lr}
 80a04ba:	4b02      	ldr	r3, [pc, #8]	; (80a04c4 <network_off+0xc>)
 80a04bc:	681b      	ldr	r3, [r3, #0]
 80a04be:	699b      	ldr	r3, [r3, #24]
 80a04c0:	9301      	str	r3, [sp, #4]
 80a04c2:	bd08      	pop	{r3, pc}
 80a04c4:	080601c8 	.word	0x080601c8

080a04c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a04c8:	b508      	push	{r3, lr}
 80a04ca:	4b02      	ldr	r3, [pc, #8]	; (80a04d4 <network_listen+0xc>)
 80a04cc:	681b      	ldr	r3, [r3, #0]
 80a04ce:	69db      	ldr	r3, [r3, #28]
 80a04d0:	9301      	str	r3, [sp, #4]
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	080601c8 	.word	0x080601c8

080a04d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <network_listening+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	6a1b      	ldr	r3, [r3, #32]
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601c8 	.word	0x080601c8

080a04e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <network_set_listen_timeout+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601c8 	.word	0x080601c8

080a04f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <network_get_listen_timeout+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601c8 	.word	0x080601c8

080a0508 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <malloc+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	681b      	ldr	r3, [r3, #0]
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601a0 	.word	0x080601a0

080a0518 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <free+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	685b      	ldr	r3, [r3, #4]
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601a0 	.word	0x080601a0

080a0528 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0528:	2100      	movs	r1, #0
 80a052a:	f7ff bf79 	b.w	80a0420 <system_delay_ms>

080a052e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a052e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0530:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0532:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0534:	b113      	cbz	r3, 80a053c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0536:	2203      	movs	r2, #3
 80a0538:	4601      	mov	r1, r0
 80a053a:	4798      	blx	r3
    }
 80a053c:	4620      	mov	r0, r4
 80a053e:	bd10      	pop	{r4, pc}

080a0540 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0540:	4770      	bx	lr

080a0542 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0544:	4606      	mov	r6, r0
 80a0546:	4615      	mov	r5, r2
 80a0548:	460c      	mov	r4, r1
 80a054a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a054c:	42bc      	cmp	r4, r7
 80a054e:	d006      	beq.n	80a055e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0550:	6833      	ldr	r3, [r6, #0]
 80a0552:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0556:	689b      	ldr	r3, [r3, #8]
 80a0558:	4630      	mov	r0, r6
 80a055a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a055c:	e7f6      	b.n	80a054c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a055e:	4628      	mov	r0, r5
 80a0560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0562 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0562:	2200      	movs	r2, #0
 80a0564:	7c00      	ldrb	r0, [r0, #16]
 80a0566:	f7ff be81 	b.w	80a026c <HAL_I2C_Write_Data>

080a056a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a056a:	2100      	movs	r1, #0
 80a056c:	7c00      	ldrb	r0, [r0, #16]
 80a056e:	f7ff be85 	b.w	80a027c <HAL_I2C_Available_Data>

080a0572 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0572:	2100      	movs	r1, #0
 80a0574:	7c00      	ldrb	r0, [r0, #16]
 80a0576:	f7ff be89 	b.w	80a028c <HAL_I2C_Read_Data>

080a057a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a057a:	2100      	movs	r1, #0
 80a057c:	7c00      	ldrb	r0, [r0, #16]
 80a057e:	f7ff be8d 	b.w	80a029c <HAL_I2C_Peek_Data>

080a0582 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0582:	2100      	movs	r1, #0
 80a0584:	7c00      	ldrb	r0, [r0, #16]
 80a0586:	f7ff be91 	b.w	80a02ac <HAL_I2C_Flush_Data>

080a058a <_ZN7TwoWireD0Ev>:
 80a058a:	b510      	push	{r4, lr}
 80a058c:	4604      	mov	r4, r0
 80a058e:	f7ff fd86 	bl	80a009e <_ZdlPv>
 80a0592:	4620      	mov	r0, r4
 80a0594:	bd10      	pop	{r4, pc}
	...

080a0598 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0598:	b510      	push	{r4, lr}
 80a059a:	4604      	mov	r4, r0
 80a059c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a05a2:	60a3      	str	r3, [r4, #8]
 80a05a4:	4b04      	ldr	r3, [pc, #16]	; (80a05b8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a05a6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a05a8:	7420      	strb	r0, [r4, #16]
 80a05aa:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a05ac:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a05ae:	f7ff fe8d 	bl	80a02cc <HAL_I2C_Init>

}
 80a05b2:	4620      	mov	r0, r4
 80a05b4:	bd10      	pop	{r4, pc}
 80a05b6:	bf00      	nop
 80a05b8:	080a1218 	.word	0x080a1218

080a05bc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a05bc:	2100      	movs	r1, #0
 80a05be:	7c00      	ldrb	r0, [r0, #16]
 80a05c0:	f7ff be7c 	b.w	80a02bc <HAL_I2C_Is_Enabled>

080a05c4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a05c4:	4770      	bx	lr

080a05c6 <_ZN9IPAddressD0Ev>:
 80a05c6:	b510      	push	{r4, lr}
 80a05c8:	4604      	mov	r4, r0
 80a05ca:	f7ff fd68 	bl	80a009e <_ZdlPv>
 80a05ce:	4620      	mov	r0, r4
 80a05d0:	bd10      	pop	{r4, pc}

080a05d2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a05d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05d4:	460f      	mov	r7, r1
 80a05d6:	f100 0608 	add.w	r6, r0, #8
 80a05da:	1d05      	adds	r5, r0, #4
 80a05dc:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a05de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a05e2:	220a      	movs	r2, #10
 80a05e4:	4638      	mov	r0, r7
 80a05e6:	f000 f92a 	bl	80a083e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a05ea:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a05ec:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a05ee:	d007      	beq.n	80a0600 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a05f0:	2c00      	cmp	r4, #0
 80a05f2:	d0f4      	beq.n	80a05de <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a05f4:	212e      	movs	r1, #46	; 0x2e
 80a05f6:	4638      	mov	r0, r7
 80a05f8:	f000 f8de 	bl	80a07b8 <_ZN5Print5printEc>
 80a05fc:	4404      	add	r4, r0
 80a05fe:	e7ee      	b.n	80a05de <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0600:	4620      	mov	r0, r4
 80a0602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0604 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0604:	b510      	push	{r4, lr}
 80a0606:	4604      	mov	r4, r0
 80a0608:	4b04      	ldr	r3, [pc, #16]	; (80a061c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a060a:	2211      	movs	r2, #17
 80a060c:	f840 3b04 	str.w	r3, [r0], #4
 80a0610:	2100      	movs	r1, #0
 80a0612:	f000 fd9e 	bl	80a1152 <memset>
{
    clear();
}
 80a0616:	4620      	mov	r0, r4
 80a0618:	bd10      	pop	{r4, pc}
 80a061a:	bf00      	nop
 80a061c:	080a1240 	.word	0x080a1240

080a0620 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0620:	4603      	mov	r3, r0
 80a0622:	4a07      	ldr	r2, [pc, #28]	; (80a0640 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0624:	b510      	push	{r4, lr}
 80a0626:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a062a:	f101 0210 	add.w	r2, r1, #16
 80a062e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0632:	4291      	cmp	r1, r2
 80a0634:	f843 4b04 	str.w	r4, [r3], #4
 80a0638:	d1f9      	bne.n	80a062e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a063a:	780a      	ldrb	r2, [r1, #0]
 80a063c:	701a      	strb	r2, [r3, #0]
}
 80a063e:	bd10      	pop	{r4, pc}
 80a0640:	080a1240 	.word	0x080a1240

080a0644 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0644:	4a02      	ldr	r2, [pc, #8]	; (80a0650 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0646:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0648:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a064a:	2204      	movs	r2, #4
 80a064c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a064e:	4770      	bx	lr
 80a0650:	080a1240 	.word	0x080a1240

080a0654 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0654:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0656:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a065a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a065e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0662:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0666:	2304      	movs	r3, #4
 80a0668:	6041      	str	r1, [r0, #4]
 80a066a:	7503      	strb	r3, [r0, #20]
 80a066c:	bd10      	pop	{r4, pc}
	...

080a0670 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0672:	4d04      	ldr	r5, [pc, #16]	; (80a0684 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0674:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0676:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a067a:	9500      	str	r5, [sp, #0]
 80a067c:	f7ff ffea 	bl	80a0654 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0680:	b003      	add	sp, #12
 80a0682:	bd30      	pop	{r4, r5, pc}
 80a0684:	080a1240 	.word	0x080a1240

080a0688 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0688:	4a01      	ldr	r2, [pc, #4]	; (80a0690 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a068a:	4b02      	ldr	r3, [pc, #8]	; (80a0694 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a068c:	601a      	str	r2, [r3, #0]
 80a068e:	4770      	bx	lr
 80a0690:	080a1307 	.word	0x080a1307
 80a0694:	2000037c 	.word	0x2000037c

080a0698 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0698:	2300      	movs	r3, #0
 80a069a:	461a      	mov	r2, r3
 80a069c:	6840      	ldr	r0, [r0, #4]
 80a069e:	f7ff bee3 	b.w	80a0468 <network_connect>

080a06a2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a06a2:	2200      	movs	r2, #0
 80a06a4:	2102      	movs	r1, #2
 80a06a6:	6840      	ldr	r0, [r0, #4]
 80a06a8:	f7ff beee 	b.w	80a0488 <network_disconnect>

080a06ac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a06ac:	2200      	movs	r2, #0
 80a06ae:	4611      	mov	r1, r2
 80a06b0:	6840      	ldr	r0, [r0, #4]
 80a06b2:	f7ff bee1 	b.w	80a0478 <network_connecting>

080a06b6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a06b6:	2200      	movs	r2, #0
 80a06b8:	4611      	mov	r1, r2
 80a06ba:	6840      	ldr	r0, [r0, #4]
 80a06bc:	f7ff beec 	b.w	80a0498 <network_ready>

080a06c0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a06c0:	2300      	movs	r3, #0
 80a06c2:	461a      	mov	r2, r3
 80a06c4:	4619      	mov	r1, r3
 80a06c6:	6840      	ldr	r0, [r0, #4]
 80a06c8:	f7ff beee 	b.w	80a04a8 <network_on>

080a06cc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a06cc:	2300      	movs	r3, #0
 80a06ce:	461a      	mov	r2, r3
 80a06d0:	4619      	mov	r1, r3
 80a06d2:	6840      	ldr	r0, [r0, #4]
 80a06d4:	f7ff bef0 	b.w	80a04b8 <network_off>

080a06d8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a06d8:	2200      	movs	r2, #0
 80a06da:	f081 0101 	eor.w	r1, r1, #1
 80a06de:	6840      	ldr	r0, [r0, #4]
 80a06e0:	f7ff bef2 	b.w	80a04c8 <network_listen>

080a06e4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a06e4:	2200      	movs	r2, #0
 80a06e6:	6840      	ldr	r0, [r0, #4]
 80a06e8:	f7ff befe 	b.w	80a04e8 <network_set_listen_timeout>

080a06ec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a06ec:	2200      	movs	r2, #0
 80a06ee:	4611      	mov	r1, r2
 80a06f0:	6840      	ldr	r0, [r0, #4]
 80a06f2:	f7ff bf01 	b.w	80a04f8 <network_get_listen_timeout>

080a06f6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a06f6:	2200      	movs	r2, #0
 80a06f8:	4611      	mov	r1, r2
 80a06fa:	6840      	ldr	r0, [r0, #4]
 80a06fc:	f7ff beec 	b.w	80a04d8 <network_listening>

080a0700 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0700:	b570      	push	{r4, r5, r6, lr}
 80a0702:	4616      	mov	r6, r2
 80a0704:	b08e      	sub	sp, #56	; 0x38
 80a0706:	4604      	mov	r4, r0
    IPAddress addr;
 80a0708:	a808      	add	r0, sp, #32
 80a070a:	f7ff ff7b 	bl	80a0604 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a070e:	2211      	movs	r2, #17
 80a0710:	2100      	movs	r1, #0
 80a0712:	a803      	add	r0, sp, #12
 80a0714:	f000 fd1d 	bl	80a1152 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0718:	4630      	mov	r0, r6
 80a071a:	f000 fd4b 	bl	80a11b4 <strlen>
 80a071e:	2500      	movs	r5, #0
 80a0720:	4b0a      	ldr	r3, [pc, #40]	; (80a074c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0722:	9500      	str	r5, [sp, #0]
 80a0724:	b281      	uxth	r1, r0
 80a0726:	685b      	ldr	r3, [r3, #4]
 80a0728:	aa03      	add	r2, sp, #12
 80a072a:	4630      	mov	r0, r6
 80a072c:	f7ff fe68 	bl	80a0400 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0730:	b120      	cbz	r0, 80a073c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0732:	4629      	mov	r1, r5
 80a0734:	4620      	mov	r0, r4
 80a0736:	f7ff ff85 	bl	80a0644 <_ZN9IPAddressC1Em>
 80a073a:	e003      	b.n	80a0744 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a073c:	a903      	add	r1, sp, #12
 80a073e:	4620      	mov	r0, r4
 80a0740:	f7ff ff6e 	bl	80a0620 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0744:	4620      	mov	r0, r4
 80a0746:	b00e      	add	sp, #56	; 0x38
 80a0748:	bd70      	pop	{r4, r5, r6, pc}
 80a074a:	bf00      	nop
 80a074c:	200003f4 	.word	0x200003f4

080a0750 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0750:	4b02      	ldr	r3, [pc, #8]	; (80a075c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0752:	4a03      	ldr	r2, [pc, #12]	; (80a0760 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0754:	601a      	str	r2, [r3, #0]
 80a0756:	2200      	movs	r2, #0
 80a0758:	605a      	str	r2, [r3, #4]
 80a075a:	4770      	bx	lr
 80a075c:	20000380 	.word	0x20000380
 80a0760:	080a1338 	.word	0x080a1338

080a0764 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0766:	4606      	mov	r6, r0
 80a0768:	460d      	mov	r5, r1
 80a076a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a076c:	2400      	movs	r4, #0
  while (size--) {
 80a076e:	42bd      	cmp	r5, r7
 80a0770:	d00c      	beq.n	80a078c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0772:	6833      	ldr	r3, [r6, #0]
 80a0774:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0778:	689b      	ldr	r3, [r3, #8]
 80a077a:	4630      	mov	r0, r6
 80a077c:	4798      	blx	r3
     if (chunk>=0)
 80a077e:	2800      	cmp	r0, #0
 80a0780:	db01      	blt.n	80a0786 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0782:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0784:	e7f3      	b.n	80a076e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0786:	2c00      	cmp	r4, #0
 80a0788:	bf08      	it	eq
 80a078a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a078c:	4620      	mov	r0, r4
 80a078e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0790 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0790:	b570      	push	{r4, r5, r6, lr}
 80a0792:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0794:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0796:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0798:	b149      	cbz	r1, 80a07ae <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a079a:	f000 fd0b 	bl	80a11b4 <strlen>
 80a079e:	682b      	ldr	r3, [r5, #0]
 80a07a0:	4602      	mov	r2, r0
 80a07a2:	4621      	mov	r1, r4
 80a07a4:	4628      	mov	r0, r5
    }
 80a07a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a07aa:	68db      	ldr	r3, [r3, #12]
 80a07ac:	4718      	bx	r3
    }
 80a07ae:	bd70      	pop	{r4, r5, r6, pc}

080a07b0 <_ZN5Print5printEPKc>:
 80a07b0:	b508      	push	{r3, lr}
 80a07b2:	f7ff ffed 	bl	80a0790 <_ZN5Print5writeEPKc>
 80a07b6:	bd08      	pop	{r3, pc}

080a07b8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a07b8:	6803      	ldr	r3, [r0, #0]
 80a07ba:	689b      	ldr	r3, [r3, #8]
 80a07bc:	4718      	bx	r3

080a07be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a07c0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07c2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a07c4:	f7ff fff8 	bl	80a07b8 <_ZN5Print5printEc>
  n += print('\n');
 80a07c8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a07ca:	4604      	mov	r4, r0
  n += print('\n');
 80a07cc:	4628      	mov	r0, r5
 80a07ce:	f7ff fff3 	bl	80a07b8 <_ZN5Print5printEc>
  return n;
}
 80a07d2:	4420      	add	r0, r4
 80a07d4:	bd38      	pop	{r3, r4, r5, pc}

080a07d6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a07d6:	b538      	push	{r3, r4, r5, lr}
 80a07d8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a07da:	f7ff ffd9 	bl	80a0790 <_ZN5Print5writeEPKc>
 80a07de:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a07e0:	4628      	mov	r0, r5
 80a07e2:	f7ff ffec 	bl	80a07be <_ZN5Print7printlnEv>
  return n;
}
 80a07e6:	4420      	add	r0, r4
 80a07e8:	bd38      	pop	{r3, r4, r5, pc}

080a07ea <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a07ea:	2a01      	cmp	r2, #1
 80a07ec:	bf98      	it	ls
 80a07ee:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a07f0:	b530      	push	{r4, r5, lr}
 80a07f2:	460b      	mov	r3, r1
 80a07f4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a07f6:	2100      	movs	r1, #0
 80a07f8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a07fc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0800:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0804:	fb05 3312 	mls	r3, r5, r2, r3
 80a0808:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a080a:	2b09      	cmp	r3, #9
 80a080c:	bf94      	ite	ls
 80a080e:	3330      	addls	r3, #48	; 0x30
 80a0810:	3337      	addhi	r3, #55	; 0x37
 80a0812:	b2db      	uxtb	r3, r3
 80a0814:	4621      	mov	r1, r4
 80a0816:	f804 3901 	strb.w	r3, [r4], #-1
 80a081a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a081c:	2d00      	cmp	r5, #0
 80a081e:	d1ef      	bne.n	80a0800 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0820:	f7ff ffb6 	bl	80a0790 <_ZN5Print5writeEPKc>
}
 80a0824:	b00b      	add	sp, #44	; 0x2c
 80a0826:	bd30      	pop	{r4, r5, pc}

080a0828 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0828:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a082a:	b922      	cbnz	r2, 80a0836 <_ZN5Print5printEmi+0xe>
 80a082c:	6803      	ldr	r3, [r0, #0]
 80a082e:	b2c9      	uxtb	r1, r1
 80a0830:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0832:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0834:	4718      	bx	r3
  else return printNumber(n, base);
 80a0836:	b2d2      	uxtb	r2, r2
}
 80a0838:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a083a:	f7ff bfd6 	b.w	80a07ea <_ZN5Print11printNumberEmh>

080a083e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a083e:	f7ff bff3 	b.w	80a0828 <_ZN5Print5printEmi>

080a0842 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 80a0842:	b538      	push	{r3, r4, r5, lr}
 80a0844:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a0846:	f7ff ffef 	bl	80a0828 <_ZN5Print5printEmi>
 80a084a:	4604      	mov	r4, r0
  n += println();
 80a084c:	4628      	mov	r0, r5
 80a084e:	f7ff ffb6 	bl	80a07be <_ZN5Print7printlnEv>
  return n;
}
 80a0852:	4420      	add	r0, r4
 80a0854:	bd38      	pop	{r3, r4, r5, pc}

080a0856 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0856:	b510      	push	{r4, lr}
 80a0858:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a085a:	f7ff fe68 	bl	80a052e <_ZNSt14_Function_baseD1Ev>
 80a085e:	4620      	mov	r0, r4
 80a0860:	bd10      	pop	{r4, pc}
	...

080a0864 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0864:	4803      	ldr	r0, [pc, #12]	; (80a0874 <_GLOBAL__sub_I_RGB+0x10>)
 80a0866:	2300      	movs	r3, #0
 80a0868:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a086a:	4a03      	ldr	r2, [pc, #12]	; (80a0878 <_GLOBAL__sub_I_RGB+0x14>)
 80a086c:	4903      	ldr	r1, [pc, #12]	; (80a087c <_GLOBAL__sub_I_RGB+0x18>)
 80a086e:	f000 bb09 	b.w	80a0e84 <__aeabi_atexit>
 80a0872:	bf00      	nop
 80a0874:	20000388 	.word	0x20000388
 80a0878:	20000368 	.word	0x20000368
 80a087c:	080a0857 	.word	0x080a0857

080a0880 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0880:	4770      	bx	lr

080a0882 <_ZN8SPIClassD0Ev>:
 80a0882:	b510      	push	{r4, lr}
 80a0884:	4604      	mov	r4, r0
 80a0886:	f7ff fc0a 	bl	80a009e <_ZdlPv>
 80a088a:	4620      	mov	r0, r4
 80a088c:	bd10      	pop	{r4, pc}
	...

080a0890 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0890:	b570      	push	{r4, r5, r6, lr}
 80a0892:	4604      	mov	r4, r0
 80a0894:	460e      	mov	r6, r1
 80a0896:	4b07      	ldr	r3, [pc, #28]	; (80a08b4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0898:	2500      	movs	r5, #0
 80a089a:	6003      	str	r3, [r0, #0]
 80a089c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a08a0:	f7ff fca4 	bl	80a01ec <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a08a4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a08a6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a08a8:	f7ff fd1a 	bl	80a02e0 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a08ac:	60a5      	str	r5, [r4, #8]
}
 80a08ae:	4620      	mov	r0, r4
 80a08b0:	bd70      	pop	{r4, r5, r6, pc}
 80a08b2:	bf00      	nop
 80a08b4:	080a136c 	.word	0x080a136c

080a08b8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a08b8:	7900      	ldrb	r0, [r0, #4]
 80a08ba:	f7ff bd19 	b.w	80a02f0 <HAL_SPI_Is_Enabled>
	...

080a08c0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a08c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a08c4:	4b03      	ldr	r3, [pc, #12]	; (80a08d4 <_GLOBAL__sub_I_System+0x14>)
 80a08c6:	2000      	movs	r0, #0
 80a08c8:	7018      	strb	r0, [r3, #0]
 80a08ca:	8058      	strh	r0, [r3, #2]
 80a08cc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a08ce:	f7ff bd9f 	b.w	80a0410 <set_system_mode>
 80a08d2:	bf00      	nop
 80a08d4:	20000398 	.word	0x20000398

080a08d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a08d8:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a08da:	681a      	ldr	r2, [r3, #0]
 80a08dc:	4b02      	ldr	r3, [pc, #8]	; (80a08e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a08de:	601a      	str	r2, [r3, #0]
 80a08e0:	4770      	bx	lr
 80a08e2:	bf00      	nop
 80a08e4:	20000300 	.word	0x20000300
 80a08e8:	200003a0 	.word	0x200003a0

080a08ec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a08ec:	4770      	bx	lr

080a08ee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a08ee:	7441      	strb	r1, [r0, #17]
 80a08f0:	4770      	bx	lr

080a08f2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a08f2:	7c00      	ldrb	r0, [r0, #16]
 80a08f4:	f7ff bd3c 	b.w	80a0370 <HAL_USART_Available_Data_For_Write>

080a08f8 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a08f8:	7c00      	ldrb	r0, [r0, #16]
 80a08fa:	f7ff bd11 	b.w	80a0320 <HAL_USART_Available_Data>

080a08fe <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a08fe:	7c00      	ldrb	r0, [r0, #16]
 80a0900:	f7ff bd1e 	b.w	80a0340 <HAL_USART_Peek_Data>

080a0904 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a0904:	7c00      	ldrb	r0, [r0, #16]
 80a0906:	f7ff bd13 	b.w	80a0330 <HAL_USART_Read_Data>

080a090a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a090a:	7c00      	ldrb	r0, [r0, #16]
 80a090c:	f7ff bd20 	b.w	80a0350 <HAL_USART_Flush_Data>

080a0910 <_ZN11USARTSerialD0Ev>:
 80a0910:	b510      	push	{r4, lr}
 80a0912:	4604      	mov	r4, r0
 80a0914:	f7ff fbc3 	bl	80a009e <_ZdlPv>
 80a0918:	4620      	mov	r0, r4
 80a091a:	bd10      	pop	{r4, pc}

080a091c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a091c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a091e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0920:	4604      	mov	r4, r0
 80a0922:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0924:	b925      	cbnz	r5, 80a0930 <_ZN11USARTSerial5writeEh+0x14>
 80a0926:	7c00      	ldrb	r0, [r0, #16]
 80a0928:	f7ff fd22 	bl	80a0370 <HAL_USART_Available_Data_For_Write>
 80a092c:	2800      	cmp	r0, #0
 80a092e:	dd05      	ble.n	80a093c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0930:	4631      	mov	r1, r6
 80a0932:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0938:	f7ff bcea 	b.w	80a0310 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a093c:	4628      	mov	r0, r5
 80a093e:	bd70      	pop	{r4, r5, r6, pc}

080a0940 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0940:	b510      	push	{r4, lr}
 80a0942:	4604      	mov	r4, r0
 80a0944:	4608      	mov	r0, r1
 80a0946:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0948:	2200      	movs	r2, #0
 80a094a:	6062      	str	r2, [r4, #4]
 80a094c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0950:	60a2      	str	r2, [r4, #8]
 80a0952:	4a05      	ldr	r2, [pc, #20]	; (80a0968 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0954:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0956:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0958:	2201      	movs	r2, #1
 80a095a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a095c:	461a      	mov	r2, r3
 80a095e:	f7ff fccf 	bl	80a0300 <HAL_USART_Init>
}
 80a0962:	4620      	mov	r0, r4
 80a0964:	bd10      	pop	{r4, pc}
 80a0966:	bf00      	nop
 80a0968:	080a13a8 	.word	0x080a13a8

080a096c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a096c:	2300      	movs	r3, #0
 80a096e:	7c00      	ldrb	r0, [r0, #16]
 80a0970:	f7ff bd06 	b.w	80a0380 <HAL_USART_BeginConfig>

080a0974 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a0974:	2200      	movs	r2, #0
 80a0976:	f7ff bff9 	b.w	80a096c <_ZN11USARTSerial5beginEmm>

080a097a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a097a:	7c00      	ldrb	r0, [r0, #16]
 80a097c:	f7ff bcf0 	b.w	80a0360 <HAL_USART_Is_Enabled>

080a0980 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a0982:	4c19      	ldr	r4, [pc, #100]	; (80a09e8 <_Z22__fetch_global_Serial1v+0x68>)
 80a0984:	6825      	ldr	r5, [r4, #0]
 80a0986:	b94d      	cbnz	r5, 80a099c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a0988:	2084      	movs	r0, #132	; 0x84
 80a098a:	f7ff fb86 	bl	80a009a <_Znwj>
 80a098e:	4606      	mov	r6, r0
 80a0990:	b118      	cbz	r0, 80a099a <_Z22__fetch_global_Serial1v+0x1a>
 80a0992:	2284      	movs	r2, #132	; 0x84
 80a0994:	4629      	mov	r1, r5
 80a0996:	f000 fbdc 	bl	80a1152 <memset>
 80a099a:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a099c:	4d13      	ldr	r5, [pc, #76]	; (80a09ec <_Z22__fetch_global_Serial1v+0x6c>)
 80a099e:	682e      	ldr	r6, [r5, #0]
 80a09a0:	b94e      	cbnz	r6, 80a09b6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a09a2:	2084      	movs	r0, #132	; 0x84
 80a09a4:	f7ff fb79 	bl	80a009a <_Znwj>
 80a09a8:	4607      	mov	r7, r0
 80a09aa:	b118      	cbz	r0, 80a09b4 <_Z22__fetch_global_Serial1v+0x34>
 80a09ac:	2284      	movs	r2, #132	; 0x84
 80a09ae:	4631      	mov	r1, r6
 80a09b0:	f000 fbcf 	bl	80a1152 <memset>
 80a09b4:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a09b6:	4f0e      	ldr	r7, [pc, #56]	; (80a09f0 <_Z22__fetch_global_Serial1v+0x70>)
 80a09b8:	6839      	ldr	r1, [r7, #0]
 80a09ba:	f011 0601 	ands.w	r6, r1, #1
 80a09be:	d111      	bne.n	80a09e4 <_Z22__fetch_global_Serial1v+0x64>
 80a09c0:	4638      	mov	r0, r7
 80a09c2:	f7ff fb6e 	bl	80a00a2 <__cxa_guard_acquire>
 80a09c6:	b168      	cbz	r0, 80a09e4 <_Z22__fetch_global_Serial1v+0x64>
 80a09c8:	6822      	ldr	r2, [r4, #0]
 80a09ca:	4631      	mov	r1, r6
 80a09cc:	682b      	ldr	r3, [r5, #0]
 80a09ce:	4809      	ldr	r0, [pc, #36]	; (80a09f4 <_Z22__fetch_global_Serial1v+0x74>)
 80a09d0:	f7ff ffb6 	bl	80a0940 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a09d4:	4638      	mov	r0, r7
 80a09d6:	f7ff fb69 	bl	80a00ac <__cxa_guard_release>
 80a09da:	4a07      	ldr	r2, [pc, #28]	; (80a09f8 <_Z22__fetch_global_Serial1v+0x78>)
 80a09dc:	4907      	ldr	r1, [pc, #28]	; (80a09fc <_Z22__fetch_global_Serial1v+0x7c>)
 80a09de:	4805      	ldr	r0, [pc, #20]	; (80a09f4 <_Z22__fetch_global_Serial1v+0x74>)
 80a09e0:	f000 fa50 	bl	80a0e84 <__aeabi_atexit>
#endif
	return serial1;
}
 80a09e4:	4803      	ldr	r0, [pc, #12]	; (80a09f4 <_Z22__fetch_global_Serial1v+0x74>)
 80a09e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a09e8:	200003c0 	.word	0x200003c0
 80a09ec:	200003b8 	.word	0x200003b8
 80a09f0:	200003bc 	.word	0x200003bc
 80a09f4:	200003a4 	.word	0x200003a4
 80a09f8:	20000368 	.word	0x20000368
 80a09fc:	080a08ed 	.word	0x080a08ed

080a0a00 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0a00:	7441      	strb	r1, [r0, #17]
 80a0a02:	4770      	bx	lr

080a0a04 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0a04:	4770      	bx	lr

080a0a06 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a0a06:	2100      	movs	r1, #0
 80a0a08:	7c00      	ldrb	r0, [r0, #16]
 80a0a0a:	f7ff bce1 	b.w	80a03d0 <HAL_USB_USART_Receive_Data>

080a0a0e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a0a0e:	2101      	movs	r1, #1
 80a0a10:	7c00      	ldrb	r0, [r0, #16]
 80a0a12:	f7ff bcdd 	b.w	80a03d0 <HAL_USB_USART_Receive_Data>

080a0a16 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a0a16:	7c00      	ldrb	r0, [r0, #16]
 80a0a18:	f7ff bcd2 	b.w	80a03c0 <HAL_USB_USART_Available_Data_For_Write>

080a0a1c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a0a1c:	7c00      	ldrb	r0, [r0, #16]
 80a0a1e:	f7ff bcc7 	b.w	80a03b0 <HAL_USB_USART_Available_Data>

080a0a22 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a0a22:	b538      	push	{r3, r4, r5, lr}
 80a0a24:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a26:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a0a28:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a2a:	f7ff fcc9 	bl	80a03c0 <HAL_USB_USART_Available_Data_For_Write>
 80a0a2e:	2800      	cmp	r0, #0
 80a0a30:	dc01      	bgt.n	80a0a36 <_ZN9USBSerial5writeEh+0x14>
 80a0a32:	7c60      	ldrb	r0, [r4, #17]
 80a0a34:	b120      	cbz	r0, 80a0a40 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a0a36:	4629      	mov	r1, r5
 80a0a38:	7c20      	ldrb	r0, [r4, #16]
 80a0a3a:	f7ff fcd1 	bl	80a03e0 <HAL_USB_USART_Send_Data>
    return 1;
 80a0a3e:	2001      	movs	r0, #1
  }
  return 0;
}
 80a0a40:	bd38      	pop	{r3, r4, r5, pc}

080a0a42 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0a42:	7c00      	ldrb	r0, [r0, #16]
 80a0a44:	f7ff bcd4 	b.w	80a03f0 <HAL_USB_USART_Flush_Data>

080a0a48 <_ZN9USBSerialD0Ev>:
 80a0a48:	b510      	push	{r4, lr}
 80a0a4a:	4604      	mov	r4, r0
 80a0a4c:	f7ff fb27 	bl	80a009e <_ZdlPv>
 80a0a50:	4620      	mov	r0, r4
 80a0a52:	bd10      	pop	{r4, pc}

080a0a54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0a54:	b510      	push	{r4, lr}
 80a0a56:	4604      	mov	r4, r0
 80a0a58:	2300      	movs	r3, #0
 80a0a5a:	6063      	str	r3, [r4, #4]
 80a0a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0a60:	60a3      	str	r3, [r4, #8]
 80a0a62:	4b05      	ldr	r3, [pc, #20]	; (80a0a78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0a64:	4608      	mov	r0, r1
 80a0a66:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0a68:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0a6a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0a6c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0a6e:	4611      	mov	r1, r2
 80a0a70:	f7ff fc8e 	bl	80a0390 <HAL_USB_USART_Init>
}
 80a0a74:	4620      	mov	r0, r4
 80a0a76:	bd10      	pop	{r4, pc}
 80a0a78:	080a13d8 	.word	0x080a13d8

080a0a7c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0a7c:	2200      	movs	r2, #0
 80a0a7e:	7c00      	ldrb	r0, [r0, #16]
 80a0a80:	f7ff bc8e 	b.w	80a03a0 <HAL_USB_USART_Begin>

080a0a84 <_Z19acquireSerialBufferv>:
 80a0a84:	b510      	push	{r4, lr}
 80a0a86:	4604      	mov	r4, r0
 80a0a88:	2214      	movs	r2, #20
 80a0a8a:	2100      	movs	r1, #0
 80a0a8c:	f000 fb61 	bl	80a1152 <memset>
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	bd10      	pop	{r4, pc}

080a0a94 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0a94:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0a96:	4d0e      	ldr	r5, [pc, #56]	; (80a0ad0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0a98:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0a9a:	a801      	add	r0, sp, #4
 80a0a9c:	f7ff fff2 	bl	80a0a84 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0aa0:	6829      	ldr	r1, [r5, #0]
 80a0aa2:	f011 0401 	ands.w	r4, r1, #1
 80a0aa6:	d110      	bne.n	80a0aca <_Z16_fetch_usbserialv+0x36>
 80a0aa8:	4628      	mov	r0, r5
 80a0aaa:	f7ff fafa 	bl	80a00a2 <__cxa_guard_acquire>
 80a0aae:	b160      	cbz	r0, 80a0aca <_Z16_fetch_usbserialv+0x36>
 80a0ab0:	aa01      	add	r2, sp, #4
 80a0ab2:	4621      	mov	r1, r4
 80a0ab4:	4807      	ldr	r0, [pc, #28]	; (80a0ad4 <_Z16_fetch_usbserialv+0x40>)
 80a0ab6:	f7ff ffcd 	bl	80a0a54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0aba:	4628      	mov	r0, r5
 80a0abc:	f7ff faf6 	bl	80a00ac <__cxa_guard_release>
 80a0ac0:	4a05      	ldr	r2, [pc, #20]	; (80a0ad8 <_Z16_fetch_usbserialv+0x44>)
 80a0ac2:	4906      	ldr	r1, [pc, #24]	; (80a0adc <_Z16_fetch_usbserialv+0x48>)
 80a0ac4:	4803      	ldr	r0, [pc, #12]	; (80a0ad4 <_Z16_fetch_usbserialv+0x40>)
 80a0ac6:	f000 f9dd 	bl	80a0e84 <__aeabi_atexit>
	return _usbserial;
}
 80a0aca:	4802      	ldr	r0, [pc, #8]	; (80a0ad4 <_Z16_fetch_usbserialv+0x40>)
 80a0acc:	b007      	add	sp, #28
 80a0ace:	bd30      	pop	{r4, r5, pc}
 80a0ad0:	200003c4 	.word	0x200003c4
 80a0ad4:	200003cc 	.word	0x200003cc
 80a0ad8:	20000368 	.word	0x20000368
 80a0adc:	080a0a05 	.word	0x080a0a05

080a0ae0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0ae0:	b510      	push	{r4, lr}
 80a0ae2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0ae4:	2214      	movs	r2, #20
 80a0ae6:	2100      	movs	r1, #0
 80a0ae8:	f000 fb33 	bl	80a1152 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0aec:	4620      	mov	r0, r4
 80a0aee:	bd10      	pop	{r4, pc}

080a0af0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0af0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0af2:	4c0e      	ldr	r4, [pc, #56]	; (80a0b2c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0af4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0af6:	a801      	add	r0, sp, #4
 80a0af8:	f7ff fff2 	bl	80a0ae0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0afc:	6823      	ldr	r3, [r4, #0]
 80a0afe:	07db      	lsls	r3, r3, #31
 80a0b00:	d410      	bmi.n	80a0b24 <_Z17_fetch_usbserial1v+0x34>
 80a0b02:	4620      	mov	r0, r4
 80a0b04:	f7ff facd 	bl	80a00a2 <__cxa_guard_acquire>
 80a0b08:	b160      	cbz	r0, 80a0b24 <_Z17_fetch_usbserial1v+0x34>
 80a0b0a:	aa01      	add	r2, sp, #4
 80a0b0c:	2101      	movs	r1, #1
 80a0b0e:	4808      	ldr	r0, [pc, #32]	; (80a0b30 <_Z17_fetch_usbserial1v+0x40>)
 80a0b10:	f7ff ffa0 	bl	80a0a54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b14:	4620      	mov	r0, r4
 80a0b16:	f7ff fac9 	bl	80a00ac <__cxa_guard_release>
 80a0b1a:	4a06      	ldr	r2, [pc, #24]	; (80a0b34 <_Z17_fetch_usbserial1v+0x44>)
 80a0b1c:	4906      	ldr	r1, [pc, #24]	; (80a0b38 <_Z17_fetch_usbserial1v+0x48>)
 80a0b1e:	4804      	ldr	r0, [pc, #16]	; (80a0b30 <_Z17_fetch_usbserial1v+0x40>)
 80a0b20:	f000 f9b0 	bl	80a0e84 <__aeabi_atexit>
  return _usbserial1;
}
 80a0b24:	4802      	ldr	r0, [pc, #8]	; (80a0b30 <_Z17_fetch_usbserial1v+0x40>)
 80a0b26:	b006      	add	sp, #24
 80a0b28:	bd10      	pop	{r4, pc}
 80a0b2a:	bf00      	nop
 80a0b2c:	200003c8 	.word	0x200003c8
 80a0b30:	200003e0 	.word	0x200003e0
 80a0b34:	20000368 	.word	0x20000368
 80a0b38:	080a0a05 	.word	0x080a0a05

080a0b3c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0b3c:	2200      	movs	r2, #0
 80a0b3e:	4611      	mov	r1, r2
 80a0b40:	6840      	ldr	r0, [r0, #4]
 80a0b42:	f7ff bca9 	b.w	80a0498 <network_ready>

080a0b46 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0b48:	4616      	mov	r6, r2
 80a0b4a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0b4c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0b4e:	460f      	mov	r7, r1
 80a0b50:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0b52:	2100      	movs	r1, #0
 80a0b54:	a803      	add	r0, sp, #12
 80a0b56:	f000 fafc 	bl	80a1152 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0b5a:	4630      	mov	r0, r6
 80a0b5c:	f000 fb2a 	bl	80a11b4 <strlen>
 80a0b60:	2500      	movs	r5, #0
 80a0b62:	9500      	str	r5, [sp, #0]
 80a0b64:	b281      	uxth	r1, r0
 80a0b66:	687b      	ldr	r3, [r7, #4]
 80a0b68:	aa03      	add	r2, sp, #12
 80a0b6a:	4630      	mov	r0, r6
 80a0b6c:	f7ff fc48 	bl	80a0400 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0b70:	b120      	cbz	r0, 80a0b7c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0b72:	4629      	mov	r1, r5
 80a0b74:	4620      	mov	r0, r4
 80a0b76:	f7ff fd65 	bl	80a0644 <_ZN9IPAddressC1Em>
 80a0b7a:	e003      	b.n	80a0b84 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0b7c:	a903      	add	r1, sp, #12
 80a0b7e:	4620      	mov	r0, r4
 80a0b80:	f7ff fd4e 	bl	80a0620 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0b84:	4620      	mov	r0, r4
 80a0b86:	b009      	add	sp, #36	; 0x24
 80a0b88:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0b8a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0b8a:	2200      	movs	r2, #0
 80a0b8c:	4611      	mov	r1, r2
 80a0b8e:	6840      	ldr	r0, [r0, #4]
 80a0b90:	f7ff bca2 	b.w	80a04d8 <network_listening>

080a0b94 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0b94:	2200      	movs	r2, #0
 80a0b96:	4611      	mov	r1, r2
 80a0b98:	6840      	ldr	r0, [r0, #4]
 80a0b9a:	f7ff bcad 	b.w	80a04f8 <network_get_listen_timeout>

080a0b9e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0b9e:	2200      	movs	r2, #0
 80a0ba0:	6840      	ldr	r0, [r0, #4]
 80a0ba2:	f7ff bca1 	b.w	80a04e8 <network_set_listen_timeout>

080a0ba6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0ba6:	2200      	movs	r2, #0
 80a0ba8:	f081 0101 	eor.w	r1, r1, #1
 80a0bac:	6840      	ldr	r0, [r0, #4]
 80a0bae:	f7ff bc8b 	b.w	80a04c8 <network_listen>

080a0bb2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0bb2:	2300      	movs	r3, #0
 80a0bb4:	461a      	mov	r2, r3
 80a0bb6:	4619      	mov	r1, r3
 80a0bb8:	6840      	ldr	r0, [r0, #4]
 80a0bba:	f7ff bc7d 	b.w	80a04b8 <network_off>

080a0bbe <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0bbe:	2300      	movs	r3, #0
 80a0bc0:	461a      	mov	r2, r3
 80a0bc2:	4619      	mov	r1, r3
 80a0bc4:	6840      	ldr	r0, [r0, #4]
 80a0bc6:	f7ff bc6f 	b.w	80a04a8 <network_on>

080a0bca <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0bca:	2200      	movs	r2, #0
 80a0bcc:	4611      	mov	r1, r2
 80a0bce:	6840      	ldr	r0, [r0, #4]
 80a0bd0:	f7ff bc52 	b.w	80a0478 <network_connecting>

080a0bd4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0bd4:	2200      	movs	r2, #0
 80a0bd6:	2102      	movs	r1, #2
 80a0bd8:	6840      	ldr	r0, [r0, #4]
 80a0bda:	f7ff bc55 	b.w	80a0488 <network_disconnect>

080a0bde <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0bde:	2300      	movs	r3, #0
 80a0be0:	461a      	mov	r2, r3
 80a0be2:	6840      	ldr	r0, [r0, #4]
 80a0be4:	f7ff bc40 	b.w	80a0468 <network_connect>

080a0be8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0be8:	4b02      	ldr	r3, [pc, #8]	; (80a0bf4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0bea:	2204      	movs	r2, #4
 80a0bec:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0bee:	4a02      	ldr	r2, [pc, #8]	; (80a0bf8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0bf0:	601a      	str	r2, [r3, #0]
 80a0bf2:	4770      	bx	lr
 80a0bf4:	200003f4 	.word	0x200003f4
 80a0bf8:	080a1408 	.word	0x080a1408

080a0bfc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0bfc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0bfe:	4b14      	ldr	r3, [pc, #80]	; (80a0c50 <serialEventRun+0x54>)
 80a0c00:	b133      	cbz	r3, 80a0c10 <serialEventRun+0x14>
 80a0c02:	f7ff ff47 	bl	80a0a94 <_Z16_fetch_usbserialv>
 80a0c06:	6803      	ldr	r3, [r0, #0]
 80a0c08:	691b      	ldr	r3, [r3, #16]
 80a0c0a:	4798      	blx	r3
 80a0c0c:	2800      	cmp	r0, #0
 80a0c0e:	dc16      	bgt.n	80a0c3e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0c10:	4b10      	ldr	r3, [pc, #64]	; (80a0c54 <serialEventRun+0x58>)
 80a0c12:	b133      	cbz	r3, 80a0c22 <serialEventRun+0x26>
 80a0c14:	f7ff feb4 	bl	80a0980 <_Z22__fetch_global_Serial1v>
 80a0c18:	6803      	ldr	r3, [r0, #0]
 80a0c1a:	691b      	ldr	r3, [r3, #16]
 80a0c1c:	4798      	blx	r3
 80a0c1e:	2800      	cmp	r0, #0
 80a0c20:	dc10      	bgt.n	80a0c44 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0c22:	4b0d      	ldr	r3, [pc, #52]	; (80a0c58 <serialEventRun+0x5c>)
 80a0c24:	b10b      	cbz	r3, 80a0c2a <serialEventRun+0x2e>
 80a0c26:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0c2a:	4b0c      	ldr	r3, [pc, #48]	; (80a0c5c <serialEventRun+0x60>)
 80a0c2c:	b17b      	cbz	r3, 80a0c4e <serialEventRun+0x52>
 80a0c2e:	f7ff ff5f 	bl	80a0af0 <_Z17_fetch_usbserial1v>
 80a0c32:	6803      	ldr	r3, [r0, #0]
 80a0c34:	691b      	ldr	r3, [r3, #16]
 80a0c36:	4798      	blx	r3
 80a0c38:	2800      	cmp	r0, #0
 80a0c3a:	dc06      	bgt.n	80a0c4a <serialEventRun+0x4e>
 80a0c3c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0c3e:	f3af 8000 	nop.w
 80a0c42:	e7e5      	b.n	80a0c10 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0c44:	f3af 8000 	nop.w
 80a0c48:	e7eb      	b.n	80a0c22 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0c4a:	f3af 8000 	nop.w
 80a0c4e:	bd08      	pop	{r3, pc}
	...

080a0c60 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0c60:	b508      	push	{r3, lr}
	serialEventRun();
 80a0c62:	f7ff ffcb 	bl	80a0bfc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0c66:	f7ff fad9 	bl	80a021c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0c6a:	4b01      	ldr	r3, [pc, #4]	; (80a0c70 <_post_loop+0x10>)
 80a0c6c:	6018      	str	r0, [r3, #0]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	20000404 	.word	0x20000404

080a0c74 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c74:	4802      	ldr	r0, [pc, #8]	; (80a0c80 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0c76:	4a03      	ldr	r2, [pc, #12]	; (80a0c84 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0c78:	4903      	ldr	r1, [pc, #12]	; (80a0c88 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0c7a:	1a12      	subs	r2, r2, r0
 80a0c7c:	f000 ba5e 	b.w	80a113c <memcpy>
 80a0c80:	40024000 	.word	0x40024000
 80a0c84:	40024004 	.word	0x40024004
 80a0c88:	080a14d0 	.word	0x080a14d0

080a0c8c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0c8c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c8e:	2300      	movs	r3, #0
 80a0c90:	9300      	str	r3, [sp, #0]
 80a0c92:	461a      	mov	r2, r3
 80a0c94:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c98:	f7ff fbd4 	bl	80a0444 <system_ctrl_set_result>
}
 80a0c9c:	b003      	add	sp, #12
 80a0c9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0ca4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0ca4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0ca6:	8843      	ldrh	r3, [r0, #2]
 80a0ca8:	2b0a      	cmp	r3, #10
 80a0caa:	d008      	beq.n	80a0cbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0cac:	2b50      	cmp	r3, #80	; 0x50
 80a0cae:	d109      	bne.n	80a0cc4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0cb0:	4b09      	ldr	r3, [pc, #36]	; (80a0cd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0cb2:	681b      	ldr	r3, [r3, #0]
 80a0cb4:	b13b      	cbz	r3, 80a0cc6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0cb6:	b003      	add	sp, #12
 80a0cb8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0cbc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0cbe:	f7ff ffe5 	bl	80a0c8c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0cc2:	e006      	b.n	80a0cd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0cc4:	2300      	movs	r3, #0
 80a0cc6:	9300      	str	r3, [sp, #0]
 80a0cc8:	461a      	mov	r2, r3
 80a0cca:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0cce:	f7ff fbb9 	bl	80a0444 <system_ctrl_set_result>
        break;
    }
}
 80a0cd2:	b003      	add	sp, #12
 80a0cd4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0cd8:	200003fc 	.word	0x200003fc

080a0cdc <module_user_init_hook>:

void module_user_init_hook()
{
 80a0cdc:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0cde:	4c10      	ldr	r4, [pc, #64]	; (80a0d20 <module_user_init_hook+0x44>)
 80a0ce0:	4d10      	ldr	r5, [pc, #64]	; (80a0d24 <module_user_init_hook+0x48>)
 80a0ce2:	6823      	ldr	r3, [r4, #0]
 80a0ce4:	42ab      	cmp	r3, r5
 80a0ce6:	4b10      	ldr	r3, [pc, #64]	; (80a0d28 <module_user_init_hook+0x4c>)
 80a0ce8:	bf0c      	ite	eq
 80a0cea:	2201      	moveq	r2, #1
 80a0cec:	2200      	movne	r2, #0
 80a0cee:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0cf0:	d002      	beq.n	80a0cf8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0cf2:	f7ff ffbf 	bl	80a0c74 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0cf6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0cf8:	f7ff fa80 	bl	80a01fc <HAL_RNG_GetRandomNumber>
 80a0cfc:	4604      	mov	r4, r0
    srand(seed);
 80a0cfe:	f000 fa31 	bl	80a1164 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0d02:	4b0a      	ldr	r3, [pc, #40]	; (80a0d2c <module_user_init_hook+0x50>)
 80a0d04:	b113      	cbz	r3, 80a0d0c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0d06:	4620      	mov	r0, r4
 80a0d08:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0d0c:	2100      	movs	r1, #0
 80a0d0e:	4807      	ldr	r0, [pc, #28]	; (80a0d2c <module_user_init_hook+0x50>)
 80a0d10:	f7ff fba2 	bl	80a0458 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0d18:	2100      	movs	r1, #0
 80a0d1a:	4805      	ldr	r0, [pc, #20]	; (80a0d30 <module_user_init_hook+0x54>)
 80a0d1c:	f7ff bb88 	b.w	80a0430 <system_ctrl_set_app_request_handler>
 80a0d20:	40024000 	.word	0x40024000
 80a0d24:	9a271c1e 	.word	0x9a271c1e
 80a0d28:	20000400 	.word	0x20000400
 80a0d2c:	00000000 	.word	0x00000000
 80a0d30:	080a0ca5 	.word	0x080a0ca5

080a0d34 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0d34:	b510      	push	{r4, lr}
 80a0d36:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0d38:	480f      	ldr	r0, [pc, #60]	; (80a0d78 <pinAvailable+0x44>)
 80a0d3a:	f7ff fdbd 	bl	80a08b8 <_ZN8SPIClass9isEnabledEv>
 80a0d3e:	b128      	cbz	r0, 80a0d4c <pinAvailable+0x18>
 80a0d40:	f1a4 030d 	sub.w	r3, r4, #13
 80a0d44:	2b02      	cmp	r3, #2
 80a0d46:	d801      	bhi.n	80a0d4c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0d48:	2000      	movs	r0, #0
 80a0d4a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0d4c:	f000 f840 	bl	80a0dd0 <_Z19__fetch_global_Wirev>
 80a0d50:	f7ff fc34 	bl	80a05bc <_ZN7TwoWire9isEnabledEv>
 80a0d54:	b108      	cbz	r0, 80a0d5a <pinAvailable+0x26>
 80a0d56:	2c01      	cmp	r4, #1
 80a0d58:	d9f6      	bls.n	80a0d48 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0d5a:	f7ff fe11 	bl	80a0980 <_Z22__fetch_global_Serial1v>
 80a0d5e:	f7ff fe0c 	bl	80a097a <_ZN11USARTSerial9isEnabledEv>
 80a0d62:	b118      	cbz	r0, 80a0d6c <pinAvailable+0x38>
 80a0d64:	f1a4 0312 	sub.w	r3, r4, #18
 80a0d68:	2b01      	cmp	r3, #1
 80a0d6a:	d9ed      	bls.n	80a0d48 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0d6c:	2c17      	cmp	r4, #23
 80a0d6e:	bf8c      	ite	hi
 80a0d70:	2000      	movhi	r0, #0
 80a0d72:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0d74:	bd10      	pop	{r4, pc}
 80a0d76:	bf00      	nop
 80a0d78:	20000438 	.word	0x20000438

080a0d7c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0d7c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0d7e:	b538      	push	{r3, r4, r5, lr}
 80a0d80:	4604      	mov	r4, r0
 80a0d82:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0d84:	d80a      	bhi.n	80a0d9c <pinMode+0x20>
 80a0d86:	29ff      	cmp	r1, #255	; 0xff
 80a0d88:	d008      	beq.n	80a0d9c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0d8a:	f7ff ffd3 	bl	80a0d34 <pinAvailable>
 80a0d8e:	b128      	cbz	r0, 80a0d9c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0d90:	4629      	mov	r1, r5
 80a0d92:	4620      	mov	r0, r4
}
 80a0d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0d98:	f7ff ba50 	b.w	80a023c <HAL_Pin_Mode>
 80a0d9c:	bd38      	pop	{r3, r4, r5, pc}

080a0d9e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0d9e:	b538      	push	{r3, r4, r5, lr}
 80a0da0:	4604      	mov	r4, r0
 80a0da2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0da4:	f7ff fa52 	bl	80a024c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0da8:	28ff      	cmp	r0, #255	; 0xff
 80a0daa:	d010      	beq.n	80a0dce <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0dac:	2806      	cmp	r0, #6
 80a0dae:	d804      	bhi.n	80a0dba <digitalWrite+0x1c>
 80a0db0:	234d      	movs	r3, #77	; 0x4d
 80a0db2:	fa23 f000 	lsr.w	r0, r3, r0
 80a0db6:	07c3      	lsls	r3, r0, #31
 80a0db8:	d409      	bmi.n	80a0dce <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0dba:	4620      	mov	r0, r4
 80a0dbc:	f7ff ffba 	bl	80a0d34 <pinAvailable>
 80a0dc0:	b128      	cbz	r0, 80a0dce <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0dc2:	4629      	mov	r1, r5
 80a0dc4:	4620      	mov	r0, r4
}
 80a0dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0dca:	f7ff ba47 	b.w	80a025c <HAL_GPIO_Write>
 80a0dce:	bd38      	pop	{r3, r4, r5, pc}

080a0dd0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0dd0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0dd2:	4d0b      	ldr	r5, [pc, #44]	; (80a0e00 <_Z19__fetch_global_Wirev+0x30>)
 80a0dd4:	6829      	ldr	r1, [r5, #0]
 80a0dd6:	f011 0401 	ands.w	r4, r1, #1
 80a0dda:	d10f      	bne.n	80a0dfc <_Z19__fetch_global_Wirev+0x2c>
 80a0ddc:	4628      	mov	r0, r5
 80a0dde:	f7ff f960 	bl	80a00a2 <__cxa_guard_acquire>
 80a0de2:	b158      	cbz	r0, 80a0dfc <_Z19__fetch_global_Wirev+0x2c>
 80a0de4:	4621      	mov	r1, r4
 80a0de6:	4807      	ldr	r0, [pc, #28]	; (80a0e04 <_Z19__fetch_global_Wirev+0x34>)
 80a0de8:	f7ff fbd6 	bl	80a0598 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a0dec:	4628      	mov	r0, r5
 80a0dee:	f7ff f95d 	bl	80a00ac <__cxa_guard_release>
 80a0df2:	4a05      	ldr	r2, [pc, #20]	; (80a0e08 <_Z19__fetch_global_Wirev+0x38>)
 80a0df4:	4905      	ldr	r1, [pc, #20]	; (80a0e0c <_Z19__fetch_global_Wirev+0x3c>)
 80a0df6:	4803      	ldr	r0, [pc, #12]	; (80a0e04 <_Z19__fetch_global_Wirev+0x34>)
 80a0df8:	f000 f844 	bl	80a0e84 <__aeabi_atexit>
	return wire;
}
 80a0dfc:	4801      	ldr	r0, [pc, #4]	; (80a0e04 <_Z19__fetch_global_Wirev+0x34>)
 80a0dfe:	bd38      	pop	{r3, r4, r5, pc}
 80a0e00:	20000408 	.word	0x20000408
 80a0e04:	2000040c 	.word	0x2000040c
 80a0e08:	20000368 	.word	0x20000368
 80a0e0c:	080a0541 	.word	0x080a0541

080a0e10 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0e10:	b513      	push	{r0, r1, r4, lr}
 80a0e12:	4c08      	ldr	r4, [pc, #32]	; (80a0e34 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0e14:	2300      	movs	r3, #0
 80a0e16:	461a      	mov	r2, r3
 80a0e18:	4619      	mov	r1, r3
 80a0e1a:	9300      	str	r3, [sp, #0]
 80a0e1c:	4620      	mov	r0, r4
 80a0e1e:	f7ff fc27 	bl	80a0670 <_ZN9IPAddressC1Ehhhh>
 80a0e22:	4620      	mov	r0, r4
 80a0e24:	4a04      	ldr	r2, [pc, #16]	; (80a0e38 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0e26:	4905      	ldr	r1, [pc, #20]	; (80a0e3c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0e28:	b002      	add	sp, #8
 80a0e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0e2e:	f000 b829 	b.w	80a0e84 <__aeabi_atexit>
 80a0e32:	bf00      	nop
 80a0e34:	20000420 	.word	0x20000420
 80a0e38:	20000368 	.word	0x20000368
 80a0e3c:	080a05c5 	.word	0x080a05c5

080a0e40 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0e40:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0e42:	4c0c      	ldr	r4, [pc, #48]	; (80a0e74 <_GLOBAL__sub_I_SPI+0x34>)
 80a0e44:	4e0c      	ldr	r6, [pc, #48]	; (80a0e78 <_GLOBAL__sub_I_SPI+0x38>)
 80a0e46:	4d0d      	ldr	r5, [pc, #52]	; (80a0e7c <_GLOBAL__sub_I_SPI+0x3c>)
 80a0e48:	2100      	movs	r1, #0
 80a0e4a:	4620      	mov	r0, r4
 80a0e4c:	f7ff fd20 	bl	80a0890 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0e50:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0e52:	4c0b      	ldr	r4, [pc, #44]	; (80a0e80 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0e54:	4632      	mov	r2, r6
 80a0e56:	4629      	mov	r1, r5
 80a0e58:	f000 f814 	bl	80a0e84 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0e5c:	2101      	movs	r1, #1
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	f7ff fd16 	bl	80a0890 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0e64:	4632      	mov	r2, r6
 80a0e66:	4629      	mov	r1, r5
 80a0e68:	4620      	mov	r0, r4
 80a0e6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0e6e:	f000 b809 	b.w	80a0e84 <__aeabi_atexit>
 80a0e72:	bf00      	nop
 80a0e74:	20000438 	.word	0x20000438
 80a0e78:	20000368 	.word	0x20000368
 80a0e7c:	080a0881 	.word	0x080a0881
 80a0e80:	20000448 	.word	0x20000448

080a0e84 <__aeabi_atexit>:
 80a0e84:	460b      	mov	r3, r1
 80a0e86:	4601      	mov	r1, r0
 80a0e88:	4618      	mov	r0, r3
 80a0e8a:	f000 b949 	b.w	80a1120 <__cxa_atexit>
	...

080a0e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0e90:	4b24      	ldr	r3, [pc, #144]	; (80a0f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0e92:	681a      	ldr	r2, [r3, #0]
 80a0e94:	07d0      	lsls	r0, r2, #31
 80a0e96:	bf5c      	itt	pl
 80a0e98:	2201      	movpl	r2, #1
 80a0e9a:	601a      	strpl	r2, [r3, #0]
 80a0e9c:	4b22      	ldr	r3, [pc, #136]	; (80a0f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0e9e:	681a      	ldr	r2, [r3, #0]
 80a0ea0:	07d1      	lsls	r1, r2, #31
 80a0ea2:	bf5c      	itt	pl
 80a0ea4:	2201      	movpl	r2, #1
 80a0ea6:	601a      	strpl	r2, [r3, #0]
 80a0ea8:	4b20      	ldr	r3, [pc, #128]	; (80a0f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0eaa:	681a      	ldr	r2, [r3, #0]
 80a0eac:	07d2      	lsls	r2, r2, #31
 80a0eae:	bf5c      	itt	pl
 80a0eb0:	2201      	movpl	r2, #1
 80a0eb2:	601a      	strpl	r2, [r3, #0]
 80a0eb4:	4b1e      	ldr	r3, [pc, #120]	; (80a0f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0eb6:	681a      	ldr	r2, [r3, #0]
 80a0eb8:	07d0      	lsls	r0, r2, #31
 80a0eba:	bf5c      	itt	pl
 80a0ebc:	2201      	movpl	r2, #1
 80a0ebe:	601a      	strpl	r2, [r3, #0]
 80a0ec0:	4b1c      	ldr	r3, [pc, #112]	; (80a0f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0ec2:	681a      	ldr	r2, [r3, #0]
 80a0ec4:	07d1      	lsls	r1, r2, #31
 80a0ec6:	bf5c      	itt	pl
 80a0ec8:	2201      	movpl	r2, #1
 80a0eca:	601a      	strpl	r2, [r3, #0]
 80a0ecc:	4b1a      	ldr	r3, [pc, #104]	; (80a0f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0ece:	681a      	ldr	r2, [r3, #0]
 80a0ed0:	07d2      	lsls	r2, r2, #31
 80a0ed2:	bf5c      	itt	pl
 80a0ed4:	2201      	movpl	r2, #1
 80a0ed6:	601a      	strpl	r2, [r3, #0]
 80a0ed8:	4b18      	ldr	r3, [pc, #96]	; (80a0f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0eda:	681a      	ldr	r2, [r3, #0]
 80a0edc:	07d0      	lsls	r0, r2, #31
 80a0ede:	bf5c      	itt	pl
 80a0ee0:	2201      	movpl	r2, #1
 80a0ee2:	601a      	strpl	r2, [r3, #0]
 80a0ee4:	4b16      	ldr	r3, [pc, #88]	; (80a0f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0ee6:	681a      	ldr	r2, [r3, #0]
 80a0ee8:	07d1      	lsls	r1, r2, #31
 80a0eea:	bf5c      	itt	pl
 80a0eec:	2201      	movpl	r2, #1
 80a0eee:	601a      	strpl	r2, [r3, #0]
 80a0ef0:	4b14      	ldr	r3, [pc, #80]	; (80a0f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0ef2:	681a      	ldr	r2, [r3, #0]
 80a0ef4:	07d2      	lsls	r2, r2, #31
 80a0ef6:	bf5c      	itt	pl
 80a0ef8:	2201      	movpl	r2, #1
 80a0efa:	601a      	strpl	r2, [r3, #0]
 80a0efc:	4b12      	ldr	r3, [pc, #72]	; (80a0f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0efe:	681a      	ldr	r2, [r3, #0]
 80a0f00:	07d0      	lsls	r0, r2, #31
 80a0f02:	bf5c      	itt	pl
 80a0f04:	2201      	movpl	r2, #1
 80a0f06:	601a      	strpl	r2, [r3, #0]
 80a0f08:	4b10      	ldr	r3, [pc, #64]	; (80a0f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0f0a:	681a      	ldr	r2, [r3, #0]
 80a0f0c:	07d1      	lsls	r1, r2, #31
 80a0f0e:	bf5c      	itt	pl
 80a0f10:	2201      	movpl	r2, #1
 80a0f12:	601a      	strpl	r2, [r3, #0]
 80a0f14:	4b0e      	ldr	r3, [pc, #56]	; (80a0f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0f16:	681a      	ldr	r2, [r3, #0]
 80a0f18:	07d2      	lsls	r2, r2, #31
 80a0f1a:	bf5c      	itt	pl
 80a0f1c:	2201      	movpl	r2, #1
 80a0f1e:	601a      	strpl	r2, [r3, #0]
 80a0f20:	4770      	bx	lr
 80a0f22:	bf00      	nop
 80a0f24:	20000484 	.word	0x20000484
 80a0f28:	20000480 	.word	0x20000480
 80a0f2c:	2000047c 	.word	0x2000047c
 80a0f30:	20000478 	.word	0x20000478
 80a0f34:	20000474 	.word	0x20000474
 80a0f38:	20000470 	.word	0x20000470
 80a0f3c:	2000046c 	.word	0x2000046c
 80a0f40:	20000468 	.word	0x20000468
 80a0f44:	20000464 	.word	0x20000464
 80a0f48:	20000460 	.word	0x20000460
 80a0f4c:	2000045c 	.word	0x2000045c
 80a0f50:	20000458 	.word	0x20000458

080a0f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0f54:	4b18      	ldr	r3, [pc, #96]	; (80a0fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0f56:	681a      	ldr	r2, [r3, #0]
 80a0f58:	07d1      	lsls	r1, r2, #31
 80a0f5a:	bf5c      	itt	pl
 80a0f5c:	2201      	movpl	r2, #1
 80a0f5e:	601a      	strpl	r2, [r3, #0]
 80a0f60:	4b16      	ldr	r3, [pc, #88]	; (80a0fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0f62:	681a      	ldr	r2, [r3, #0]
 80a0f64:	07d2      	lsls	r2, r2, #31
 80a0f66:	bf5c      	itt	pl
 80a0f68:	2201      	movpl	r2, #1
 80a0f6a:	601a      	strpl	r2, [r3, #0]
 80a0f6c:	4b14      	ldr	r3, [pc, #80]	; (80a0fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0f6e:	681a      	ldr	r2, [r3, #0]
 80a0f70:	07d0      	lsls	r0, r2, #31
 80a0f72:	bf5c      	itt	pl
 80a0f74:	2201      	movpl	r2, #1
 80a0f76:	601a      	strpl	r2, [r3, #0]
 80a0f78:	4b12      	ldr	r3, [pc, #72]	; (80a0fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0f7a:	681a      	ldr	r2, [r3, #0]
 80a0f7c:	07d1      	lsls	r1, r2, #31
 80a0f7e:	bf5c      	itt	pl
 80a0f80:	2201      	movpl	r2, #1
 80a0f82:	601a      	strpl	r2, [r3, #0]
 80a0f84:	4b10      	ldr	r3, [pc, #64]	; (80a0fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0f86:	681a      	ldr	r2, [r3, #0]
 80a0f88:	07d2      	lsls	r2, r2, #31
 80a0f8a:	bf5c      	itt	pl
 80a0f8c:	2201      	movpl	r2, #1
 80a0f8e:	601a      	strpl	r2, [r3, #0]
 80a0f90:	4b0e      	ldr	r3, [pc, #56]	; (80a0fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0f92:	681a      	ldr	r2, [r3, #0]
 80a0f94:	07d0      	lsls	r0, r2, #31
 80a0f96:	bf5c      	itt	pl
 80a0f98:	2201      	movpl	r2, #1
 80a0f9a:	601a      	strpl	r2, [r3, #0]
 80a0f9c:	4b0c      	ldr	r3, [pc, #48]	; (80a0fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0f9e:	681a      	ldr	r2, [r3, #0]
 80a0fa0:	07d1      	lsls	r1, r2, #31
 80a0fa2:	bf5c      	itt	pl
 80a0fa4:	2201      	movpl	r2, #1
 80a0fa6:	601a      	strpl	r2, [r3, #0]
 80a0fa8:	4b0a      	ldr	r3, [pc, #40]	; (80a0fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0faa:	681a      	ldr	r2, [r3, #0]
 80a0fac:	07d2      	lsls	r2, r2, #31
 80a0fae:	bf5c      	itt	pl
 80a0fb0:	2201      	movpl	r2, #1
 80a0fb2:	601a      	strpl	r2, [r3, #0]
 80a0fb4:	4770      	bx	lr
 80a0fb6:	bf00      	nop
 80a0fb8:	200004a4 	.word	0x200004a4
 80a0fbc:	200004a0 	.word	0x200004a0
 80a0fc0:	2000049c 	.word	0x2000049c
 80a0fc4:	20000498 	.word	0x20000498
 80a0fc8:	20000494 	.word	0x20000494
 80a0fcc:	20000490 	.word	0x20000490
 80a0fd0:	2000048c 	.word	0x2000048c
 80a0fd4:	20000488 	.word	0x20000488

080a0fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0fd8:	4b18      	ldr	r3, [pc, #96]	; (80a103c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0fda:	681a      	ldr	r2, [r3, #0]
 80a0fdc:	07d1      	lsls	r1, r2, #31
 80a0fde:	bf5c      	itt	pl
 80a0fe0:	2201      	movpl	r2, #1
 80a0fe2:	601a      	strpl	r2, [r3, #0]
 80a0fe4:	4b16      	ldr	r3, [pc, #88]	; (80a1040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0fe6:	681a      	ldr	r2, [r3, #0]
 80a0fe8:	07d2      	lsls	r2, r2, #31
 80a0fea:	bf5c      	itt	pl
 80a0fec:	2201      	movpl	r2, #1
 80a0fee:	601a      	strpl	r2, [r3, #0]
 80a0ff0:	4b14      	ldr	r3, [pc, #80]	; (80a1044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0ff2:	681a      	ldr	r2, [r3, #0]
 80a0ff4:	07d0      	lsls	r0, r2, #31
 80a0ff6:	bf5c      	itt	pl
 80a0ff8:	2201      	movpl	r2, #1
 80a0ffa:	601a      	strpl	r2, [r3, #0]
 80a0ffc:	4b12      	ldr	r3, [pc, #72]	; (80a1048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0ffe:	681a      	ldr	r2, [r3, #0]
 80a1000:	07d1      	lsls	r1, r2, #31
 80a1002:	bf5c      	itt	pl
 80a1004:	2201      	movpl	r2, #1
 80a1006:	601a      	strpl	r2, [r3, #0]
 80a1008:	4b10      	ldr	r3, [pc, #64]	; (80a104c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a100a:	681a      	ldr	r2, [r3, #0]
 80a100c:	07d2      	lsls	r2, r2, #31
 80a100e:	bf5c      	itt	pl
 80a1010:	2201      	movpl	r2, #1
 80a1012:	601a      	strpl	r2, [r3, #0]
 80a1014:	4b0e      	ldr	r3, [pc, #56]	; (80a1050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1016:	681a      	ldr	r2, [r3, #0]
 80a1018:	07d0      	lsls	r0, r2, #31
 80a101a:	bf5c      	itt	pl
 80a101c:	2201      	movpl	r2, #1
 80a101e:	601a      	strpl	r2, [r3, #0]
 80a1020:	4b0c      	ldr	r3, [pc, #48]	; (80a1054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1022:	681a      	ldr	r2, [r3, #0]
 80a1024:	07d1      	lsls	r1, r2, #31
 80a1026:	bf5c      	itt	pl
 80a1028:	2201      	movpl	r2, #1
 80a102a:	601a      	strpl	r2, [r3, #0]
 80a102c:	4b0a      	ldr	r3, [pc, #40]	; (80a1058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a102e:	681a      	ldr	r2, [r3, #0]
 80a1030:	07d2      	lsls	r2, r2, #31
 80a1032:	bf5c      	itt	pl
 80a1034:	2201      	movpl	r2, #1
 80a1036:	601a      	strpl	r2, [r3, #0]
 80a1038:	4770      	bx	lr
 80a103a:	bf00      	nop
 80a103c:	200004c4 	.word	0x200004c4
 80a1040:	200004c0 	.word	0x200004c0
 80a1044:	200004bc 	.word	0x200004bc
 80a1048:	200004b8 	.word	0x200004b8
 80a104c:	200004b4 	.word	0x200004b4
 80a1050:	200004b0 	.word	0x200004b0
 80a1054:	200004ac 	.word	0x200004ac
 80a1058:	200004a8 	.word	0x200004a8

080a105c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a105c:	4b24      	ldr	r3, [pc, #144]	; (80a10f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a105e:	681a      	ldr	r2, [r3, #0]
 80a1060:	07d0      	lsls	r0, r2, #31
 80a1062:	bf5c      	itt	pl
 80a1064:	2201      	movpl	r2, #1
 80a1066:	601a      	strpl	r2, [r3, #0]
 80a1068:	4b22      	ldr	r3, [pc, #136]	; (80a10f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a106a:	681a      	ldr	r2, [r3, #0]
 80a106c:	07d1      	lsls	r1, r2, #31
 80a106e:	bf5c      	itt	pl
 80a1070:	2201      	movpl	r2, #1
 80a1072:	601a      	strpl	r2, [r3, #0]
 80a1074:	4b20      	ldr	r3, [pc, #128]	; (80a10f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1076:	681a      	ldr	r2, [r3, #0]
 80a1078:	07d2      	lsls	r2, r2, #31
 80a107a:	bf5c      	itt	pl
 80a107c:	2201      	movpl	r2, #1
 80a107e:	601a      	strpl	r2, [r3, #0]
 80a1080:	4b1e      	ldr	r3, [pc, #120]	; (80a10fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1082:	681a      	ldr	r2, [r3, #0]
 80a1084:	07d0      	lsls	r0, r2, #31
 80a1086:	bf5c      	itt	pl
 80a1088:	2201      	movpl	r2, #1
 80a108a:	601a      	strpl	r2, [r3, #0]
 80a108c:	4b1c      	ldr	r3, [pc, #112]	; (80a1100 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a108e:	681a      	ldr	r2, [r3, #0]
 80a1090:	07d1      	lsls	r1, r2, #31
 80a1092:	bf5c      	itt	pl
 80a1094:	2201      	movpl	r2, #1
 80a1096:	601a      	strpl	r2, [r3, #0]
 80a1098:	4b1a      	ldr	r3, [pc, #104]	; (80a1104 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a109a:	681a      	ldr	r2, [r3, #0]
 80a109c:	07d2      	lsls	r2, r2, #31
 80a109e:	bf5c      	itt	pl
 80a10a0:	2201      	movpl	r2, #1
 80a10a2:	601a      	strpl	r2, [r3, #0]
 80a10a4:	4b18      	ldr	r3, [pc, #96]	; (80a1108 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a10a6:	681a      	ldr	r2, [r3, #0]
 80a10a8:	07d0      	lsls	r0, r2, #31
 80a10aa:	bf5c      	itt	pl
 80a10ac:	2201      	movpl	r2, #1
 80a10ae:	601a      	strpl	r2, [r3, #0]
 80a10b0:	4b16      	ldr	r3, [pc, #88]	; (80a110c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a10b2:	681a      	ldr	r2, [r3, #0]
 80a10b4:	07d1      	lsls	r1, r2, #31
 80a10b6:	bf5c      	itt	pl
 80a10b8:	2201      	movpl	r2, #1
 80a10ba:	601a      	strpl	r2, [r3, #0]
 80a10bc:	4b14      	ldr	r3, [pc, #80]	; (80a1110 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a10be:	681a      	ldr	r2, [r3, #0]
 80a10c0:	07d2      	lsls	r2, r2, #31
 80a10c2:	bf5c      	itt	pl
 80a10c4:	2201      	movpl	r2, #1
 80a10c6:	601a      	strpl	r2, [r3, #0]
 80a10c8:	4b12      	ldr	r3, [pc, #72]	; (80a1114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a10ca:	681a      	ldr	r2, [r3, #0]
 80a10cc:	07d0      	lsls	r0, r2, #31
 80a10ce:	bf5c      	itt	pl
 80a10d0:	2201      	movpl	r2, #1
 80a10d2:	601a      	strpl	r2, [r3, #0]
 80a10d4:	4b10      	ldr	r3, [pc, #64]	; (80a1118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a10d6:	681a      	ldr	r2, [r3, #0]
 80a10d8:	07d1      	lsls	r1, r2, #31
 80a10da:	bf5c      	itt	pl
 80a10dc:	2201      	movpl	r2, #1
 80a10de:	601a      	strpl	r2, [r3, #0]
 80a10e0:	4b0e      	ldr	r3, [pc, #56]	; (80a111c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a10e2:	681a      	ldr	r2, [r3, #0]
 80a10e4:	07d2      	lsls	r2, r2, #31
 80a10e6:	bf5c      	itt	pl
 80a10e8:	2201      	movpl	r2, #1
 80a10ea:	601a      	strpl	r2, [r3, #0]
 80a10ec:	4770      	bx	lr
 80a10ee:	bf00      	nop
 80a10f0:	200004f4 	.word	0x200004f4
 80a10f4:	200004f0 	.word	0x200004f0
 80a10f8:	200004ec 	.word	0x200004ec
 80a10fc:	200004e8 	.word	0x200004e8
 80a1100:	200004e4 	.word	0x200004e4
 80a1104:	200004e0 	.word	0x200004e0
 80a1108:	200004dc 	.word	0x200004dc
 80a110c:	200004d8 	.word	0x200004d8
 80a1110:	200004d4 	.word	0x200004d4
 80a1114:	200004d0 	.word	0x200004d0
 80a1118:	200004cc 	.word	0x200004cc
 80a111c:	200004c8 	.word	0x200004c8

080a1120 <__cxa_atexit>:
 80a1120:	b510      	push	{r4, lr}
 80a1122:	4c05      	ldr	r4, [pc, #20]	; (80a1138 <__cxa_atexit+0x18>)
 80a1124:	4613      	mov	r3, r2
 80a1126:	b12c      	cbz	r4, 80a1134 <__cxa_atexit+0x14>
 80a1128:	460a      	mov	r2, r1
 80a112a:	4601      	mov	r1, r0
 80a112c:	2002      	movs	r0, #2
 80a112e:	f3af 8000 	nop.w
 80a1132:	bd10      	pop	{r4, pc}
 80a1134:	4620      	mov	r0, r4
 80a1136:	bd10      	pop	{r4, pc}
 80a1138:	00000000 	.word	0x00000000

080a113c <memcpy>:
 80a113c:	b510      	push	{r4, lr}
 80a113e:	1e43      	subs	r3, r0, #1
 80a1140:	440a      	add	r2, r1
 80a1142:	4291      	cmp	r1, r2
 80a1144:	d004      	beq.n	80a1150 <memcpy+0x14>
 80a1146:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a114a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a114e:	e7f8      	b.n	80a1142 <memcpy+0x6>
 80a1150:	bd10      	pop	{r4, pc}

080a1152 <memset>:
 80a1152:	4603      	mov	r3, r0
 80a1154:	4402      	add	r2, r0
 80a1156:	4293      	cmp	r3, r2
 80a1158:	d002      	beq.n	80a1160 <memset+0xe>
 80a115a:	f803 1b01 	strb.w	r1, [r3], #1
 80a115e:	e7fa      	b.n	80a1156 <memset+0x4>
 80a1160:	4770      	bx	lr
	...

080a1164 <srand>:
 80a1164:	b538      	push	{r3, r4, r5, lr}
 80a1166:	4b12      	ldr	r3, [pc, #72]	; (80a11b0 <srand+0x4c>)
 80a1168:	4605      	mov	r5, r0
 80a116a:	681c      	ldr	r4, [r3, #0]
 80a116c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a116e:	b9d3      	cbnz	r3, 80a11a6 <srand+0x42>
 80a1170:	2018      	movs	r0, #24
 80a1172:	f7ff f9c9 	bl	80a0508 <malloc>
 80a1176:	f243 330e 	movw	r3, #13070	; 0x330e
 80a117a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a117c:	8003      	strh	r3, [r0, #0]
 80a117e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1182:	8043      	strh	r3, [r0, #2]
 80a1184:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1188:	8083      	strh	r3, [r0, #4]
 80a118a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a118e:	80c3      	strh	r3, [r0, #6]
 80a1190:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1194:	8103      	strh	r3, [r0, #8]
 80a1196:	2305      	movs	r3, #5
 80a1198:	8143      	strh	r3, [r0, #10]
 80a119a:	230b      	movs	r3, #11
 80a119c:	8183      	strh	r3, [r0, #12]
 80a119e:	2201      	movs	r2, #1
 80a11a0:	2300      	movs	r3, #0
 80a11a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a11a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a11a8:	2200      	movs	r2, #0
 80a11aa:	611d      	str	r5, [r3, #16]
 80a11ac:	615a      	str	r2, [r3, #20]
 80a11ae:	bd38      	pop	{r3, r4, r5, pc}
 80a11b0:	20000364 	.word	0x20000364

080a11b4 <strlen>:
 80a11b4:	4603      	mov	r3, r0
 80a11b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a11ba:	2a00      	cmp	r2, #0
 80a11bc:	d1fb      	bne.n	80a11b6 <strlen+0x2>
 80a11be:	1a18      	subs	r0, r3, r0
 80a11c0:	3801      	subs	r0, #1
 80a11c2:	4770      	bx	lr

080a11c4 <dynalib_user>:
 80a11c4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a11d4:	0000 0000 6548 6c6c 206f 6172 6576 546e     ....Hello ravenT
 80a11e4:	2154 5300 6e6f 7261 6320 6e6f 656e 7463     T!.Sonar connect
 80a11f4:	6465 5300 6174 7472 203a 4500 646e 203a     ed.Start: .End: 
 80a1204:	4500 616c 7370 6465 203a 0000               .Elapsed: ..

080a1210 <_ZTV7TwoWire>:
	...
 80a1218:	0541 080a 058b 080a 0563 080a 0543 080a     A.......c...C...
 80a1228:	056b 080a 0573 080a 057b 080a 0583 080a     k...s...{.......

080a1238 <_ZTV9IPAddress>:
	...
 80a1240:	05d3 080a 05c5 080a 05c7 080a 0066 6e6c     ............f.ln
 80a1250:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80a1260:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 80a1270:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 80a1280:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a1290:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 80a12a0:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 80a12b0:	6d61 6300 646d 6900 0064 6e68 0064 7473     am.cmd.id.hnd.st
 80a12c0:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80a12d0:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80a12e0:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80a12f0:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80a1300:	6e61 6c64 7265 6100 7070 6e00 6e6f 0065     andler.app.none.
 80a1310:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a1320:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a1330 <_ZTVN5spark12NetworkClassE>:
	...
 80a1338:	0699 080a 06a3 080a 06ad 080a 06b7 080a     ................
 80a1348:	06c1 080a 06cd 080a 06d9 080a 06e5 080a     ................
 80a1358:	06ed 080a 06f7 080a 0701 080a               ............

080a1364 <_ZTV8SPIClass>:
	...
 80a136c:	0881 080a 0883 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a137c:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a138c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a139c:	0000 0000                                   ....

080a13a0 <_ZTV11USARTSerial>:
	...
 80a13a8:	08ed 080a 0911 080a 091d 080a 0765 080a     ............e...
 80a13b8:	08f9 080a 0905 080a 08ff 080a 090b 080a     ................
 80a13c8:	08ef 080a 08f3 080a                         ........

080a13d0 <_ZTV9USBSerial>:
	...
 80a13d8:	0a05 080a 0a49 080a 0a23 080a 0765 080a     ....I...#...e...
 80a13e8:	0a1d 080a 0a07 080a 0a0f 080a 0a43 080a     ............C...
 80a13f8:	0a17 080a 0a01 080a                         ........

080a1400 <_ZTVN5spark9WiFiClassE>:
	...
 80a1408:	0bdf 080a 0bd5 080a 0bcb 080a 0b3d 080a     ............=...
 80a1418:	0bbf 080a 0bb3 080a 0ba7 080a 0b9f 080a     ................
 80a1428:	0b95 080a 0b8b 080a 0b47 080a               ........G...

080a1434 <__sf_fake_stdin>:
	...

080a1454 <__sf_fake_stdout>:
	...

080a1474 <__sf_fake_stderr>:
	...
 80a1494:	0043                                        C.

080a1496 <link_const_variable_data_end>:
	...

080a1498 <link_constructors_location>:
 80a1498:	080a01d9 	.word	0x080a01d9
 80a149c:	080a0689 	.word	0x080a0689
 80a14a0:	080a0751 	.word	0x080a0751
 80a14a4:	080a0865 	.word	0x080a0865
 80a14a8:	080a08c1 	.word	0x080a08c1
 80a14ac:	080a08d9 	.word	0x080a08d9
 80a14b0:	080a0be9 	.word	0x080a0be9
 80a14b4:	080a0e11 	.word	0x080a0e11
 80a14b8:	080a0e41 	.word	0x080a0e41
 80a14bc:	080a0e91 	.word	0x080a0e91
 80a14c0:	080a0f55 	.word	0x080a0f55
 80a14c4:	080a0fd9 	.word	0x080a0fd9
 80a14c8:	080a105d 	.word	0x080a105d

080a14cc <link_constructors_end>:
 80a14cc:	00000000 	.word	0x00000000
