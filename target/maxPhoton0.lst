
/Users/raventt/MBP_Projects/arduino/maxPhoton0/target/maxPhoton0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014f8  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1510  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a1514  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000058c  2000036c  2000036c  0003036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a1580  080a1580  00021580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a15a8  080a15a8  000215a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0008adf1  00000000  00000000  000215ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000cde9  00000000  00000000  000ac39d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000ee9f  00000000  00000000  000b9186  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000019e8  00000000  00000000  000c8025  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002ae8  00000000  00000000  000c9a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000223fc  00000000  00000000  000cc4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001cb7c  00000000  00000000  000ee8f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a106d  00000000  00000000  0010b46d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a7a0  00000000  00000000  001ac4dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	50 11 0a 08                                         P...

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f000 ffbb 	bl	80a0fa8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f000 ffc0 	bl	80a0fbe <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1514 	.word	0x080a1514
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	200008f8 	.word	0x200008f8
 80a0058:	200008f8 	.word	0x200008f8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fd6f 	bl	80a0b40 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a14dc 	.word	0x080a14dc
 80a0084:	080a150c 	.word	0x080a150c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b812 	b.w	80a00b0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f837 	bl	80a0100 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bd15 	b.w	80a0ac4 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 ba05 	b.w	80a04a8 <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr
	...

080a00b0 <setup>:
int maxOn = D0; // Photon output pin to toggle pin 4 on Maxbotix

char buf[5]; // Create buffer to handle RxxxCR

void setup()
{
 80a00b0:	b510      	push	{r4, lr}
  pinMode(maxOn, OUTPUT);
 80a00b2:	4c10      	ldr	r4, [pc, #64]	; (80a00f4 <setup+0x44>)
 80a00b4:	2101      	movs	r1, #1
 80a00b6:	8820      	ldrh	r0, [r4, #0]
 80a00b8:	f000 fd92 	bl	80a0be0 <pinMode>
  Serial.begin(9600);
 80a00bc:	f000 fc58 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a00c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00c4:	f000 fc3a 	bl	80a093c <_ZN9USBSerial5beginEl>
  Serial.println("Hello ravenTT!");
 80a00c8:	f000 fc52 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a00cc:	490a      	ldr	r1, [pc, #40]	; (80a00f8 <setup+0x48>)
 80a00ce:	f000 fabc 	bl	80a064a <_ZN5Print7printlnEPKc>
  Serial1.begin(9600);
 80a00d2:	f000 fbcf 	bl	80a0874 <_Z22__fetch_global_Serial1v>
 80a00d6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00da:	f000 fbc5 	bl	80a0868 <_ZN11USARTSerial5beginEm>
  Serial.println("Sonar connected");
 80a00de:	f000 fc47 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a00e2:	4906      	ldr	r1, [pc, #24]	; (80a00fc <setup+0x4c>)
 80a00e4:	f000 fab1 	bl	80a064a <_ZN5Print7printlnEPKc>
  digitalWrite(maxOn, LOW); // Stop continuous reading mode on sensor
 80a00e8:	8820      	ldrh	r0, [r4, #0]
 80a00ea:	2100      	movs	r1, #0
}
 80a00ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinMode(maxOn, OUTPUT);
  Serial.begin(9600);
  Serial.println("Hello ravenTT!");
  Serial1.begin(9600);
  Serial.println("Sonar connected");
  digitalWrite(maxOn, LOW); // Stop continuous reading mode on sensor
 80a00f0:	f000 bd87 	b.w	80a0c02 <digitalWrite>
 80a00f4:	20000370 	.word	0x20000370
 80a00f8:	080a1164 	.word	0x080a1164
 80a00fc:	080a1173 	.word	0x080a1173

080a0100 <loop>:
}

void loop()
{
 80a0100:	b570      	push	{r4, r5, r6, lr}

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0102:	f000 f89b 	bl	80a023c <HAL_Timer_Get_Micro_Seconds>
 80a0106:	4605      	mov	r5, r0
  unsigned long start = micros();
   Serial1.flush();
 80a0108:	f000 fbb4 	bl	80a0874 <_Z22__fetch_global_Serial1v>
 80a010c:	6803      	ldr	r3, [r0, #0]
  Serial1.read();            // Ready to read
  digitalWrite(maxOn, HIGH); // Bring HIGH to trigger range reading
 80a010e:	4c37      	ldr	r4, [pc, #220]	; (80a01ec <loop+0xec>)
}

void loop()
{
  unsigned long start = micros();
   Serial1.flush();
 80a0110:	69db      	ldr	r3, [r3, #28]
 80a0112:	4798      	blx	r3
  Serial1.read();            // Ready to read
 80a0114:	f000 fbae 	bl	80a0874 <_Z22__fetch_global_Serial1v>
 80a0118:	6803      	ldr	r3, [r0, #0]
 80a011a:	695b      	ldr	r3, [r3, #20]
 80a011c:	4798      	blx	r3
  digitalWrite(maxOn, HIGH); // Bring HIGH to trigger range reading
 80a011e:	2101      	movs	r1, #1
 80a0120:	8820      	ldrh	r0, [r4, #0]
 80a0122:	f000 fd6e 	bl	80a0c02 <digitalWrite>
 80a0126:	f000 f889 	bl	80a023c <HAL_Timer_Get_Micro_Seconds>
  if (micros() >= start + 20);
  digitalWrite(maxOn, LOW);     // End range reading
 80a012a:	2100      	movs	r1, #0
 80a012c:	8820      	ldrh	r0, [r4, #0]
 80a012e:	f000 fd68 	bl	80a0c02 <digitalWrite>
  if (Serial1.available() >= 4) // Only iterate over the range data if there is a minimum of Rxxx
 80a0132:	f000 fb9f 	bl	80a0874 <_Z22__fetch_global_Serial1v>
 80a0136:	6803      	ldr	r3, [r0, #0]
 80a0138:	691b      	ldr	r3, [r3, #16]
 80a013a:	4798      	blx	r3
 80a013c:	2803      	cmp	r0, #3
 80a013e:	dc48      	bgt.n	80a01d2 <loop+0xd2>
 80a0140:	f000 f87c 	bl	80a023c <HAL_Timer_Get_Micro_Seconds>
 80a0144:	4606      	mov	r6, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0146:	f000 f881 	bl	80a024c <HAL_Timer_Get_Milli_Seconds>
 80a014a:	4604      	mov	r4, r0

  unsigned long end = micros();
  unsigned long elapsed = millis() / (60 * 1000); // millis is the time since code was started
  // Serial1.flush();

  Serial.print("Start: ");
 80a014c:	f000 fc10 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a0150:	4927      	ldr	r1, [pc, #156]	; (80a01f0 <loop+0xf0>)
 80a0152:	f000 fa67 	bl	80a0624 <_ZN5Print5printEPKc>
  Serial.println(start);
 80a0156:	f000 fc0b 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a015a:	220a      	movs	r2, #10
 80a015c:	4629      	mov	r1, r5
 80a015e:	f000 faaa 	bl	80a06b6 <_ZN5Print7printlnEmi>

  Serial.print("End: ");
 80a0162:	f000 fc05 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a0166:	4923      	ldr	r1, [pc, #140]	; (80a01f4 <loop+0xf4>)
 80a0168:	f000 fa5c 	bl	80a0624 <_ZN5Print5printEPKc>
  Serial.println(end);
 80a016c:	f000 fc00 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a0170:	220a      	movs	r2, #10
 80a0172:	4631      	mov	r1, r6
 80a0174:	f000 fa9f 	bl	80a06b6 <_ZN5Print7printlnEmi>

  Serial.print("Elapsed: ");
 80a0178:	f000 fbfa 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a017c:	491e      	ldr	r1, [pc, #120]	; (80a01f8 <loop+0xf8>)
 80a017e:	f000 fa51 	bl	80a0624 <_ZN5Print5printEPKc>
  Serial.println(elapsed);
 80a0182:	f000 fbf5 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a0186:	f64e 2160 	movw	r1, #60000	; 0xea60
 80a018a:	220a      	movs	r2, #10
 80a018c:	fbb4 f1f1 	udiv	r1, r4, r1
 80a0190:	f000 fa91 	bl	80a06b6 <_ZN5Print7printlnEmi>

  Serial.print("Buf: ");
 80a0194:	f000 fbec 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a0198:	4918      	ldr	r1, [pc, #96]	; (80a01fc <loop+0xfc>)
 80a019a:	f000 fa43 	bl	80a0624 <_ZN5Print5printEPKc>
  Serial.println(buf);
 80a019e:	f000 fbe7 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a01a2:	4917      	ldr	r1, [pc, #92]	; (80a0200 <loop+0x100>)
 80a01a4:	f000 fa51 	bl	80a064a <_ZN5Print7printlnEPKc>
  int data = atoi(buf);
 80a01a8:	4815      	ldr	r0, [pc, #84]	; (80a0200 <loop+0x100>)
 80a01aa:	f000 feeb 	bl	80a0f84 <atoi>
 80a01ae:	4604      	mov	r4, r0
  Serial.print("Parsed: ");
 80a01b0:	f000 fbde 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a01b4:	4913      	ldr	r1, [pc, #76]	; (80a0204 <loop+0x104>)
 80a01b6:	f000 fa35 	bl	80a0624 <_ZN5Print5printEPKc>
  Serial.println(data);
 80a01ba:	f000 fbd9 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a01be:	4621      	mov	r1, r4
 80a01c0:	220a      	movs	r2, #10
 80a01c2:	f000 faa4 	bl	80a070e <_ZN5Print7printlnEii>
  //   Serial.println(buf);
  //   int data = atoi(buf);
  //   Serial.print("Parsed: ");
  //   Serial.println(data);
  //   delay(1200); // Repeat the process every X milliseconds
}
 80a01c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Serial.print("Buf: ");
  Serial.println(buf);
  int data = atoi(buf);
  Serial.print("Parsed: ");
  Serial.println(data);
  delay(1200); // Re
 80a01ca:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80a01ce:	f000 b973 	b.w	80a04b8 <delay>
  if (Serial1.available() >= 4) // Only iterate over the range data if there is a minimum of Rxxx
  {
    for (int i = 0; i < 5; i++)
    {

      buf[i] = Serial1.read(); // Push data into buffer
 80a01d2:	4e0b      	ldr	r6, [pc, #44]	; (80a0200 <loop+0x100>)
 80a01d4:	2400      	movs	r4, #0
 80a01d6:	f000 fb4d 	bl	80a0874 <_Z22__fetch_global_Serial1v>
 80a01da:	6803      	ldr	r3, [r0, #0]
 80a01dc:	695b      	ldr	r3, [r3, #20]
 80a01de:	4798      	blx	r3
 80a01e0:	5530      	strb	r0, [r6, r4]
  digitalWrite(maxOn, HIGH); // Bring HIGH to trigger range reading
  if (micros() >= start + 20);
  digitalWrite(maxOn, LOW);     // End range reading
  if (Serial1.available() >= 4) // Only iterate over the range data if there is a minimum of Rxxx
  {
    for (int i = 0; i < 5; i++)
 80a01e2:	3401      	adds	r4, #1
 80a01e4:	2c05      	cmp	r4, #5
 80a01e6:	d1f6      	bne.n	80a01d6 <loop+0xd6>
 80a01e8:	e7aa      	b.n	80a0140 <loop+0x40>
 80a01ea:	bf00      	nop
 80a01ec:	20000370 	.word	0x20000370
 80a01f0:	080a1183 	.word	0x080a1183
 80a01f4:	080a118b 	.word	0x080a118b
 80a01f8:	080a1191 	.word	0x080a1191
 80a01fc:	080a119b 	.word	0x080a119b
 80a0200:	20000374 	.word	0x20000374
 80a0204:	080a11a1 	.word	0x080a11a1

080a0208 <_GLOBAL__sub_I_maxOn>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0208:	f000 b828 	b.w	80a025c <HAL_Pin_Map>

080a020c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a020c:	b508      	push	{r3, lr}
 80a020e:	4b02      	ldr	r3, [pc, #8]	; (80a0218 <os_mutex_create+0xc>)
 80a0210:	681b      	ldr	r3, [r3, #0]
 80a0212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0214:	9301      	str	r3, [sp, #4]
 80a0216:	bd08      	pop	{r3, pc}
 80a0218:	080601d0 	.word	0x080601d0

080a021c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a021c:	b508      	push	{r3, lr}
 80a021e:	4b02      	ldr	r3, [pc, #8]	; (80a0228 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a0220:	681b      	ldr	r3, [r3, #0]
 80a0222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0224:	9301      	str	r3, [sp, #4]
 80a0226:	bd08      	pop	{r3, pc}
 80a0228:	080601b8 	.word	0x080601b8

080a022c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a022c:	b508      	push	{r3, lr}
 80a022e:	4b02      	ldr	r3, [pc, #8]	; (80a0238 <HAL_RNG_GetRandomNumber+0xc>)
 80a0230:	681b      	ldr	r3, [r3, #0]
 80a0232:	685b      	ldr	r3, [r3, #4]
 80a0234:	9301      	str	r3, [sp, #4]
 80a0236:	bd08      	pop	{r3, pc}
 80a0238:	0806019c 	.word	0x0806019c

080a023c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a023c:	b508      	push	{r3, lr}
 80a023e:	4b02      	ldr	r3, [pc, #8]	; (80a0248 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0240:	681b      	ldr	r3, [r3, #0]
 80a0242:	691b      	ldr	r3, [r3, #16]
 80a0244:	9301      	str	r3, [sp, #4]
 80a0246:	bd08      	pop	{r3, pc}
 80a0248:	0806019c 	.word	0x0806019c

080a024c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a024c:	b508      	push	{r3, lr}
 80a024e:	4b02      	ldr	r3, [pc, #8]	; (80a0258 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0250:	681b      	ldr	r3, [r3, #0]
 80a0252:	695b      	ldr	r3, [r3, #20]
 80a0254:	9301      	str	r3, [sp, #4]
 80a0256:	bd08      	pop	{r3, pc}
 80a0258:	0806019c 	.word	0x0806019c

080a025c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a025c:	b508      	push	{r3, lr}
 80a025e:	4b02      	ldr	r3, [pc, #8]	; (80a0268 <HAL_Pin_Map+0xc>)
 80a0260:	681b      	ldr	r3, [r3, #0]
 80a0262:	681b      	ldr	r3, [r3, #0]
 80a0264:	9301      	str	r3, [sp, #4]
 80a0266:	bd08      	pop	{r3, pc}
 80a0268:	080601b0 	.word	0x080601b0

080a026c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a026c:	b508      	push	{r3, lr}
 80a026e:	4b02      	ldr	r3, [pc, #8]	; (80a0278 <HAL_Pin_Mode+0xc>)
 80a0270:	681b      	ldr	r3, [r3, #0]
 80a0272:	689b      	ldr	r3, [r3, #8]
 80a0274:	9301      	str	r3, [sp, #4]
 80a0276:	bd08      	pop	{r3, pc}
 80a0278:	080601b0 	.word	0x080601b0

080a027c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a027c:	b508      	push	{r3, lr}
 80a027e:	4b02      	ldr	r3, [pc, #8]	; (80a0288 <HAL_Get_Pin_Mode+0xc>)
 80a0280:	681b      	ldr	r3, [r3, #0]
 80a0282:	68db      	ldr	r3, [r3, #12]
 80a0284:	9301      	str	r3, [sp, #4]
 80a0286:	bd08      	pop	{r3, pc}
 80a0288:	080601b0 	.word	0x080601b0

080a028c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a028c:	b508      	push	{r3, lr}
 80a028e:	4b02      	ldr	r3, [pc, #8]	; (80a0298 <HAL_GPIO_Write+0xc>)
 80a0290:	681b      	ldr	r3, [r3, #0]
 80a0292:	691b      	ldr	r3, [r3, #16]
 80a0294:	9301      	str	r3, [sp, #4]
 80a0296:	bd08      	pop	{r3, pc}
 80a0298:	080601b0 	.word	0x080601b0

080a029c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a029c:	b508      	push	{r3, lr}
 80a029e:	4b02      	ldr	r3, [pc, #8]	; (80a02a8 <HAL_I2C_Write_Data+0xc>)
 80a02a0:	681b      	ldr	r3, [r3, #0]
 80a02a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a02a4:	9301      	str	r3, [sp, #4]
 80a02a6:	bd08      	pop	{r3, pc}
 80a02a8:	080601ac 	.word	0x080601ac

080a02ac <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a02ac:	b508      	push	{r3, lr}
 80a02ae:	4b02      	ldr	r3, [pc, #8]	; (80a02b8 <HAL_I2C_Available_Data+0xc>)
 80a02b0:	681b      	ldr	r3, [r3, #0]
 80a02b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a02b4:	9301      	str	r3, [sp, #4]
 80a02b6:	bd08      	pop	{r3, pc}
 80a02b8:	080601ac 	.word	0x080601ac

080a02bc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a02bc:	b508      	push	{r3, lr}
 80a02be:	4b02      	ldr	r3, [pc, #8]	; (80a02c8 <HAL_I2C_Read_Data+0xc>)
 80a02c0:	681b      	ldr	r3, [r3, #0]
 80a02c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a02c4:	9301      	str	r3, [sp, #4]
 80a02c6:	bd08      	pop	{r3, pc}
 80a02c8:	080601ac 	.word	0x080601ac

080a02cc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a02cc:	b508      	push	{r3, lr}
 80a02ce:	4b02      	ldr	r3, [pc, #8]	; (80a02d8 <HAL_I2C_Peek_Data+0xc>)
 80a02d0:	681b      	ldr	r3, [r3, #0]
 80a02d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a02d4:	9301      	str	r3, [sp, #4]
 80a02d6:	bd08      	pop	{r3, pc}
 80a02d8:	080601ac 	.word	0x080601ac

080a02dc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a02dc:	b508      	push	{r3, lr}
 80a02de:	4b02      	ldr	r3, [pc, #8]	; (80a02e8 <HAL_I2C_Flush_Data+0xc>)
 80a02e0:	681b      	ldr	r3, [r3, #0]
 80a02e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a02e4:	9301      	str	r3, [sp, #4]
 80a02e6:	bd08      	pop	{r3, pc}
 80a02e8:	080601ac 	.word	0x080601ac

080a02ec <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a02ec:	b508      	push	{r3, lr}
 80a02ee:	4b02      	ldr	r3, [pc, #8]	; (80a02f8 <HAL_I2C_Is_Enabled+0xc>)
 80a02f0:	681b      	ldr	r3, [r3, #0]
 80a02f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a02f4:	9301      	str	r3, [sp, #4]
 80a02f6:	bd08      	pop	{r3, pc}
 80a02f8:	080601ac 	.word	0x080601ac

080a02fc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a02fc:	b508      	push	{r3, lr}
 80a02fe:	4b03      	ldr	r3, [pc, #12]	; (80a030c <HAL_I2C_Init+0x10>)
 80a0300:	681b      	ldr	r3, [r3, #0]
 80a0302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0306:	9301      	str	r3, [sp, #4]
 80a0308:	bd08      	pop	{r3, pc}
 80a030a:	0000      	.short	0x0000
 80a030c:	080601ac 	.word	0x080601ac

080a0310 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <HAL_SPI_Init+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	69db      	ldr	r3, [r3, #28]
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	080601b4 	.word	0x080601b4

080a0320 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b02      	ldr	r3, [pc, #8]	; (80a032c <HAL_SPI_Is_Enabled+0xc>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	6a1b      	ldr	r3, [r3, #32]
 80a0328:	9301      	str	r3, [sp, #4]
 80a032a:	bd08      	pop	{r3, pc}
 80a032c:	080601b4 	.word	0x080601b4

080a0330 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0330:	b508      	push	{r3, lr}
 80a0332:	4b02      	ldr	r3, [pc, #8]	; (80a033c <HAL_USART_Init+0xc>)
 80a0334:	681b      	ldr	r3, [r3, #0]
 80a0336:	699b      	ldr	r3, [r3, #24]
 80a0338:	9301      	str	r3, [sp, #4]
 80a033a:	bd08      	pop	{r3, pc}
 80a033c:	080601c4 	.word	0x080601c4

080a0340 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0340:	b508      	push	{r3, lr}
 80a0342:	4b02      	ldr	r3, [pc, #8]	; (80a034c <HAL_USART_Write_Data+0xc>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0348:	9301      	str	r3, [sp, #4]
 80a034a:	bd08      	pop	{r3, pc}
 80a034c:	080601c4 	.word	0x080601c4

080a0350 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0350:	b508      	push	{r3, lr}
 80a0352:	4b02      	ldr	r3, [pc, #8]	; (80a035c <HAL_USART_Available_Data+0xc>)
 80a0354:	681b      	ldr	r3, [r3, #0]
 80a0356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0358:	9301      	str	r3, [sp, #4]
 80a035a:	bd08      	pop	{r3, pc}
 80a035c:	080601c4 	.word	0x080601c4

080a0360 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0360:	b508      	push	{r3, lr}
 80a0362:	4b02      	ldr	r3, [pc, #8]	; (80a036c <HAL_USART_Read_Data+0xc>)
 80a0364:	681b      	ldr	r3, [r3, #0]
 80a0366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0368:	9301      	str	r3, [sp, #4]
 80a036a:	bd08      	pop	{r3, pc}
 80a036c:	080601c4 	.word	0x080601c4

080a0370 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0370:	b508      	push	{r3, lr}
 80a0372:	4b02      	ldr	r3, [pc, #8]	; (80a037c <HAL_USART_Peek_Data+0xc>)
 80a0374:	681b      	ldr	r3, [r3, #0]
 80a0376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0378:	9301      	str	r3, [sp, #4]
 80a037a:	bd08      	pop	{r3, pc}
 80a037c:	080601c4 	.word	0x080601c4

080a0380 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0380:	b508      	push	{r3, lr}
 80a0382:	4b02      	ldr	r3, [pc, #8]	; (80a038c <HAL_USART_Flush_Data+0xc>)
 80a0384:	681b      	ldr	r3, [r3, #0]
 80a0386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0388:	9301      	str	r3, [sp, #4]
 80a038a:	bd08      	pop	{r3, pc}
 80a038c:	080601c4 	.word	0x080601c4

080a0390 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0390:	b508      	push	{r3, lr}
 80a0392:	4b02      	ldr	r3, [pc, #8]	; (80a039c <HAL_USART_Is_Enabled+0xc>)
 80a0394:	681b      	ldr	r3, [r3, #0]
 80a0396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0398:	9301      	str	r3, [sp, #4]
 80a039a:	bd08      	pop	{r3, pc}
 80a039c:	080601c4 	.word	0x080601c4

080a03a0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a03a0:	b508      	push	{r3, lr}
 80a03a2:	4b02      	ldr	r3, [pc, #8]	; (80a03ac <HAL_USART_Available_Data_For_Write+0xc>)
 80a03a4:	681b      	ldr	r3, [r3, #0]
 80a03a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a03a8:	9301      	str	r3, [sp, #4]
 80a03aa:	bd08      	pop	{r3, pc}
 80a03ac:	080601c4 	.word	0x080601c4

080a03b0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a03b0:	b508      	push	{r3, lr}
 80a03b2:	4b02      	ldr	r3, [pc, #8]	; (80a03bc <HAL_USART_BeginConfig+0xc>)
 80a03b4:	681b      	ldr	r3, [r3, #0]
 80a03b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	bd08      	pop	{r3, pc}
 80a03bc:	080601c4 	.word	0x080601c4

080a03c0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a03c0:	b508      	push	{r3, lr}
 80a03c2:	4b02      	ldr	r3, [pc, #8]	; (80a03cc <HAL_USB_USART_Init+0xc>)
 80a03c4:	681b      	ldr	r3, [r3, #0]
 80a03c6:	681b      	ldr	r3, [r3, #0]
 80a03c8:	9301      	str	r3, [sp, #4]
 80a03ca:	bd08      	pop	{r3, pc}
 80a03cc:	080601d8 	.word	0x080601d8

080a03d0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a03d0:	b508      	push	{r3, lr}
 80a03d2:	4b02      	ldr	r3, [pc, #8]	; (80a03dc <HAL_USB_USART_Begin+0xc>)
 80a03d4:	681b      	ldr	r3, [r3, #0]
 80a03d6:	685b      	ldr	r3, [r3, #4]
 80a03d8:	9301      	str	r3, [sp, #4]
 80a03da:	bd08      	pop	{r3, pc}
 80a03dc:	080601d8 	.word	0x080601d8

080a03e0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a03e0:	b508      	push	{r3, lr}
 80a03e2:	4b02      	ldr	r3, [pc, #8]	; (80a03ec <HAL_USB_USART_Available_Data+0xc>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	691b      	ldr	r3, [r3, #16]
 80a03e8:	9301      	str	r3, [sp, #4]
 80a03ea:	bd08      	pop	{r3, pc}
 80a03ec:	080601d8 	.word	0x080601d8

080a03f0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a03f0:	b508      	push	{r3, lr}
 80a03f2:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a03f4:	681b      	ldr	r3, [r3, #0]
 80a03f6:	695b      	ldr	r3, [r3, #20]
 80a03f8:	9301      	str	r3, [sp, #4]
 80a03fa:	bd08      	pop	{r3, pc}
 80a03fc:	080601d8 	.word	0x080601d8

080a0400 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b02      	ldr	r3, [pc, #8]	; (80a040c <HAL_USB_USART_Receive_Data+0xc>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	699b      	ldr	r3, [r3, #24]
 80a0408:	9301      	str	r3, [sp, #4]
 80a040a:	bd08      	pop	{r3, pc}
 80a040c:	080601d8 	.word	0x080601d8

080a0410 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <HAL_USB_USART_Send_Data+0xc>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	69db      	ldr	r3, [r3, #28]
 80a0418:	9301      	str	r3, [sp, #4]
 80a041a:	bd08      	pop	{r3, pc}
 80a041c:	080601d8 	.word	0x080601d8

080a0420 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0420:	b508      	push	{r3, lr}
 80a0422:	4b02      	ldr	r3, [pc, #8]	; (80a042c <HAL_USB_USART_Flush_Data+0xc>)
 80a0424:	681b      	ldr	r3, [r3, #0]
 80a0426:	6a1b      	ldr	r3, [r3, #32]
 80a0428:	9301      	str	r3, [sp, #4]
 80a042a:	bd08      	pop	{r3, pc}
 80a042c:	080601d8 	.word	0x080601d8

080a0430 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0430:	b508      	push	{r3, lr}
 80a0432:	4b02      	ldr	r3, [pc, #8]	; (80a043c <set_system_mode+0xc>)
 80a0434:	681b      	ldr	r3, [r3, #0]
 80a0436:	685b      	ldr	r3, [r3, #4]
 80a0438:	9301      	str	r3, [sp, #4]
 80a043a:	bd08      	pop	{r3, pc}
 80a043c:	080601a4 	.word	0x080601a4

080a0440 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b02      	ldr	r3, [pc, #8]	; (80a044c <system_delay_ms+0xc>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	695b      	ldr	r3, [r3, #20]
 80a0448:	9301      	str	r3, [sp, #4]
 80a044a:	bd08      	pop	{r3, pc}
 80a044c:	080601a4 	.word	0x080601a4

080a0450 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0450:	b508      	push	{r3, lr}
 80a0452:	4b03      	ldr	r3, [pc, #12]	; (80a0460 <system_ctrl_set_app_request_handler+0x10>)
 80a0454:	681b      	ldr	r3, [r3, #0]
 80a0456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a045a:	9301      	str	r3, [sp, #4]
 80a045c:	bd08      	pop	{r3, pc}
 80a045e:	0000      	.short	0x0000
 80a0460:	080601a4 	.word	0x080601a4

080a0464 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b03      	ldr	r3, [pc, #12]	; (80a0474 <system_ctrl_set_result+0x10>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a046e:	9301      	str	r3, [sp, #4]
 80a0470:	bd08      	pop	{r3, pc}
 80a0472:	0000      	.short	0x0000
 80a0474:	080601a4 	.word	0x080601a4

080a0478 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601cc 	.word	0x080601cc

080a0488 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <network_ready+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	691b      	ldr	r3, [r3, #16]
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601c8 	.word	0x080601c8

080a0498 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <malloc+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	681b      	ldr	r3, [r3, #0]
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601a0 	.word	0x080601a0

080a04a8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <free+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	685b      	ldr	r3, [r3, #4]
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	080601a0 	.word	0x080601a0

080a04b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a04b8:	2100      	movs	r1, #0
 80a04ba:	f7ff bfc1 	b.w	80a0440 <system_delay_ms>

080a04be <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a04be:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a04c0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a04c2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a04c4:	b113      	cbz	r3, 80a04cc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a04c6:	2203      	movs	r2, #3
 80a04c8:	4601      	mov	r1, r0
 80a04ca:	4798      	blx	r3
    }
 80a04cc:	4620      	mov	r0, r4
 80a04ce:	bd10      	pop	{r4, pc}

080a04d0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a04d0:	4770      	bx	lr

080a04d2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a04d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a04d4:	4606      	mov	r6, r0
 80a04d6:	4615      	mov	r5, r2
 80a04d8:	460c      	mov	r4, r1
 80a04da:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a04dc:	42bc      	cmp	r4, r7
 80a04de:	d006      	beq.n	80a04ee <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a04e0:	6833      	ldr	r3, [r6, #0]
 80a04e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a04e6:	689b      	ldr	r3, [r3, #8]
 80a04e8:	4630      	mov	r0, r6
 80a04ea:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a04ec:	e7f6      	b.n	80a04dc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a04ee:	4628      	mov	r0, r5
 80a04f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a04f2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a04f2:	2200      	movs	r2, #0
 80a04f4:	7c00      	ldrb	r0, [r0, #16]
 80a04f6:	f7ff bed1 	b.w	80a029c <HAL_I2C_Write_Data>

080a04fa <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a04fa:	2100      	movs	r1, #0
 80a04fc:	7c00      	ldrb	r0, [r0, #16]
 80a04fe:	f7ff bed5 	b.w	80a02ac <HAL_I2C_Available_Data>

080a0502 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0502:	2100      	movs	r1, #0
 80a0504:	7c00      	ldrb	r0, [r0, #16]
 80a0506:	f7ff bed9 	b.w	80a02bc <HAL_I2C_Read_Data>

080a050a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a050a:	2100      	movs	r1, #0
 80a050c:	7c00      	ldrb	r0, [r0, #16]
 80a050e:	f7ff bedd 	b.w	80a02cc <HAL_I2C_Peek_Data>

080a0512 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0512:	2100      	movs	r1, #0
 80a0514:	7c00      	ldrb	r0, [r0, #16]
 80a0516:	f7ff bee1 	b.w	80a02dc <HAL_I2C_Flush_Data>

080a051a <_ZN7TwoWireD0Ev>:
 80a051a:	b510      	push	{r4, lr}
 80a051c:	4604      	mov	r4, r0
 80a051e:	f7ff fdbc 	bl	80a009a <_ZdlPv>
 80a0522:	4620      	mov	r0, r4
 80a0524:	bd10      	pop	{r4, pc}
	...

080a0528 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a0528:	b510      	push	{r4, lr}
 80a052a:	4604      	mov	r4, r0
 80a052c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0532:	60a3      	str	r3, [r4, #8]
 80a0534:	4b04      	ldr	r3, [pc, #16]	; (80a0548 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0536:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a0538:	7420      	strb	r0, [r4, #16]
 80a053a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a053c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a053e:	f7ff fedd 	bl	80a02fc <HAL_I2C_Init>

}
 80a0542:	4620      	mov	r0, r4
 80a0544:	bd10      	pop	{r4, pc}
 80a0546:	bf00      	nop
 80a0548:	080a11b4 	.word	0x080a11b4

080a054c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a054c:	2100      	movs	r1, #0
 80a054e:	7c00      	ldrb	r0, [r0, #16]
 80a0550:	f7ff becc 	b.w	80a02ec <HAL_I2C_Is_Enabled>

080a0554 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0554:	4770      	bx	lr

080a0556 <_ZN9IPAddressD0Ev>:
 80a0556:	b510      	push	{r4, lr}
 80a0558:	4604      	mov	r4, r0
 80a055a:	f7ff fd9e 	bl	80a009a <_ZdlPv>
 80a055e:	4620      	mov	r0, r4
 80a0560:	bd10      	pop	{r4, pc}

080a0562 <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0564:	460f      	mov	r7, r1
 80a0566:	f100 0608 	add.w	r6, r0, #8
 80a056a:	1d05      	adds	r5, r0, #4
 80a056c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a056e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0572:	220a      	movs	r2, #10
 80a0574:	4638      	mov	r0, r7
 80a0576:	f000 f89c 	bl	80a06b2 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a057a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a057c:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a057e:	d007      	beq.n	80a0590 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0580:	2c00      	cmp	r4, #0
 80a0582:	d0f4      	beq.n	80a056e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0584:	212e      	movs	r1, #46	; 0x2e
 80a0586:	4638      	mov	r0, r7
 80a0588:	f000 f850 	bl	80a062c <_ZN5Print5printEc>
 80a058c:	4404      	add	r4, r0
 80a058e:	e7ee      	b.n	80a056e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0590:	4620      	mov	r0, r4
 80a0592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0594 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0594:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0596:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a059a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a059e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a05a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a05a6:	2304      	movs	r3, #4
 80a05a8:	6041      	str	r1, [r0, #4]
 80a05aa:	7503      	strb	r3, [r0, #20]
 80a05ac:	bd10      	pop	{r4, pc}
	...

080a05b0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a05b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a05b2:	4d04      	ldr	r5, [pc, #16]	; (80a05c4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a05b4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a05b6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a05ba:	9500      	str	r5, [sp, #0]
 80a05bc:	f7ff ffea 	bl	80a0594 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a05c0:	b003      	add	sp, #12
 80a05c2:	bd30      	pop	{r4, r5, pc}
 80a05c4:	080a11dc 	.word	0x080a11dc

080a05c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a05c8:	4a01      	ldr	r2, [pc, #4]	; (80a05d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a05ca:	4b02      	ldr	r3, [pc, #8]	; (80a05d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a05cc:	601a      	str	r2, [r3, #0]
 80a05ce:	4770      	bx	lr
 80a05d0:	080a12a3 	.word	0x080a12a3
 80a05d4:	2000037c 	.word	0x2000037c

080a05d8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a05d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05da:	4606      	mov	r6, r0
 80a05dc:	460d      	mov	r5, r1
 80a05de:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a05e0:	2400      	movs	r4, #0
  while (size--) {
 80a05e2:	42bd      	cmp	r5, r7
 80a05e4:	d00c      	beq.n	80a0600 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a05e6:	6833      	ldr	r3, [r6, #0]
 80a05e8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a05ec:	689b      	ldr	r3, [r3, #8]
 80a05ee:	4630      	mov	r0, r6
 80a05f0:	4798      	blx	r3
     if (chunk>=0)
 80a05f2:	2800      	cmp	r0, #0
 80a05f4:	db01      	blt.n	80a05fa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a05f6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a05f8:	e7f3      	b.n	80a05e2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a05fa:	2c00      	cmp	r4, #0
 80a05fc:	bf08      	it	eq
 80a05fe:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0600:	4620      	mov	r0, r4
 80a0602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0604 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0604:	b570      	push	{r4, r5, r6, lr}
 80a0606:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0608:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a060a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a060c:	b149      	cbz	r1, 80a0622 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a060e:	f000 fd07 	bl	80a1020 <strlen>
 80a0612:	682b      	ldr	r3, [r5, #0]
 80a0614:	4602      	mov	r2, r0
 80a0616:	4621      	mov	r1, r4
 80a0618:	4628      	mov	r0, r5
    }
 80a061a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a061e:	68db      	ldr	r3, [r3, #12]
 80a0620:	4718      	bx	r3
    }
 80a0622:	bd70      	pop	{r4, r5, r6, pc}

080a0624 <_ZN5Print5printEPKc>:
 80a0624:	b508      	push	{r3, lr}
 80a0626:	f7ff ffed 	bl	80a0604 <_ZN5Print5writeEPKc>
 80a062a:	bd08      	pop	{r3, pc}

080a062c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a062c:	6803      	ldr	r3, [r0, #0]
 80a062e:	689b      	ldr	r3, [r3, #8]
 80a0630:	4718      	bx	r3

080a0632 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0632:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0634:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0636:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0638:	f7ff fff8 	bl	80a062c <_ZN5Print5printEc>
  n += print('\n');
 80a063c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a063e:	4604      	mov	r4, r0
  n += print('\n');
 80a0640:	4628      	mov	r0, r5
 80a0642:	f7ff fff3 	bl	80a062c <_ZN5Print5printEc>
  return n;
}
 80a0646:	4420      	add	r0, r4
 80a0648:	bd38      	pop	{r3, r4, r5, pc}

080a064a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a064a:	b538      	push	{r3, r4, r5, lr}
 80a064c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a064e:	f7ff ffd9 	bl	80a0604 <_ZN5Print5writeEPKc>
 80a0652:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0654:	4628      	mov	r0, r5
 80a0656:	f7ff ffec 	bl	80a0632 <_ZN5Print7printlnEv>
  return n;
}
 80a065a:	4420      	add	r0, r4
 80a065c:	bd38      	pop	{r3, r4, r5, pc}

080a065e <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a065e:	2a01      	cmp	r2, #1
 80a0660:	bf98      	it	ls
 80a0662:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0664:	b530      	push	{r4, r5, lr}
 80a0666:	460b      	mov	r3, r1
 80a0668:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a066a:	2100      	movs	r1, #0
 80a066c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0670:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0674:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0678:	fb05 3312 	mls	r3, r5, r2, r3
 80a067c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a067e:	2b09      	cmp	r3, #9
 80a0680:	bf94      	ite	ls
 80a0682:	3330      	addls	r3, #48	; 0x30
 80a0684:	3337      	addhi	r3, #55	; 0x37
 80a0686:	b2db      	uxtb	r3, r3
 80a0688:	4621      	mov	r1, r4
 80a068a:	f804 3901 	strb.w	r3, [r4], #-1
 80a068e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0690:	2d00      	cmp	r5, #0
 80a0692:	d1ef      	bne.n	80a0674 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0694:	f7ff ffb6 	bl	80a0604 <_ZN5Print5writeEPKc>
}
 80a0698:	b00b      	add	sp, #44	; 0x2c
 80a069a:	bd30      	pop	{r4, r5, pc}

080a069c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a069c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a069e:	b922      	cbnz	r2, 80a06aa <_ZN5Print5printEmi+0xe>
 80a06a0:	6803      	ldr	r3, [r0, #0]
 80a06a2:	b2c9      	uxtb	r1, r1
 80a06a4:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a06a6:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a06a8:	4718      	bx	r3
  else return printNumber(n, base);
 80a06aa:	b2d2      	uxtb	r2, r2
}
 80a06ac:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a06ae:	f7ff bfd6 	b.w	80a065e <_ZN5Print11printNumberEmh>

080a06b2 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a06b2:	f7ff bff3 	b.w	80a069c <_ZN5Print5printEmi>

080a06b6 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 80a06b6:	b538      	push	{r3, r4, r5, lr}
 80a06b8:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a06ba:	f7ff ffef 	bl	80a069c <_ZN5Print5printEmi>
 80a06be:	4604      	mov	r4, r0
  n += println();
 80a06c0:	4628      	mov	r0, r5
 80a06c2:	f7ff ffb6 	bl	80a0632 <_ZN5Print7printlnEv>
  return n;
}
 80a06c6:	4420      	add	r0, r4
 80a06c8:	bd38      	pop	{r3, r4, r5, pc}

080a06ca <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a06ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a06ce:	4607      	mov	r7, r0
 80a06d0:	460e      	mov	r6, r1
  if (base == 0) {
 80a06d2:	4615      	mov	r5, r2
 80a06d4:	b92a      	cbnz	r2, 80a06e2 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a06d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a06da:	6803      	ldr	r3, [r0, #0]
 80a06dc:	b2c9      	uxtb	r1, r1
 80a06de:	689b      	ldr	r3, [r3, #8]
 80a06e0:	4718      	bx	r3
  } else if (base == 10) {
 80a06e2:	2a0a      	cmp	r2, #10
 80a06e4:	d102      	bne.n	80a06ec <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a06e6:	2900      	cmp	r1, #0
 80a06e8:	da01      	bge.n	80a06ee <_ZN5Print5printEli+0x24>
 80a06ea:	e004      	b.n	80a06f6 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a06ec:	b2d2      	uxtb	r2, r2
  }
}
 80a06ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a06f2:	f7ff bfb4 	b.w	80a065e <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a06f6:	212d      	movs	r1, #45	; 0x2d
 80a06f8:	f7ff ff98 	bl	80a062c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a06fc:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a06fe:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a0700:	4271      	negs	r1, r6
 80a0702:	4638      	mov	r0, r7
 80a0704:	f7ff ffab 	bl	80a065e <_ZN5Print11printNumberEmh>
 80a0708:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a070a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a070e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a070e:	b538      	push	{r3, r4, r5, lr}
 80a0710:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a0712:	f7ff ffda 	bl	80a06ca <_ZN5Print5printEli>
 80a0716:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a0718:	4628      	mov	r0, r5
 80a071a:	f7ff ff8a 	bl	80a0632 <_ZN5Print7printlnEv>
  return n;
}
 80a071e:	4420      	add	r0, r4
 80a0720:	bd38      	pop	{r3, r4, r5, pc}

080a0722 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0722:	b510      	push	{r4, lr}
 80a0724:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0726:	f7ff feca 	bl	80a04be <_ZNSt14_Function_baseD1Ev>
 80a072a:	4620      	mov	r0, r4
 80a072c:	bd10      	pop	{r4, pc}
	...

080a0730 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0730:	4803      	ldr	r0, [pc, #12]	; (80a0740 <_GLOBAL__sub_I_RGB+0x10>)
 80a0732:	2300      	movs	r3, #0
 80a0734:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0736:	4a03      	ldr	r2, [pc, #12]	; (80a0744 <_GLOBAL__sub_I_RGB+0x14>)
 80a0738:	4903      	ldr	r1, [pc, #12]	; (80a0748 <_GLOBAL__sub_I_RGB+0x18>)
 80a073a:	f000 bad5 	b.w	80a0ce8 <__aeabi_atexit>
 80a073e:	bf00      	nop
 80a0740:	20000380 	.word	0x20000380
 80a0744:	2000036c 	.word	0x2000036c
 80a0748:	080a0723 	.word	0x080a0723

080a074c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a074c:	4770      	bx	lr

080a074e <_ZN8SPIClassD0Ev>:
 80a074e:	b510      	push	{r4, lr}
 80a0750:	4604      	mov	r4, r0
 80a0752:	f7ff fca2 	bl	80a009a <_ZdlPv>
 80a0756:	4620      	mov	r0, r4
 80a0758:	bd10      	pop	{r4, pc}
	...

080a075c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a075c:	b570      	push	{r4, r5, r6, lr}
 80a075e:	4604      	mov	r4, r0
 80a0760:	460e      	mov	r6, r1
 80a0762:	4b07      	ldr	r3, [pc, #28]	; (80a0780 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0764:	2500      	movs	r5, #0
 80a0766:	6003      	str	r3, [r0, #0]
 80a0768:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a076c:	f7ff fd4e 	bl	80a020c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a0770:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a0772:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0774:	f7ff fdcc 	bl	80a0310 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0778:	60a5      	str	r5, [r4, #8]
}
 80a077a:	4620      	mov	r0, r4
 80a077c:	bd70      	pop	{r4, r5, r6, pc}
 80a077e:	bf00      	nop
 80a0780:	080a12d4 	.word	0x080a12d4

080a0784 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0784:	7900      	ldrb	r0, [r0, #4]
 80a0786:	f7ff bdcb 	b.w	80a0320 <HAL_SPI_Is_Enabled>
	...

080a078c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a078c:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a0790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0792:	4c0d      	ldr	r4, [pc, #52]	; (80a07c8 <_GLOBAL__sub_I_System+0x3c>)
 80a0794:	2500      	movs	r5, #0
 80a0796:	8063      	strh	r3, [r4, #2]
 80a0798:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a079c:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a079e:	80a3      	strh	r3, [r4, #4]
 80a07a0:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a07a2:	f7ff fe45 	bl	80a0430 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a07a6:	a802      	add	r0, sp, #8
 80a07a8:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a07ac:	462a      	mov	r2, r5
 80a07ae:	4629      	mov	r1, r5
 80a07b0:	f7ff fd34 	bl	80a021c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a07b4:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a07b6:	2b1e      	cmp	r3, #30
 80a07b8:	d104      	bne.n	80a07c4 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a07ba:	2303      	movs	r3, #3
 80a07bc:	7023      	strb	r3, [r4, #0]
 80a07be:	2311      	movs	r3, #17
 80a07c0:	8065      	strh	r5, [r4, #2]
 80a07c2:	80a3      	strh	r3, [r4, #4]
 80a07c4:	b003      	add	sp, #12
 80a07c6:	bd30      	pop	{r4, r5, pc}
 80a07c8:	20000390 	.word	0x20000390

080a07cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a07cc:	4b02      	ldr	r3, [pc, #8]	; (80a07d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a07ce:	681a      	ldr	r2, [r3, #0]
 80a07d0:	4b02      	ldr	r3, [pc, #8]	; (80a07dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a07d2:	601a      	str	r2, [r3, #0]
 80a07d4:	4770      	bx	lr
 80a07d6:	bf00      	nop
 80a07d8:	20000300 	.word	0x20000300
 80a07dc:	20000398 	.word	0x20000398

080a07e0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a07e0:	4770      	bx	lr

080a07e2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a07e2:	7441      	strb	r1, [r0, #17]
 80a07e4:	4770      	bx	lr

080a07e6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a07e6:	7c00      	ldrb	r0, [r0, #16]
 80a07e8:	f7ff bdda 	b.w	80a03a0 <HAL_USART_Available_Data_For_Write>

080a07ec <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a07ec:	7c00      	ldrb	r0, [r0, #16]
 80a07ee:	f7ff bdaf 	b.w	80a0350 <HAL_USART_Available_Data>

080a07f2 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a07f2:	7c00      	ldrb	r0, [r0, #16]
 80a07f4:	f7ff bdbc 	b.w	80a0370 <HAL_USART_Peek_Data>

080a07f8 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a07f8:	7c00      	ldrb	r0, [r0, #16]
 80a07fa:	f7ff bdb1 	b.w	80a0360 <HAL_USART_Read_Data>

080a07fe <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a07fe:	7c00      	ldrb	r0, [r0, #16]
 80a0800:	f7ff bdbe 	b.w	80a0380 <HAL_USART_Flush_Data>

080a0804 <_ZN11USARTSerialD0Ev>:
 80a0804:	b510      	push	{r4, lr}
 80a0806:	4604      	mov	r4, r0
 80a0808:	f7ff fc47 	bl	80a009a <_ZdlPv>
 80a080c:	4620      	mov	r0, r4
 80a080e:	bd10      	pop	{r4, pc}

080a0810 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0810:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0812:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0814:	4604      	mov	r4, r0
 80a0816:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0818:	b925      	cbnz	r5, 80a0824 <_ZN11USARTSerial5writeEh+0x14>
 80a081a:	7c00      	ldrb	r0, [r0, #16]
 80a081c:	f7ff fdc0 	bl	80a03a0 <HAL_USART_Available_Data_For_Write>
 80a0820:	2800      	cmp	r0, #0
 80a0822:	dd05      	ble.n	80a0830 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0824:	4631      	mov	r1, r6
 80a0826:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a082c:	f7ff bd88 	b.w	80a0340 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0830:	4628      	mov	r0, r5
 80a0832:	bd70      	pop	{r4, r5, r6, pc}

080a0834 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0834:	b510      	push	{r4, lr}
 80a0836:	4604      	mov	r4, r0
 80a0838:	4608      	mov	r0, r1
 80a083a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a083c:	2200      	movs	r2, #0
 80a083e:	6062      	str	r2, [r4, #4]
 80a0840:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0844:	60a2      	str	r2, [r4, #8]
 80a0846:	4a05      	ldr	r2, [pc, #20]	; (80a085c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0848:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a084a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a084c:	2201      	movs	r2, #1
 80a084e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0850:	461a      	mov	r2, r3
 80a0852:	f7ff fd6d 	bl	80a0330 <HAL_USART_Init>
}
 80a0856:	4620      	mov	r0, r4
 80a0858:	bd10      	pop	{r4, pc}
 80a085a:	bf00      	nop
 80a085c:	080a1310 	.word	0x080a1310

080a0860 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a0860:	2300      	movs	r3, #0
 80a0862:	7c00      	ldrb	r0, [r0, #16]
 80a0864:	f7ff bda4 	b.w	80a03b0 <HAL_USART_BeginConfig>

080a0868 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a0868:	2200      	movs	r2, #0
 80a086a:	f7ff bff9 	b.w	80a0860 <_ZN11USARTSerial5beginEmm>

080a086e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a086e:	7c00      	ldrb	r0, [r0, #16]
 80a0870:	f7ff bd8e 	b.w	80a0390 <HAL_USART_Is_Enabled>

080a0874 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0874:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0876:	4d0c      	ldr	r5, [pc, #48]	; (80a08a8 <_Z22__fetch_global_Serial1v+0x34>)
 80a0878:	6829      	ldr	r1, [r5, #0]
 80a087a:	f011 0401 	ands.w	r4, r1, #1
 80a087e:	d111      	bne.n	80a08a4 <_Z22__fetch_global_Serial1v+0x30>
 80a0880:	4628      	mov	r0, r5
 80a0882:	f7ff fc0c 	bl	80a009e <__cxa_guard_acquire>
 80a0886:	b168      	cbz	r0, 80a08a4 <_Z22__fetch_global_Serial1v+0x30>
 80a0888:	4a08      	ldr	r2, [pc, #32]	; (80a08ac <_Z22__fetch_global_Serial1v+0x38>)
 80a088a:	4621      	mov	r1, r4
 80a088c:	4b08      	ldr	r3, [pc, #32]	; (80a08b0 <_Z22__fetch_global_Serial1v+0x3c>)
 80a088e:	4809      	ldr	r0, [pc, #36]	; (80a08b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a0890:	f7ff ffd0 	bl	80a0834 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0894:	4628      	mov	r0, r5
 80a0896:	f7ff fc07 	bl	80a00a8 <__cxa_guard_release>
 80a089a:	4a07      	ldr	r2, [pc, #28]	; (80a08b8 <_Z22__fetch_global_Serial1v+0x44>)
 80a089c:	4907      	ldr	r1, [pc, #28]	; (80a08bc <_Z22__fetch_global_Serial1v+0x48>)
 80a089e:	4805      	ldr	r0, [pc, #20]	; (80a08b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a08a0:	f000 fa22 	bl	80a0ce8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a08a4:	4803      	ldr	r0, [pc, #12]	; (80a08b4 <_Z22__fetch_global_Serial1v+0x40>)
 80a08a6:	bd38      	pop	{r3, r4, r5, pc}
 80a08a8:	20000434 	.word	0x20000434
 80a08ac:	20000438 	.word	0x20000438
 80a08b0:	200003b0 	.word	0x200003b0
 80a08b4:	2000039c 	.word	0x2000039c
 80a08b8:	2000036c 	.word	0x2000036c
 80a08bc:	080a07e1 	.word	0x080a07e1

080a08c0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a08c0:	7441      	strb	r1, [r0, #17]
 80a08c2:	4770      	bx	lr

080a08c4 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a08c4:	4770      	bx	lr

080a08c6 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a08c6:	2100      	movs	r1, #0
 80a08c8:	7c00      	ldrb	r0, [r0, #16]
 80a08ca:	f7ff bd99 	b.w	80a0400 <HAL_USB_USART_Receive_Data>

080a08ce <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a08ce:	2101      	movs	r1, #1
 80a08d0:	7c00      	ldrb	r0, [r0, #16]
 80a08d2:	f7ff bd95 	b.w	80a0400 <HAL_USB_USART_Receive_Data>

080a08d6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a08d6:	7c00      	ldrb	r0, [r0, #16]
 80a08d8:	f7ff bd8a 	b.w	80a03f0 <HAL_USB_USART_Available_Data_For_Write>

080a08dc <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a08dc:	7c00      	ldrb	r0, [r0, #16]
 80a08de:	f7ff bd7f 	b.w	80a03e0 <HAL_USB_USART_Available_Data>

080a08e2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a08e2:	b538      	push	{r3, r4, r5, lr}
 80a08e4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a08e6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a08e8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a08ea:	f7ff fd81 	bl	80a03f0 <HAL_USB_USART_Available_Data_For_Write>
 80a08ee:	2800      	cmp	r0, #0
 80a08f0:	dc01      	bgt.n	80a08f6 <_ZN9USBSerial5writeEh+0x14>
 80a08f2:	7c60      	ldrb	r0, [r4, #17]
 80a08f4:	b120      	cbz	r0, 80a0900 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a08f6:	4629      	mov	r1, r5
 80a08f8:	7c20      	ldrb	r0, [r4, #16]
 80a08fa:	f7ff fd89 	bl	80a0410 <HAL_USB_USART_Send_Data>
    return 1;
 80a08fe:	2001      	movs	r0, #1
  }
  return 0;
}
 80a0900:	bd38      	pop	{r3, r4, r5, pc}

080a0902 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0902:	7c00      	ldrb	r0, [r0, #16]
 80a0904:	f7ff bd8c 	b.w	80a0420 <HAL_USB_USART_Flush_Data>

080a0908 <_ZN9USBSerialD0Ev>:
 80a0908:	b510      	push	{r4, lr}
 80a090a:	4604      	mov	r4, r0
 80a090c:	f7ff fbc5 	bl	80a009a <_ZdlPv>
 80a0910:	4620      	mov	r0, r4
 80a0912:	bd10      	pop	{r4, pc}

080a0914 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0914:	b510      	push	{r4, lr}
 80a0916:	4604      	mov	r4, r0
 80a0918:	2300      	movs	r3, #0
 80a091a:	6063      	str	r3, [r4, #4]
 80a091c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0920:	60a3      	str	r3, [r4, #8]
 80a0922:	4b05      	ldr	r3, [pc, #20]	; (80a0938 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0924:	4608      	mov	r0, r1
 80a0926:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0928:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a092a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a092c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a092e:	4611      	mov	r1, r2
 80a0930:	f7ff fd46 	bl	80a03c0 <HAL_USB_USART_Init>
}
 80a0934:	4620      	mov	r0, r4
 80a0936:	bd10      	pop	{r4, pc}
 80a0938:	080a1340 	.word	0x080a1340

080a093c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a093c:	2200      	movs	r2, #0
 80a093e:	7c00      	ldrb	r0, [r0, #16]
 80a0940:	f7ff bd46 	b.w	80a03d0 <HAL_USB_USART_Begin>

080a0944 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a0944:	b510      	push	{r4, lr}
 80a0946:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0948:	2214      	movs	r2, #20
 80a094a:	2100      	movs	r1, #0
 80a094c:	f000 fb37 	bl	80a0fbe <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0950:	4b05      	ldr	r3, [pc, #20]	; (80a0968 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0952:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a0954:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a0956:	4b05      	ldr	r3, [pc, #20]	; (80a096c <_Z19acquireSerialBufferv+0x28>)
 80a0958:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a095a:	f240 1301 	movw	r3, #257	; 0x101
 80a095e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0960:	2381      	movs	r3, #129	; 0x81
 80a0962:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0964:	bd10      	pop	{r4, pc}
 80a0966:	bf00      	nop
 80a0968:	20000541 	.word	0x20000541
 80a096c:	200004c0 	.word	0x200004c0

080a0970 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a0970:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0972:	4d0e      	ldr	r5, [pc, #56]	; (80a09ac <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0974:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0976:	a801      	add	r0, sp, #4
 80a0978:	f7ff ffe4 	bl	80a0944 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a097c:	6829      	ldr	r1, [r5, #0]
 80a097e:	f011 0401 	ands.w	r4, r1, #1
 80a0982:	d110      	bne.n	80a09a6 <_Z16_fetch_usbserialv+0x36>
 80a0984:	4628      	mov	r0, r5
 80a0986:	f7ff fb8a 	bl	80a009e <__cxa_guard_acquire>
 80a098a:	b160      	cbz	r0, 80a09a6 <_Z16_fetch_usbserialv+0x36>
 80a098c:	aa01      	add	r2, sp, #4
 80a098e:	4621      	mov	r1, r4
 80a0990:	4807      	ldr	r0, [pc, #28]	; (80a09b0 <_Z16_fetch_usbserialv+0x40>)
 80a0992:	f7ff ffbf 	bl	80a0914 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0996:	4628      	mov	r0, r5
 80a0998:	f7ff fb86 	bl	80a00a8 <__cxa_guard_release>
 80a099c:	4a05      	ldr	r2, [pc, #20]	; (80a09b4 <_Z16_fetch_usbserialv+0x44>)
 80a099e:	4906      	ldr	r1, [pc, #24]	; (80a09b8 <_Z16_fetch_usbserialv+0x48>)
 80a09a0:	4803      	ldr	r0, [pc, #12]	; (80a09b0 <_Z16_fetch_usbserialv+0x40>)
 80a09a2:	f000 f9a1 	bl	80a0ce8 <__aeabi_atexit>
	return _usbserial;
}
 80a09a6:	4802      	ldr	r0, [pc, #8]	; (80a09b0 <_Z16_fetch_usbserialv+0x40>)
 80a09a8:	b007      	add	sp, #28
 80a09aa:	bd30      	pop	{r4, r5, pc}
 80a09ac:	200004bc 	.word	0x200004bc
 80a09b0:	20000644 	.word	0x20000644
 80a09b4:	2000036c 	.word	0x2000036c
 80a09b8:	080a08c5 	.word	0x080a08c5

080a09bc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a09bc:	b510      	push	{r4, lr}
 80a09be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a09c0:	2214      	movs	r2, #20
 80a09c2:	2100      	movs	r1, #0
 80a09c4:	f000 fafb 	bl	80a0fbe <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a09c8:	4b05      	ldr	r3, [pc, #20]	; (80a09e0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a09ca:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a09cc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a09ce:	4b05      	ldr	r3, [pc, #20]	; (80a09e4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a09d0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a09d2:	f240 1301 	movw	r3, #257	; 0x101
 80a09d6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a09d8:	2381      	movs	r3, #129	; 0x81
 80a09da:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a09dc:	bd10      	pop	{r4, pc}
 80a09de:	bf00      	nop
 80a09e0:	200006f4 	.word	0x200006f4
 80a09e4:	2000065c 	.word	0x2000065c

080a09e8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a09e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a09ea:	4c0e      	ldr	r4, [pc, #56]	; (80a0a24 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a09ec:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a09ee:	a801      	add	r0, sp, #4
 80a09f0:	f7ff ffe4 	bl	80a09bc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a09f4:	6823      	ldr	r3, [r4, #0]
 80a09f6:	07db      	lsls	r3, r3, #31
 80a09f8:	d410      	bmi.n	80a0a1c <_Z17_fetch_usbserial1v+0x34>
 80a09fa:	4620      	mov	r0, r4
 80a09fc:	f7ff fb4f 	bl	80a009e <__cxa_guard_acquire>
 80a0a00:	b160      	cbz	r0, 80a0a1c <_Z17_fetch_usbserial1v+0x34>
 80a0a02:	aa01      	add	r2, sp, #4
 80a0a04:	2101      	movs	r1, #1
 80a0a06:	4808      	ldr	r0, [pc, #32]	; (80a0a28 <_Z17_fetch_usbserial1v+0x40>)
 80a0a08:	f7ff ff84 	bl	80a0914 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a0c:	4620      	mov	r0, r4
 80a0a0e:	f7ff fb4b 	bl	80a00a8 <__cxa_guard_release>
 80a0a12:	4a06      	ldr	r2, [pc, #24]	; (80a0a2c <_Z17_fetch_usbserial1v+0x44>)
 80a0a14:	4906      	ldr	r1, [pc, #24]	; (80a0a30 <_Z17_fetch_usbserial1v+0x48>)
 80a0a16:	4804      	ldr	r0, [pc, #16]	; (80a0a28 <_Z17_fetch_usbserial1v+0x40>)
 80a0a18:	f000 f966 	bl	80a0ce8 <__aeabi_atexit>
  return _usbserial1;
}
 80a0a1c:	4802      	ldr	r0, [pc, #8]	; (80a0a28 <_Z17_fetch_usbserial1v+0x40>)
 80a0a1e:	b006      	add	sp, #24
 80a0a20:	bd10      	pop	{r4, pc}
 80a0a22:	bf00      	nop
 80a0a24:	20000658 	.word	0x20000658
 80a0a28:	200006e0 	.word	0x200006e0
 80a0a2c:	2000036c 	.word	0x2000036c
 80a0a30:	080a08c5 	.word	0x080a08c5

080a0a34 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a0a34:	4770      	bx	lr

080a0a36 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0a36:	2200      	movs	r2, #0
 80a0a38:	4611      	mov	r1, r2
 80a0a3a:	4610      	mov	r0, r2
 80a0a3c:	f7ff bd24 	b.w	80a0488 <network_ready>

080a0a40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a0a40:	4803      	ldr	r0, [pc, #12]	; (80a0a50 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0a42:	4b04      	ldr	r3, [pc, #16]	; (80a0a54 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a0a44:	4a04      	ldr	r2, [pc, #16]	; (80a0a58 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a0a46:	4905      	ldr	r1, [pc, #20]	; (80a0a5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a0a48:	6003      	str	r3, [r0, #0]
 80a0a4a:	f000 b94d 	b.w	80a0ce8 <__aeabi_atexit>
 80a0a4e:	bf00      	nop
 80a0a50:	200007f8 	.word	0x200007f8
 80a0a54:	080a1370 	.word	0x080a1370
 80a0a58:	2000036c 	.word	0x2000036c
 80a0a5c:	080a0a35 	.word	0x080a0a35

080a0a60 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0a60:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0a62:	4b14      	ldr	r3, [pc, #80]	; (80a0ab4 <serialEventRun+0x54>)
 80a0a64:	b133      	cbz	r3, 80a0a74 <serialEventRun+0x14>
 80a0a66:	f7ff ff83 	bl	80a0970 <_Z16_fetch_usbserialv>
 80a0a6a:	6803      	ldr	r3, [r0, #0]
 80a0a6c:	691b      	ldr	r3, [r3, #16]
 80a0a6e:	4798      	blx	r3
 80a0a70:	2800      	cmp	r0, #0
 80a0a72:	dc16      	bgt.n	80a0aa2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0a74:	4b10      	ldr	r3, [pc, #64]	; (80a0ab8 <serialEventRun+0x58>)
 80a0a76:	b133      	cbz	r3, 80a0a86 <serialEventRun+0x26>
 80a0a78:	f7ff fefc 	bl	80a0874 <_Z22__fetch_global_Serial1v>
 80a0a7c:	6803      	ldr	r3, [r0, #0]
 80a0a7e:	691b      	ldr	r3, [r3, #16]
 80a0a80:	4798      	blx	r3
 80a0a82:	2800      	cmp	r0, #0
 80a0a84:	dc10      	bgt.n	80a0aa8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0a86:	4b0d      	ldr	r3, [pc, #52]	; (80a0abc <serialEventRun+0x5c>)
 80a0a88:	b10b      	cbz	r3, 80a0a8e <serialEventRun+0x2e>
 80a0a8a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0a8e:	4b0c      	ldr	r3, [pc, #48]	; (80a0ac0 <serialEventRun+0x60>)
 80a0a90:	b17b      	cbz	r3, 80a0ab2 <serialEventRun+0x52>
 80a0a92:	f7ff ffa9 	bl	80a09e8 <_Z17_fetch_usbserial1v>
 80a0a96:	6803      	ldr	r3, [r0, #0]
 80a0a98:	691b      	ldr	r3, [r3, #16]
 80a0a9a:	4798      	blx	r3
 80a0a9c:	2800      	cmp	r0, #0
 80a0a9e:	dc06      	bgt.n	80a0aae <serialEventRun+0x4e>
 80a0aa0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0aa2:	f3af 8000 	nop.w
 80a0aa6:	e7e5      	b.n	80a0a74 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0aa8:	f3af 8000 	nop.w
 80a0aac:	e7eb      	b.n	80a0a86 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0aae:	f3af 8000 	nop.w
 80a0ab2:	bd08      	pop	{r3, pc}
	...

080a0ac4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0ac4:	b508      	push	{r3, lr}
	serialEventRun();
 80a0ac6:	f7ff ffcb 	bl	80a0a60 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0aca:	f7ff fbbf 	bl	80a024c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0ace:	4b01      	ldr	r3, [pc, #4]	; (80a0ad4 <_post_loop+0x10>)
 80a0ad0:	6018      	str	r0, [r3, #0]
 80a0ad2:	bd08      	pop	{r3, pc}
 80a0ad4:	20000804 	.word	0x20000804

080a0ad8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0ad8:	4802      	ldr	r0, [pc, #8]	; (80a0ae4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0ada:	4a03      	ldr	r2, [pc, #12]	; (80a0ae8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0adc:	4903      	ldr	r1, [pc, #12]	; (80a0aec <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0ade:	1a12      	subs	r2, r2, r0
 80a0ae0:	f000 ba62 	b.w	80a0fa8 <memcpy>
 80a0ae4:	40024000 	.word	0x40024000
 80a0ae8:	40024004 	.word	0x40024004
 80a0aec:	080a1510 	.word	0x080a1510

080a0af0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0af0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0af2:	2300      	movs	r3, #0
 80a0af4:	9300      	str	r3, [sp, #0]
 80a0af6:	461a      	mov	r2, r3
 80a0af8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0afc:	f7ff fcb2 	bl	80a0464 <system_ctrl_set_result>
}
 80a0b00:	b003      	add	sp, #12
 80a0b02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0b08 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0b08:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0b0a:	8843      	ldrh	r3, [r0, #2]
 80a0b0c:	2b0a      	cmp	r3, #10
 80a0b0e:	d008      	beq.n	80a0b22 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0b10:	2b50      	cmp	r3, #80	; 0x50
 80a0b12:	d109      	bne.n	80a0b28 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0b14:	4b09      	ldr	r3, [pc, #36]	; (80a0b3c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0b16:	681b      	ldr	r3, [r3, #0]
 80a0b18:	b13b      	cbz	r3, 80a0b2a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0b1a:	b003      	add	sp, #12
 80a0b1c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0b20:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0b22:	f7ff ffe5 	bl	80a0af0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0b26:	e006      	b.n	80a0b36 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0b28:	2300      	movs	r3, #0
 80a0b2a:	9300      	str	r3, [sp, #0]
 80a0b2c:	461a      	mov	r2, r3
 80a0b2e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0b32:	f7ff fc97 	bl	80a0464 <system_ctrl_set_result>
        break;
    }
}
 80a0b36:	b003      	add	sp, #12
 80a0b38:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0b3c:	200007fc 	.word	0x200007fc

080a0b40 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0b40:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0b42:	4c10      	ldr	r4, [pc, #64]	; (80a0b84 <module_user_init_hook+0x44>)
 80a0b44:	4d10      	ldr	r5, [pc, #64]	; (80a0b88 <module_user_init_hook+0x48>)
 80a0b46:	6823      	ldr	r3, [r4, #0]
 80a0b48:	42ab      	cmp	r3, r5
 80a0b4a:	4b10      	ldr	r3, [pc, #64]	; (80a0b8c <module_user_init_hook+0x4c>)
 80a0b4c:	bf0c      	ite	eq
 80a0b4e:	2201      	moveq	r2, #1
 80a0b50:	2200      	movne	r2, #0
 80a0b52:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0b54:	d002      	beq.n	80a0b5c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0b56:	f7ff ffbf 	bl	80a0ad8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0b5a:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a0b5c:	f7ff fb66 	bl	80a022c <HAL_RNG_GetRandomNumber>
 80a0b60:	f000 fa36 	bl	80a0fd0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0b64:	4b0a      	ldr	r3, [pc, #40]	; (80a0b90 <module_user_init_hook+0x50>)
 80a0b66:	b11b      	cbz	r3, 80a0b70 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0b68:	f7ff fb60 	bl	80a022c <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a0b6c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0b70:	2100      	movs	r1, #0
 80a0b72:	4807      	ldr	r0, [pc, #28]	; (80a0b90 <module_user_init_hook+0x50>)
 80a0b74:	f7ff fc80 	bl	80a0478 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0b7c:	2100      	movs	r1, #0
 80a0b7e:	4805      	ldr	r0, [pc, #20]	; (80a0b94 <module_user_init_hook+0x54>)
 80a0b80:	f7ff bc66 	b.w	80a0450 <system_ctrl_set_app_request_handler>
 80a0b84:	40024000 	.word	0x40024000
 80a0b88:	9a271c1e 	.word	0x9a271c1e
 80a0b8c:	20000800 	.word	0x20000800
 80a0b90:	00000000 	.word	0x00000000
 80a0b94:	080a0b09 	.word	0x080a0b09

080a0b98 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0b98:	b510      	push	{r4, lr}
 80a0b9a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0b9c:	480f      	ldr	r0, [pc, #60]	; (80a0bdc <pinAvailable+0x44>)
 80a0b9e:	f7ff fdf1 	bl	80a0784 <_ZN8SPIClass9isEnabledEv>
 80a0ba2:	b128      	cbz	r0, 80a0bb0 <pinAvailable+0x18>
 80a0ba4:	f1a4 030d 	sub.w	r3, r4, #13
 80a0ba8:	2b02      	cmp	r3, #2
 80a0baa:	d801      	bhi.n	80a0bb0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0bac:	2000      	movs	r0, #0
 80a0bae:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0bb0:	f000 f840 	bl	80a0c34 <_Z19__fetch_global_Wirev>
 80a0bb4:	f7ff fcca 	bl	80a054c <_ZN7TwoWire9isEnabledEv>
 80a0bb8:	b108      	cbz	r0, 80a0bbe <pinAvailable+0x26>
 80a0bba:	2c01      	cmp	r4, #1
 80a0bbc:	d9f6      	bls.n	80a0bac <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0bbe:	f7ff fe59 	bl	80a0874 <_Z22__fetch_global_Serial1v>
 80a0bc2:	f7ff fe54 	bl	80a086e <_ZN11USARTSerial9isEnabledEv>
 80a0bc6:	b118      	cbz	r0, 80a0bd0 <pinAvailable+0x38>
 80a0bc8:	f1a4 0312 	sub.w	r3, r4, #18
 80a0bcc:	2b01      	cmp	r3, #1
 80a0bce:	d9ed      	bls.n	80a0bac <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0bd0:	2c17      	cmp	r4, #23
 80a0bd2:	bf8c      	ite	hi
 80a0bd4:	2000      	movhi	r0, #0
 80a0bd6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0bd8:	bd10      	pop	{r4, pc}
 80a0bda:	bf00      	nop
 80a0bdc:	20000838 	.word	0x20000838

080a0be0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0be0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0be2:	b538      	push	{r3, r4, r5, lr}
 80a0be4:	4604      	mov	r4, r0
 80a0be6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0be8:	d80a      	bhi.n	80a0c00 <pinMode+0x20>
 80a0bea:	29ff      	cmp	r1, #255	; 0xff
 80a0bec:	d008      	beq.n	80a0c00 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0bee:	f7ff ffd3 	bl	80a0b98 <pinAvailable>
 80a0bf2:	b128      	cbz	r0, 80a0c00 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0bf4:	4629      	mov	r1, r5
 80a0bf6:	4620      	mov	r0, r4
}
 80a0bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0bfc:	f7ff bb36 	b.w	80a026c <HAL_Pin_Mode>
 80a0c00:	bd38      	pop	{r3, r4, r5, pc}

080a0c02 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0c02:	b538      	push	{r3, r4, r5, lr}
 80a0c04:	4604      	mov	r4, r0
 80a0c06:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0c08:	f7ff fb38 	bl	80a027c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0c0c:	28ff      	cmp	r0, #255	; 0xff
 80a0c0e:	d010      	beq.n	80a0c32 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0c10:	2806      	cmp	r0, #6
 80a0c12:	d804      	bhi.n	80a0c1e <digitalWrite+0x1c>
 80a0c14:	234d      	movs	r3, #77	; 0x4d
 80a0c16:	fa23 f000 	lsr.w	r0, r3, r0
 80a0c1a:	07c3      	lsls	r3, r0, #31
 80a0c1c:	d409      	bmi.n	80a0c32 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0c1e:	4620      	mov	r0, r4
 80a0c20:	f7ff ffba 	bl	80a0b98 <pinAvailable>
 80a0c24:	b128      	cbz	r0, 80a0c32 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0c26:	4629      	mov	r1, r5
 80a0c28:	4620      	mov	r0, r4
}
 80a0c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0c2e:	f7ff bb2d 	b.w	80a028c <HAL_GPIO_Write>
 80a0c32:	bd38      	pop	{r3, r4, r5, pc}

080a0c34 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0c34:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0c36:	4d0b      	ldr	r5, [pc, #44]	; (80a0c64 <_Z19__fetch_global_Wirev+0x30>)
 80a0c38:	6829      	ldr	r1, [r5, #0]
 80a0c3a:	f011 0401 	ands.w	r4, r1, #1
 80a0c3e:	d10f      	bne.n	80a0c60 <_Z19__fetch_global_Wirev+0x2c>
 80a0c40:	4628      	mov	r0, r5
 80a0c42:	f7ff fa2c 	bl	80a009e <__cxa_guard_acquire>
 80a0c46:	b158      	cbz	r0, 80a0c60 <_Z19__fetch_global_Wirev+0x2c>
 80a0c48:	4621      	mov	r1, r4
 80a0c4a:	4807      	ldr	r0, [pc, #28]	; (80a0c68 <_Z19__fetch_global_Wirev+0x34>)
 80a0c4c:	f7ff fc6c 	bl	80a0528 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a0c50:	4628      	mov	r0, r5
 80a0c52:	f7ff fa29 	bl	80a00a8 <__cxa_guard_release>
 80a0c56:	4a05      	ldr	r2, [pc, #20]	; (80a0c6c <_Z19__fetch_global_Wirev+0x38>)
 80a0c58:	4905      	ldr	r1, [pc, #20]	; (80a0c70 <_Z19__fetch_global_Wirev+0x3c>)
 80a0c5a:	4803      	ldr	r0, [pc, #12]	; (80a0c68 <_Z19__fetch_global_Wirev+0x34>)
 80a0c5c:	f000 f844 	bl	80a0ce8 <__aeabi_atexit>
	return wire;
}
 80a0c60:	4801      	ldr	r0, [pc, #4]	; (80a0c68 <_Z19__fetch_global_Wirev+0x34>)
 80a0c62:	bd38      	pop	{r3, r4, r5, pc}
 80a0c64:	20000808 	.word	0x20000808
 80a0c68:	2000080c 	.word	0x2000080c
 80a0c6c:	2000036c 	.word	0x2000036c
 80a0c70:	080a04d1 	.word	0x080a04d1

080a0c74 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0c74:	b513      	push	{r0, r1, r4, lr}
 80a0c76:	4c08      	ldr	r4, [pc, #32]	; (80a0c98 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0c78:	2300      	movs	r3, #0
 80a0c7a:	461a      	mov	r2, r3
 80a0c7c:	4619      	mov	r1, r3
 80a0c7e:	9300      	str	r3, [sp, #0]
 80a0c80:	4620      	mov	r0, r4
 80a0c82:	f7ff fc95 	bl	80a05b0 <_ZN9IPAddressC1Ehhhh>
 80a0c86:	4620      	mov	r0, r4
 80a0c88:	4a04      	ldr	r2, [pc, #16]	; (80a0c9c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0c8a:	4905      	ldr	r1, [pc, #20]	; (80a0ca0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0c8c:	b002      	add	sp, #8
 80a0c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0c92:	f000 b829 	b.w	80a0ce8 <__aeabi_atexit>
 80a0c96:	bf00      	nop
 80a0c98:	20000820 	.word	0x20000820
 80a0c9c:	2000036c 	.word	0x2000036c
 80a0ca0:	080a0555 	.word	0x080a0555

080a0ca4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0ca4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0ca6:	4c0c      	ldr	r4, [pc, #48]	; (80a0cd8 <_GLOBAL__sub_I_SPI+0x34>)
 80a0ca8:	4e0c      	ldr	r6, [pc, #48]	; (80a0cdc <_GLOBAL__sub_I_SPI+0x38>)
 80a0caa:	4d0d      	ldr	r5, [pc, #52]	; (80a0ce0 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0cac:	2100      	movs	r1, #0
 80a0cae:	4620      	mov	r0, r4
 80a0cb0:	f7ff fd54 	bl	80a075c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0cb4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0cb6:	4c0b      	ldr	r4, [pc, #44]	; (80a0ce4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0cb8:	4632      	mov	r2, r6
 80a0cba:	4629      	mov	r1, r5
 80a0cbc:	f000 f814 	bl	80a0ce8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0cc0:	2101      	movs	r1, #1
 80a0cc2:	4620      	mov	r0, r4
 80a0cc4:	f7ff fd4a 	bl	80a075c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0cc8:	4632      	mov	r2, r6
 80a0cca:	4629      	mov	r1, r5
 80a0ccc:	4620      	mov	r0, r4
 80a0cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0cd2:	f000 b809 	b.w	80a0ce8 <__aeabi_atexit>
 80a0cd6:	bf00      	nop
 80a0cd8:	20000838 	.word	0x20000838
 80a0cdc:	2000036c 	.word	0x2000036c
 80a0ce0:	080a074d 	.word	0x080a074d
 80a0ce4:	20000848 	.word	0x20000848

080a0ce8 <__aeabi_atexit>:
 80a0ce8:	460b      	mov	r3, r1
 80a0cea:	4601      	mov	r1, r0
 80a0cec:	4618      	mov	r0, r3
 80a0cee:	f000 b94d 	b.w	80a0f8c <__cxa_atexit>
	...

080a0cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0cf4:	4b24      	ldr	r3, [pc, #144]	; (80a0d88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0cf6:	681a      	ldr	r2, [r3, #0]
 80a0cf8:	07d0      	lsls	r0, r2, #31
 80a0cfa:	bf5c      	itt	pl
 80a0cfc:	2201      	movpl	r2, #1
 80a0cfe:	601a      	strpl	r2, [r3, #0]
 80a0d00:	4b22      	ldr	r3, [pc, #136]	; (80a0d8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0d02:	681a      	ldr	r2, [r3, #0]
 80a0d04:	07d1      	lsls	r1, r2, #31
 80a0d06:	bf5c      	itt	pl
 80a0d08:	2201      	movpl	r2, #1
 80a0d0a:	601a      	strpl	r2, [r3, #0]
 80a0d0c:	4b20      	ldr	r3, [pc, #128]	; (80a0d90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0d0e:	681a      	ldr	r2, [r3, #0]
 80a0d10:	07d2      	lsls	r2, r2, #31
 80a0d12:	bf5c      	itt	pl
 80a0d14:	2201      	movpl	r2, #1
 80a0d16:	601a      	strpl	r2, [r3, #0]
 80a0d18:	4b1e      	ldr	r3, [pc, #120]	; (80a0d94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0d1a:	681a      	ldr	r2, [r3, #0]
 80a0d1c:	07d0      	lsls	r0, r2, #31
 80a0d1e:	bf5c      	itt	pl
 80a0d20:	2201      	movpl	r2, #1
 80a0d22:	601a      	strpl	r2, [r3, #0]
 80a0d24:	4b1c      	ldr	r3, [pc, #112]	; (80a0d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0d26:	681a      	ldr	r2, [r3, #0]
 80a0d28:	07d1      	lsls	r1, r2, #31
 80a0d2a:	bf5c      	itt	pl
 80a0d2c:	2201      	movpl	r2, #1
 80a0d2e:	601a      	strpl	r2, [r3, #0]
 80a0d30:	4b1a      	ldr	r3, [pc, #104]	; (80a0d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0d32:	681a      	ldr	r2, [r3, #0]
 80a0d34:	07d2      	lsls	r2, r2, #31
 80a0d36:	bf5c      	itt	pl
 80a0d38:	2201      	movpl	r2, #1
 80a0d3a:	601a      	strpl	r2, [r3, #0]
 80a0d3c:	4b18      	ldr	r3, [pc, #96]	; (80a0da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0d3e:	681a      	ldr	r2, [r3, #0]
 80a0d40:	07d0      	lsls	r0, r2, #31
 80a0d42:	bf5c      	itt	pl
 80a0d44:	2201      	movpl	r2, #1
 80a0d46:	601a      	strpl	r2, [r3, #0]
 80a0d48:	4b16      	ldr	r3, [pc, #88]	; (80a0da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0d4a:	681a      	ldr	r2, [r3, #0]
 80a0d4c:	07d1      	lsls	r1, r2, #31
 80a0d4e:	bf5c      	itt	pl
 80a0d50:	2201      	movpl	r2, #1
 80a0d52:	601a      	strpl	r2, [r3, #0]
 80a0d54:	4b14      	ldr	r3, [pc, #80]	; (80a0da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0d56:	681a      	ldr	r2, [r3, #0]
 80a0d58:	07d2      	lsls	r2, r2, #31
 80a0d5a:	bf5c      	itt	pl
 80a0d5c:	2201      	movpl	r2, #1
 80a0d5e:	601a      	strpl	r2, [r3, #0]
 80a0d60:	4b12      	ldr	r3, [pc, #72]	; (80a0dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0d62:	681a      	ldr	r2, [r3, #0]
 80a0d64:	07d0      	lsls	r0, r2, #31
 80a0d66:	bf5c      	itt	pl
 80a0d68:	2201      	movpl	r2, #1
 80a0d6a:	601a      	strpl	r2, [r3, #0]
 80a0d6c:	4b10      	ldr	r3, [pc, #64]	; (80a0db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0d6e:	681a      	ldr	r2, [r3, #0]
 80a0d70:	07d1      	lsls	r1, r2, #31
 80a0d72:	bf5c      	itt	pl
 80a0d74:	2201      	movpl	r2, #1
 80a0d76:	601a      	strpl	r2, [r3, #0]
 80a0d78:	4b0e      	ldr	r3, [pc, #56]	; (80a0db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0d7a:	681a      	ldr	r2, [r3, #0]
 80a0d7c:	07d2      	lsls	r2, r2, #31
 80a0d7e:	bf5c      	itt	pl
 80a0d80:	2201      	movpl	r2, #1
 80a0d82:	601a      	strpl	r2, [r3, #0]
 80a0d84:	4770      	bx	lr
 80a0d86:	bf00      	nop
 80a0d88:	20000884 	.word	0x20000884
 80a0d8c:	20000880 	.word	0x20000880
 80a0d90:	2000087c 	.word	0x2000087c
 80a0d94:	20000878 	.word	0x20000878
 80a0d98:	20000874 	.word	0x20000874
 80a0d9c:	20000870 	.word	0x20000870
 80a0da0:	2000086c 	.word	0x2000086c
 80a0da4:	20000868 	.word	0x20000868
 80a0da8:	20000864 	.word	0x20000864
 80a0dac:	20000860 	.word	0x20000860
 80a0db0:	2000085c 	.word	0x2000085c
 80a0db4:	20000858 	.word	0x20000858

080a0db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0db8:	4b18      	ldr	r3, [pc, #96]	; (80a0e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0dba:	681a      	ldr	r2, [r3, #0]
 80a0dbc:	07d1      	lsls	r1, r2, #31
 80a0dbe:	bf5c      	itt	pl
 80a0dc0:	2201      	movpl	r2, #1
 80a0dc2:	601a      	strpl	r2, [r3, #0]
 80a0dc4:	4b16      	ldr	r3, [pc, #88]	; (80a0e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0dc6:	681a      	ldr	r2, [r3, #0]
 80a0dc8:	07d2      	lsls	r2, r2, #31
 80a0dca:	bf5c      	itt	pl
 80a0dcc:	2201      	movpl	r2, #1
 80a0dce:	601a      	strpl	r2, [r3, #0]
 80a0dd0:	4b14      	ldr	r3, [pc, #80]	; (80a0e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0dd2:	681a      	ldr	r2, [r3, #0]
 80a0dd4:	07d0      	lsls	r0, r2, #31
 80a0dd6:	bf5c      	itt	pl
 80a0dd8:	2201      	movpl	r2, #1
 80a0dda:	601a      	strpl	r2, [r3, #0]
 80a0ddc:	4b12      	ldr	r3, [pc, #72]	; (80a0e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0dde:	681a      	ldr	r2, [r3, #0]
 80a0de0:	07d1      	lsls	r1, r2, #31
 80a0de2:	bf5c      	itt	pl
 80a0de4:	2201      	movpl	r2, #1
 80a0de6:	601a      	strpl	r2, [r3, #0]
 80a0de8:	4b10      	ldr	r3, [pc, #64]	; (80a0e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0dea:	681a      	ldr	r2, [r3, #0]
 80a0dec:	07d2      	lsls	r2, r2, #31
 80a0dee:	bf5c      	itt	pl
 80a0df0:	2201      	movpl	r2, #1
 80a0df2:	601a      	strpl	r2, [r3, #0]
 80a0df4:	4b0e      	ldr	r3, [pc, #56]	; (80a0e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0df6:	681a      	ldr	r2, [r3, #0]
 80a0df8:	07d0      	lsls	r0, r2, #31
 80a0dfa:	bf5c      	itt	pl
 80a0dfc:	2201      	movpl	r2, #1
 80a0dfe:	601a      	strpl	r2, [r3, #0]
 80a0e00:	4b0c      	ldr	r3, [pc, #48]	; (80a0e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0e02:	681a      	ldr	r2, [r3, #0]
 80a0e04:	07d1      	lsls	r1, r2, #31
 80a0e06:	bf5c      	itt	pl
 80a0e08:	2201      	movpl	r2, #1
 80a0e0a:	601a      	strpl	r2, [r3, #0]
 80a0e0c:	4b0a      	ldr	r3, [pc, #40]	; (80a0e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0e0e:	681a      	ldr	r2, [r3, #0]
 80a0e10:	07d2      	lsls	r2, r2, #31
 80a0e12:	bf5c      	itt	pl
 80a0e14:	2201      	movpl	r2, #1
 80a0e16:	601a      	strpl	r2, [r3, #0]
 80a0e18:	4770      	bx	lr
 80a0e1a:	bf00      	nop
 80a0e1c:	200008a4 	.word	0x200008a4
 80a0e20:	200008a0 	.word	0x200008a0
 80a0e24:	2000089c 	.word	0x2000089c
 80a0e28:	20000898 	.word	0x20000898
 80a0e2c:	20000894 	.word	0x20000894
 80a0e30:	20000890 	.word	0x20000890
 80a0e34:	2000088c 	.word	0x2000088c
 80a0e38:	20000888 	.word	0x20000888

080a0e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0e3c:	4b18      	ldr	r3, [pc, #96]	; (80a0ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0e3e:	681a      	ldr	r2, [r3, #0]
 80a0e40:	07d1      	lsls	r1, r2, #31
 80a0e42:	bf5c      	itt	pl
 80a0e44:	2201      	movpl	r2, #1
 80a0e46:	601a      	strpl	r2, [r3, #0]
 80a0e48:	4b16      	ldr	r3, [pc, #88]	; (80a0ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0e4a:	681a      	ldr	r2, [r3, #0]
 80a0e4c:	07d2      	lsls	r2, r2, #31
 80a0e4e:	bf5c      	itt	pl
 80a0e50:	2201      	movpl	r2, #1
 80a0e52:	601a      	strpl	r2, [r3, #0]
 80a0e54:	4b14      	ldr	r3, [pc, #80]	; (80a0ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0e56:	681a      	ldr	r2, [r3, #0]
 80a0e58:	07d0      	lsls	r0, r2, #31
 80a0e5a:	bf5c      	itt	pl
 80a0e5c:	2201      	movpl	r2, #1
 80a0e5e:	601a      	strpl	r2, [r3, #0]
 80a0e60:	4b12      	ldr	r3, [pc, #72]	; (80a0eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0e62:	681a      	ldr	r2, [r3, #0]
 80a0e64:	07d1      	lsls	r1, r2, #31
 80a0e66:	bf5c      	itt	pl
 80a0e68:	2201      	movpl	r2, #1
 80a0e6a:	601a      	strpl	r2, [r3, #0]
 80a0e6c:	4b10      	ldr	r3, [pc, #64]	; (80a0eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0e6e:	681a      	ldr	r2, [r3, #0]
 80a0e70:	07d2      	lsls	r2, r2, #31
 80a0e72:	bf5c      	itt	pl
 80a0e74:	2201      	movpl	r2, #1
 80a0e76:	601a      	strpl	r2, [r3, #0]
 80a0e78:	4b0e      	ldr	r3, [pc, #56]	; (80a0eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0e7a:	681a      	ldr	r2, [r3, #0]
 80a0e7c:	07d0      	lsls	r0, r2, #31
 80a0e7e:	bf5c      	itt	pl
 80a0e80:	2201      	movpl	r2, #1
 80a0e82:	601a      	strpl	r2, [r3, #0]
 80a0e84:	4b0c      	ldr	r3, [pc, #48]	; (80a0eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0e86:	681a      	ldr	r2, [r3, #0]
 80a0e88:	07d1      	lsls	r1, r2, #31
 80a0e8a:	bf5c      	itt	pl
 80a0e8c:	2201      	movpl	r2, #1
 80a0e8e:	601a      	strpl	r2, [r3, #0]
 80a0e90:	4b0a      	ldr	r3, [pc, #40]	; (80a0ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0e92:	681a      	ldr	r2, [r3, #0]
 80a0e94:	07d2      	lsls	r2, r2, #31
 80a0e96:	bf5c      	itt	pl
 80a0e98:	2201      	movpl	r2, #1
 80a0e9a:	601a      	strpl	r2, [r3, #0]
 80a0e9c:	4770      	bx	lr
 80a0e9e:	bf00      	nop
 80a0ea0:	200008c4 	.word	0x200008c4
 80a0ea4:	200008c0 	.word	0x200008c0
 80a0ea8:	200008bc 	.word	0x200008bc
 80a0eac:	200008b8 	.word	0x200008b8
 80a0eb0:	200008b4 	.word	0x200008b4
 80a0eb4:	200008b0 	.word	0x200008b0
 80a0eb8:	200008ac 	.word	0x200008ac
 80a0ebc:	200008a8 	.word	0x200008a8

080a0ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a0ec0:	4b24      	ldr	r3, [pc, #144]	; (80a0f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a0ec2:	681a      	ldr	r2, [r3, #0]
 80a0ec4:	07d0      	lsls	r0, r2, #31
 80a0ec6:	bf5c      	itt	pl
 80a0ec8:	2201      	movpl	r2, #1
 80a0eca:	601a      	strpl	r2, [r3, #0]
 80a0ecc:	4b22      	ldr	r3, [pc, #136]	; (80a0f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a0ece:	681a      	ldr	r2, [r3, #0]
 80a0ed0:	07d1      	lsls	r1, r2, #31
 80a0ed2:	bf5c      	itt	pl
 80a0ed4:	2201      	movpl	r2, #1
 80a0ed6:	601a      	strpl	r2, [r3, #0]
 80a0ed8:	4b20      	ldr	r3, [pc, #128]	; (80a0f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a0eda:	681a      	ldr	r2, [r3, #0]
 80a0edc:	07d2      	lsls	r2, r2, #31
 80a0ede:	bf5c      	itt	pl
 80a0ee0:	2201      	movpl	r2, #1
 80a0ee2:	601a      	strpl	r2, [r3, #0]
 80a0ee4:	4b1e      	ldr	r3, [pc, #120]	; (80a0f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a0ee6:	681a      	ldr	r2, [r3, #0]
 80a0ee8:	07d0      	lsls	r0, r2, #31
 80a0eea:	bf5c      	itt	pl
 80a0eec:	2201      	movpl	r2, #1
 80a0eee:	601a      	strpl	r2, [r3, #0]
 80a0ef0:	4b1c      	ldr	r3, [pc, #112]	; (80a0f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a0ef2:	681a      	ldr	r2, [r3, #0]
 80a0ef4:	07d1      	lsls	r1, r2, #31
 80a0ef6:	bf5c      	itt	pl
 80a0ef8:	2201      	movpl	r2, #1
 80a0efa:	601a      	strpl	r2, [r3, #0]
 80a0efc:	4b1a      	ldr	r3, [pc, #104]	; (80a0f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a0efe:	681a      	ldr	r2, [r3, #0]
 80a0f00:	07d2      	lsls	r2, r2, #31
 80a0f02:	bf5c      	itt	pl
 80a0f04:	2201      	movpl	r2, #1
 80a0f06:	601a      	strpl	r2, [r3, #0]
 80a0f08:	4b18      	ldr	r3, [pc, #96]	; (80a0f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a0f0a:	681a      	ldr	r2, [r3, #0]
 80a0f0c:	07d0      	lsls	r0, r2, #31
 80a0f0e:	bf5c      	itt	pl
 80a0f10:	2201      	movpl	r2, #1
 80a0f12:	601a      	strpl	r2, [r3, #0]
 80a0f14:	4b16      	ldr	r3, [pc, #88]	; (80a0f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a0f16:	681a      	ldr	r2, [r3, #0]
 80a0f18:	07d1      	lsls	r1, r2, #31
 80a0f1a:	bf5c      	itt	pl
 80a0f1c:	2201      	movpl	r2, #1
 80a0f1e:	601a      	strpl	r2, [r3, #0]
 80a0f20:	4b14      	ldr	r3, [pc, #80]	; (80a0f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a0f22:	681a      	ldr	r2, [r3, #0]
 80a0f24:	07d2      	lsls	r2, r2, #31
 80a0f26:	bf5c      	itt	pl
 80a0f28:	2201      	movpl	r2, #1
 80a0f2a:	601a      	strpl	r2, [r3, #0]
 80a0f2c:	4b12      	ldr	r3, [pc, #72]	; (80a0f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a0f2e:	681a      	ldr	r2, [r3, #0]
 80a0f30:	07d0      	lsls	r0, r2, #31
 80a0f32:	bf5c      	itt	pl
 80a0f34:	2201      	movpl	r2, #1
 80a0f36:	601a      	strpl	r2, [r3, #0]
 80a0f38:	4b10      	ldr	r3, [pc, #64]	; (80a0f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a0f3a:	681a      	ldr	r2, [r3, #0]
 80a0f3c:	07d1      	lsls	r1, r2, #31
 80a0f3e:	bf5c      	itt	pl
 80a0f40:	2201      	movpl	r2, #1
 80a0f42:	601a      	strpl	r2, [r3, #0]
 80a0f44:	4b0e      	ldr	r3, [pc, #56]	; (80a0f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a0f46:	681a      	ldr	r2, [r3, #0]
 80a0f48:	07d2      	lsls	r2, r2, #31
 80a0f4a:	bf5c      	itt	pl
 80a0f4c:	2201      	movpl	r2, #1
 80a0f4e:	601a      	strpl	r2, [r3, #0]
 80a0f50:	4770      	bx	lr
 80a0f52:	bf00      	nop
 80a0f54:	200008f4 	.word	0x200008f4
 80a0f58:	200008f0 	.word	0x200008f0
 80a0f5c:	200008ec 	.word	0x200008ec
 80a0f60:	200008e8 	.word	0x200008e8
 80a0f64:	200008e4 	.word	0x200008e4
 80a0f68:	200008e0 	.word	0x200008e0
 80a0f6c:	200008dc 	.word	0x200008dc
 80a0f70:	200008d8 	.word	0x200008d8
 80a0f74:	200008d4 	.word	0x200008d4
 80a0f78:	200008d0 	.word	0x200008d0
 80a0f7c:	200008cc 	.word	0x200008cc
 80a0f80:	200008c8 	.word	0x200008c8

080a0f84 <atoi>:
 80a0f84:	220a      	movs	r2, #10
 80a0f86:	2100      	movs	r1, #0
 80a0f88:	f000 b8d8 	b.w	80a113c <strtol>

080a0f8c <__cxa_atexit>:
 80a0f8c:	b510      	push	{r4, lr}
 80a0f8e:	4c05      	ldr	r4, [pc, #20]	; (80a0fa4 <__cxa_atexit+0x18>)
 80a0f90:	4613      	mov	r3, r2
 80a0f92:	b12c      	cbz	r4, 80a0fa0 <__cxa_atexit+0x14>
 80a0f94:	460a      	mov	r2, r1
 80a0f96:	4601      	mov	r1, r0
 80a0f98:	2002      	movs	r0, #2
 80a0f9a:	f3af 8000 	nop.w
 80a0f9e:	bd10      	pop	{r4, pc}
 80a0fa0:	4620      	mov	r0, r4
 80a0fa2:	bd10      	pop	{r4, pc}
 80a0fa4:	00000000 	.word	0x00000000

080a0fa8 <memcpy>:
 80a0fa8:	b510      	push	{r4, lr}
 80a0faa:	1e43      	subs	r3, r0, #1
 80a0fac:	440a      	add	r2, r1
 80a0fae:	4291      	cmp	r1, r2
 80a0fb0:	d004      	beq.n	80a0fbc <memcpy+0x14>
 80a0fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a0fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a0fba:	e7f8      	b.n	80a0fae <memcpy+0x6>
 80a0fbc:	bd10      	pop	{r4, pc}

080a0fbe <memset>:
 80a0fbe:	4603      	mov	r3, r0
 80a0fc0:	4402      	add	r2, r0
 80a0fc2:	4293      	cmp	r3, r2
 80a0fc4:	d002      	beq.n	80a0fcc <memset+0xe>
 80a0fc6:	f803 1b01 	strb.w	r1, [r3], #1
 80a0fca:	e7fa      	b.n	80a0fc2 <memset+0x4>
 80a0fcc:	4770      	bx	lr
	...

080a0fd0 <srand>:
 80a0fd0:	b538      	push	{r3, r4, r5, lr}
 80a0fd2:	4b12      	ldr	r3, [pc, #72]	; (80a101c <srand+0x4c>)
 80a0fd4:	4605      	mov	r5, r0
 80a0fd6:	681c      	ldr	r4, [r3, #0]
 80a0fd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a0fda:	b9d3      	cbnz	r3, 80a1012 <srand+0x42>
 80a0fdc:	2018      	movs	r0, #24
 80a0fde:	f7ff fa5b 	bl	80a0498 <malloc>
 80a0fe2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a0fe6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a0fe8:	8003      	strh	r3, [r0, #0]
 80a0fea:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a0fee:	8043      	strh	r3, [r0, #2]
 80a0ff0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a0ff4:	8083      	strh	r3, [r0, #4]
 80a0ff6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a0ffa:	80c3      	strh	r3, [r0, #6]
 80a0ffc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1000:	8103      	strh	r3, [r0, #8]
 80a1002:	2305      	movs	r3, #5
 80a1004:	8143      	strh	r3, [r0, #10]
 80a1006:	230b      	movs	r3, #11
 80a1008:	8183      	strh	r3, [r0, #12]
 80a100a:	2201      	movs	r2, #1
 80a100c:	2300      	movs	r3, #0
 80a100e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1012:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1014:	2200      	movs	r2, #0
 80a1016:	611d      	str	r5, [r3, #16]
 80a1018:	615a      	str	r2, [r3, #20]
 80a101a:	bd38      	pop	{r3, r4, r5, pc}
 80a101c:	20000368 	.word	0x20000368

080a1020 <strlen>:
 80a1020:	4603      	mov	r3, r0
 80a1022:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1026:	2a00      	cmp	r2, #0
 80a1028:	d1fb      	bne.n	80a1022 <strlen+0x2>
 80a102a:	1a18      	subs	r0, r3, r0
 80a102c:	3801      	subs	r0, #1
 80a102e:	4770      	bx	lr

080a1030 <_strtol_r>:
 80a1030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1034:	460f      	mov	r7, r1
 80a1036:	4680      	mov	r8, r0
 80a1038:	483f      	ldr	r0, [pc, #252]	; (80a1138 <_strtol_r+0x108>)
 80a103a:	f8d0 9000 	ldr.w	r9, [r0]
 80a103e:	463d      	mov	r5, r7
 80a1040:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1044:	eb09 0004 	add.w	r0, r9, r4
 80a1048:	7840      	ldrb	r0, [r0, #1]
 80a104a:	f000 0008 	and.w	r0, r0, #8
 80a104e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a1052:	b108      	cbz	r0, 80a1058 <_strtol_r+0x28>
 80a1054:	462f      	mov	r7, r5
 80a1056:	e7f2      	b.n	80a103e <_strtol_r+0xe>
 80a1058:	2c2d      	cmp	r4, #45	; 0x2d
 80a105a:	d103      	bne.n	80a1064 <_strtol_r+0x34>
 80a105c:	1cbd      	adds	r5, r7, #2
 80a105e:	787c      	ldrb	r4, [r7, #1]
 80a1060:	2601      	movs	r6, #1
 80a1062:	e003      	b.n	80a106c <_strtol_r+0x3c>
 80a1064:	2c2b      	cmp	r4, #43	; 0x2b
 80a1066:	bf04      	itt	eq
 80a1068:	787c      	ldrbeq	r4, [r7, #1]
 80a106a:	1cbd      	addeq	r5, r7, #2
 80a106c:	b113      	cbz	r3, 80a1074 <_strtol_r+0x44>
 80a106e:	2b10      	cmp	r3, #16
 80a1070:	d10a      	bne.n	80a1088 <_strtol_r+0x58>
 80a1072:	e05b      	b.n	80a112c <_strtol_r+0xfc>
 80a1074:	2c30      	cmp	r4, #48	; 0x30
 80a1076:	d157      	bne.n	80a1128 <_strtol_r+0xf8>
 80a1078:	7828      	ldrb	r0, [r5, #0]
 80a107a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a107e:	2858      	cmp	r0, #88	; 0x58
 80a1080:	d14d      	bne.n	80a111e <_strtol_r+0xee>
 80a1082:	786c      	ldrb	r4, [r5, #1]
 80a1084:	2310      	movs	r3, #16
 80a1086:	3502      	adds	r5, #2
 80a1088:	2e00      	cmp	r6, #0
 80a108a:	bf14      	ite	ne
 80a108c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a1090:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a1094:	fbbc faf3 	udiv	sl, ip, r3
 80a1098:	2700      	movs	r7, #0
 80a109a:	4638      	mov	r0, r7
 80a109c:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a10a0:	eb09 0e04 	add.w	lr, r9, r4
 80a10a4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a10a8:	f01e 0f04 	tst.w	lr, #4
 80a10ac:	d001      	beq.n	80a10b2 <_strtol_r+0x82>
 80a10ae:	3c30      	subs	r4, #48	; 0x30
 80a10b0:	e00b      	b.n	80a10ca <_strtol_r+0x9a>
 80a10b2:	f01e 0e03 	ands.w	lr, lr, #3
 80a10b6:	d01b      	beq.n	80a10f0 <_strtol_r+0xc0>
 80a10b8:	f1be 0f01 	cmp.w	lr, #1
 80a10bc:	bf0c      	ite	eq
 80a10be:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a10c2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a10c6:	ebce 0404 	rsb	r4, lr, r4
 80a10ca:	42a3      	cmp	r3, r4
 80a10cc:	dd10      	ble.n	80a10f0 <_strtol_r+0xc0>
 80a10ce:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a10d2:	d00a      	beq.n	80a10ea <_strtol_r+0xba>
 80a10d4:	4550      	cmp	r0, sl
 80a10d6:	d806      	bhi.n	80a10e6 <_strtol_r+0xb6>
 80a10d8:	d101      	bne.n	80a10de <_strtol_r+0xae>
 80a10da:	4564      	cmp	r4, ip
 80a10dc:	dc03      	bgt.n	80a10e6 <_strtol_r+0xb6>
 80a10de:	fb03 4000 	mla	r0, r3, r0, r4
 80a10e2:	2701      	movs	r7, #1
 80a10e4:	e001      	b.n	80a10ea <_strtol_r+0xba>
 80a10e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a10ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a10ee:	e7d7      	b.n	80a10a0 <_strtol_r+0x70>
 80a10f0:	1c7b      	adds	r3, r7, #1
 80a10f2:	d10c      	bne.n	80a110e <_strtol_r+0xde>
 80a10f4:	2e00      	cmp	r6, #0
 80a10f6:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a10fa:	bf14      	ite	ne
 80a10fc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a1100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1104:	f8c8 3000 	str.w	r3, [r8]
 80a1108:	b92a      	cbnz	r2, 80a1116 <_strtol_r+0xe6>
 80a110a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a110e:	b106      	cbz	r6, 80a1112 <_strtol_r+0xe2>
 80a1110:	4240      	negs	r0, r0
 80a1112:	b172      	cbz	r2, 80a1132 <_strtol_r+0x102>
 80a1114:	b107      	cbz	r7, 80a1118 <_strtol_r+0xe8>
 80a1116:	1e69      	subs	r1, r5, #1
 80a1118:	6011      	str	r1, [r2, #0]
 80a111a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a111e:	2430      	movs	r4, #48	; 0x30
 80a1120:	2b00      	cmp	r3, #0
 80a1122:	d1b1      	bne.n	80a1088 <_strtol_r+0x58>
 80a1124:	2308      	movs	r3, #8
 80a1126:	e7af      	b.n	80a1088 <_strtol_r+0x58>
 80a1128:	230a      	movs	r3, #10
 80a112a:	e7ad      	b.n	80a1088 <_strtol_r+0x58>
 80a112c:	2c30      	cmp	r4, #48	; 0x30
 80a112e:	d0a3      	beq.n	80a1078 <_strtol_r+0x48>
 80a1130:	e7aa      	b.n	80a1088 <_strtol_r+0x58>
 80a1132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1136:	bf00      	nop
 80a1138:	20000304 	.word	0x20000304

080a113c <strtol>:
 80a113c:	4613      	mov	r3, r2
 80a113e:	460a      	mov	r2, r1
 80a1140:	4601      	mov	r1, r0
 80a1142:	4802      	ldr	r0, [pc, #8]	; (80a114c <strtol+0x10>)
 80a1144:	6800      	ldr	r0, [r0, #0]
 80a1146:	f7ff bf73 	b.w	80a1030 <_strtol_r>
 80a114a:	bf00      	nop
 80a114c:	20000368 	.word	0x20000368

080a1150 <dynalib_user>:
 80a1150:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a1160:	00000000 6c6c6548 6172206f 546e6576     ....Hello ravenT
 80a1170:	53002154 72616e6f 6e6f6320 7463656e     T!.Sonar connect
 80a1180:	53006465 74726174 4500203a 203a646e     ed.Start: .End: 
 80a1190:	616c4500 64657370 4200203a 203a6675     .Elapsed: .Buf: 
 80a11a0:	72615000 3a646573 00000020              .Parsed: ...

080a11ac <_ZTV7TwoWire>:
	...
 80a11b4:	080a04d1 080a051b 080a04f3 080a04d3     ................
 80a11c4:	080a04fb 080a0503 080a050b 080a0513     ................

080a11d4 <_ZTV9IPAddress>:
	...
 80a11dc:	080a0563 080a0555 080a0557 6e6c0066     c...U...W...f.ln
 80a11ec:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a11fc:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
 80a120c:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 80a121c:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
 80a122c:	75616200 65530064 6c616972 42535500     .baud.Serial.USB
 80a123c:	69726553 00316c61 65707974 72617000     Serial1.type.par
 80a124c:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80a125c:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80a126c:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80a127c:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80a128c:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 80a129c:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 80a12ac:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 80a12bc:	6f727265 61700072 0063696e 006c6c61     error.panic.all.

080a12cc <_ZTV8SPIClass>:
	...
 80a12d4:	080a074d 080a074f 2b25005a 3a643330     M...O...Z.%+03d:
 80a12e4:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 80a12f4:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 80a1304:	00000000                                ....

080a1308 <_ZTV11USARTSerial>:
	...
 80a1310:	080a07e1 080a0805 080a0811 080a05d9     ................
 80a1320:	080a07ed 080a07f9 080a07f3 080a07ff     ................
 80a1330:	080a07e3 080a07e7                       ........

080a1338 <_ZTV9USBSerial>:
	...
 80a1340:	080a08c5 080a0909 080a08e3 080a05d9     ................
 80a1350:	080a08dd 080a08c7 080a08cf 080a0903     ................
 80a1360:	080a08d7 080a08c1                       ........

080a1368 <_ZTVN5spark9WiFiClassE>:
	...
 80a1370:	080a0a37                                7...

080a1374 <_ctype_>:
 80a1374:	20202000 20202020 28282020 20282828     .         ((((( 
 80a1384:	20202020 20202020 20202020 20202020                     
 80a1394:	10108820 10101010 10101010 10101010      ...............
 80a13a4:	04040410 04040404 10040404 10101010     ................
 80a13b4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a13c4:	01010101 01010101 01010101 10101010     ................
 80a13d4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a13e4:	02020202 02020202 02020202 10101010     ................
 80a13f4:	00000020 00000000 00000000 00000000      ...............
	...

080a1478 <__sf_fake_stdin>:
	...

080a1498 <__sf_fake_stdout>:
	...

080a14b8 <__sf_fake_stderr>:
	...
 80a14d8:	00000043                                         C.

080a14da <link_const_variable_data_end>:
	...

080a14dc <link_constructors_location>:
 80a14dc:	080a0209 	.word	0x080a0209
 80a14e0:	080a05c9 	.word	0x080a05c9
 80a14e4:	080a0731 	.word	0x080a0731
 80a14e8:	080a078d 	.word	0x080a078d
 80a14ec:	080a07cd 	.word	0x080a07cd
 80a14f0:	080a0a41 	.word	0x080a0a41
 80a14f4:	080a0c75 	.word	0x080a0c75
 80a14f8:	080a0ca5 	.word	0x080a0ca5
 80a14fc:	080a0cf5 	.word	0x080a0cf5
 80a1500:	080a0db9 	.word	0x080a0db9
 80a1504:	080a0e3d 	.word	0x080a0e3d
 80a1508:	080a0ec1 	.word	0x080a0ec1

080a150c <link_constructors_end>:
 80a150c:	00000000 	.word	0x00000000
