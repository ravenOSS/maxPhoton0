
/Users/raventt/MBP_Projects/arduino/maxPhoton0/target/maxPhoton0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001768  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  080a1780  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000006c  20000300  080a1784  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000190  2000036c  2000036c  0003036c  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a17f0  080a17f0  000217f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a1818  080a1818  00021818  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   0008f5aa  00000000  00000000  0002181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000d531  00000000  00000000  000b0dc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000f1c4  00000000  00000000  000be2f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001ac0  00000000  00000000  000cd4bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00002b60  00000000  00000000  000cef7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000231b5  00000000  00000000  000d1adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001e39b  00000000  00000000  000f4c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a2c39  00000000  00000000  0011302b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000a964  00000000  00000000  001b5c64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	64 13 0a 08                                         d...

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f8c5 	bl	80a11bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f8ca 	bl	80a11d2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a1784 	.word	0x080a1784
 80a004c:	2000036c 	.word	0x2000036c
 80a0050:	2000036c 	.word	0x2000036c
 80a0054:	200004fc 	.word	0x200004fc
 80a0058:	200004fc 	.word	0x200004fc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fe79 	bl	80a0d54 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1744 	.word	0x080a1744
 80a0084:	080a1778 	.word	0x080a1778

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b814 	b.w	80a00b4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f839 	bl	80a0104 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 be1f 	b.w	80a0cd8 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 ba45 	b.w	80a0528 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 ba4b 	b.w	80a0538 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <setup>:
int maxOn = D0;  // Photon output pin to toggle pin 4 on Maxbotix

char buf[5]; // Create buffer to handle RxxxCR

void setup()
{
 80a00b4:	b510      	push	{r4, lr}
  pinMode(maxOn, OUTPUT);
 80a00b6:	4c10      	ldr	r4, [pc, #64]	; (80a00f8 <setup+0x44>)
 80a00b8:	2101      	movs	r1, #1
 80a00ba:	8820      	ldrh	r0, [r4, #0]
 80a00bc:	f000 fe9a 	bl	80a0df4 <pinMode>
  Serial.begin(9600);
 80a00c0:	f000 fd24 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a00c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00c8:	f000 fd14 	bl	80a0af4 <_ZN9USBSerial5beginEl>
  Serial.println("Hello ravenTT!");
 80a00cc:	f000 fd1e 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a00d0:	490a      	ldr	r1, [pc, #40]	; (80a00fc <setup+0x48>)
 80a00d2:	f000 fb90 	bl	80a07f6 <_ZN5Print7printlnEPKc>
  Serial1.begin(9600);
 80a00d6:	f000 fc8f 	bl	80a09f8 <_Z22__fetch_global_Serial1v>
 80a00da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00de:	f000 fc85 	bl	80a09ec <_ZN11USARTSerial5beginEm>
  Serial.println("Sonar connected");
 80a00e2:	f000 fd13 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a00e6:	4906      	ldr	r1, [pc, #24]	; (80a0100 <setup+0x4c>)
 80a00e8:	f000 fb85 	bl	80a07f6 <_ZN5Print7printlnEPKc>
  digitalWrite(maxOn, LOW); // Stop continuous reading mode on sensor
 80a00ec:	8820      	ldrh	r0, [r4, #0]
 80a00ee:	2100      	movs	r1, #0
}
 80a00f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pinMode(maxOn, OUTPUT);
  Serial.begin(9600);
  Serial.println("Hello ravenTT!");
  Serial1.begin(9600);
  Serial.println("Sonar connected");
  digitalWrite(maxOn, LOW); // Stop continuous reading mode on sensor
 80a00f4:	f000 be8f 	b.w	80a0e16 <digitalWrite>
 80a00f8:	20000374 	.word	0x20000374
 80a00fc:	080a1378 	.word	0x080a1378
 80a0100:	080a1387 	.word	0x080a1387

080a0104 <loop>:
}

unsigned long currentMillis = millis(); // Timing and Serial.print's are for debug 

void loop ()
{ 
 80a0104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a0106:	f000 f891 	bl	80a022c <HAL_Timer_Get_Micro_Seconds>
  unsigned long start = micros();
  digitalWrite(maxOn, HIGH); // Bring HIGH to trigger range reading
 80a010a:	4c35      	ldr	r4, [pc, #212]	; (80a01e0 <loop+0xdc>)
 80a010c:	2101      	movs	r1, #1
 80a010e:	4606      	mov	r6, r0
 80a0110:	8820      	ldrh	r0, [r4, #0]
 80a0112:	f000 fe80 	bl	80a0e16 <digitalWrite>
  Serial1.read(); // Only reads one character at a time
 80a0116:	f000 fc6f 	bl	80a09f8 <_Z22__fetch_global_Serial1v>
 80a011a:	6803      	ldr	r3, [r0, #0]
 80a011c:	695b      	ldr	r3, [r3, #20]
 80a011e:	4798      	blx	r3
  if (Serial1.available() >=4) // Only iterate over the range data if there is a minimum of Rxxx
 80a0120:	f000 fc6a 	bl	80a09f8 <_Z22__fetch_global_Serial1v>
 80a0124:	6803      	ldr	r3, [r0, #0]
 80a0126:	691b      	ldr	r3, [r3, #16]
 80a0128:	4798      	blx	r3
 80a012a:	2803      	cmp	r0, #3
 80a012c:	dc4c      	bgt.n	80a01c8 <loop+0xc4>
  {
    for (int i=0; i<4; i++) {
      buf[i] = Serial1.read(); // Push data into buffer
    }
  }
  digitalWrite(maxOn, LOW); // End range reading
 80a012e:	2100      	movs	r1, #0
 80a0130:	8820      	ldrh	r0, [r4, #0]
 80a0132:	f000 fe70 	bl	80a0e16 <digitalWrite>
 80a0136:	f000 f879 	bl	80a022c <HAL_Timer_Get_Micro_Seconds>
 80a013a:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a013c:	f000 f87e 	bl	80a023c <HAL_Timer_Get_Milli_Seconds>
 80a0140:	4604      	mov	r4, r0
    unsigned long end = micros();
    unsigned long elapsed = millis() / (60 * 1000); // millis is the time since code was started
  Serial1.flush();
 80a0142:	f000 fc59 	bl	80a09f8 <_Z22__fetch_global_Serial1v>
 80a0146:	6803      	ldr	r3, [r0, #0]
 80a0148:	69db      	ldr	r3, [r3, #28]
 80a014a:	4798      	blx	r3
  Serial.print("Start: ");
 80a014c:	f000 fcde 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a0150:	4924      	ldr	r1, [pc, #144]	; (80a01e4 <loop+0xe0>)
 80a0152:	f000 fb3d 	bl	80a07d0 <_ZN5Print5printEPKc>
  Serial.println(start);
 80a0156:	f000 fcd9 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a015a:	220a      	movs	r2, #10
 80a015c:	4631      	mov	r1, r6
 80a015e:	f000 fb80 	bl	80a0862 <_ZN5Print7printlnEmi>
  Serial.print("End: ");
 80a0162:	f000 fcd3 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a0166:	4920      	ldr	r1, [pc, #128]	; (80a01e8 <loop+0xe4>)
 80a0168:	f000 fb32 	bl	80a07d0 <_ZN5Print5printEPKc>
  Serial.println(end);
 80a016c:	f000 fcce 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a0170:	220a      	movs	r2, #10
 80a0172:	4629      	mov	r1, r5
 80a0174:	f000 fb75 	bl	80a0862 <_ZN5Print7printlnEmi>
  Serial.print("Elapsed: ");
 80a0178:	f000 fcc8 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a017c:	491b      	ldr	r1, [pc, #108]	; (80a01ec <loop+0xe8>)
 80a017e:	f000 fb27 	bl	80a07d0 <_ZN5Print5printEPKc>
  Serial.println(elapsed);
 80a0182:	f000 fcc3 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a0186:	f64e 2160 	movw	r1, #60000	; 0xea60
 80a018a:	220a      	movs	r2, #10
 80a018c:	fbb4 f1f1 	udiv	r1, r4, r1
 80a0190:	f000 fb67 	bl	80a0862 <_ZN5Print7printlnEmi>

  Serial.println(buf);
 80a0194:	f000 fcba 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a0198:	4915      	ldr	r1, [pc, #84]	; (80a01f0 <loop+0xec>)
 80a019a:	f000 fb2c 	bl	80a07f6 <_ZN5Print7printlnEPKc>
  int data = atoi(buf);
 80a019e:	4814      	ldr	r0, [pc, #80]	; (80a01f0 <loop+0xec>)
 80a01a0:	f000 fffa 	bl	80a1198 <atoi>
 80a01a4:	4604      	mov	r4, r0
  Serial.print("Parsed: ");
 80a01a6:	f000 fcb1 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a01aa:	4912      	ldr	r1, [pc, #72]	; (80a01f4 <loop+0xf0>)
 80a01ac:	f000 fb10 	bl	80a07d0 <_ZN5Print5printEPKc>
  Serial.println(data);
 80a01b0:	f000 fcac 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a01b4:	4621      	mov	r1, r4
 80a01b6:	220a      	movs	r2, #10
 80a01b8:	f000 fb7f 	bl	80a08ba <_ZN5Print7printlnEii>
  delay(1200); // Repeat the process every X milliseconds
}
 80a01bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

  Serial.println(buf);
  int data = atoi(buf);
  Serial.print("Parsed: ");
  Serial.println(data);
  delay(1200); // Repeat the process every X milliseconds
 80a01c0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80a01c4:	f000 b9c0 	b.w	80a0548 <delay>
  digitalWrite(maxOn, HIGH); // Bring HIGH to trigger range reading
  Serial1.read(); // Only reads one character at a time
  if (Serial1.available() >=4) // Only iterate over the range data if there is a minimum of Rxxx
  {
    for (int i=0; i<4; i++) {
      buf[i] = Serial1.read(); // Push data into buffer
 80a01c8:	4f09      	ldr	r7, [pc, #36]	; (80a01f0 <loop+0xec>)
 80a01ca:	2500      	movs	r5, #0
 80a01cc:	f000 fc14 	bl	80a09f8 <_Z22__fetch_global_Serial1v>
 80a01d0:	6803      	ldr	r3, [r0, #0]
 80a01d2:	695b      	ldr	r3, [r3, #20]
 80a01d4:	4798      	blx	r3
 80a01d6:	5578      	strb	r0, [r7, r5]
  unsigned long start = micros();
  digitalWrite(maxOn, HIGH); // Bring HIGH to trigger range reading
  Serial1.read(); // Only reads one character at a time
  if (Serial1.available() >=4) // Only iterate over the range data if there is a minimum of Rxxx
  {
    for (int i=0; i<4; i++) {
 80a01d8:	3501      	adds	r5, #1
 80a01da:	2d04      	cmp	r5, #4
 80a01dc:	d1f6      	bne.n	80a01cc <loop+0xc8>
 80a01de:	e7a6      	b.n	80a012e <loop+0x2a>
 80a01e0:	20000374 	.word	0x20000374
 80a01e4:	080a1397 	.word	0x080a1397
 80a01e8:	080a139f 	.word	0x080a139f
 80a01ec:	080a13a5 	.word	0x080a13a5
 80a01f0:	20000378 	.word	0x20000378
 80a01f4:	080a13af 	.word	0x080a13af

080a01f8 <_GLOBAL__sub_I_maxOn>:
  Serial.println(buf);
  int data = atoi(buf);
  Serial.print("Parsed: ");
  Serial.println(data);
  delay(1200); // Repeat the process every X milliseconds
}
 80a01f8:	b508      	push	{r3, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a01fa:	f000 f827 	bl	80a024c <HAL_Pin_Map>
 80a01fe:	f000 f81d 	bl	80a023c <HAL_Timer_Get_Milli_Seconds>
  Serial1.begin(9600);
  Serial.println("Sonar connected");
  digitalWrite(maxOn, LOW); // Stop continuous reading mode on sensor
}

unsigned long currentMillis = millis(); // Timing and Serial.print's are for debug 
 80a0202:	4b01      	ldr	r3, [pc, #4]	; (80a0208 <_GLOBAL__sub_I_maxOn+0x10>)
 80a0204:	6018      	str	r0, [r3, #0]
 80a0206:	bd08      	pop	{r3, pc}
 80a0208:	20000370 	.word	0x20000370

080a020c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a020c:	b508      	push	{r3, lr}
 80a020e:	4b02      	ldr	r3, [pc, #8]	; (80a0218 <os_mutex_create+0xc>)
 80a0210:	681b      	ldr	r3, [r3, #0]
 80a0212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0214:	9301      	str	r3, [sp, #4]
 80a0216:	bd08      	pop	{r3, pc}
 80a0218:	080601d0 	.word	0x080601d0

080a021c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a021c:	b508      	push	{r3, lr}
 80a021e:	4b02      	ldr	r3, [pc, #8]	; (80a0228 <HAL_RNG_GetRandomNumber+0xc>)
 80a0220:	681b      	ldr	r3, [r3, #0]
 80a0222:	685b      	ldr	r3, [r3, #4]
 80a0224:	9301      	str	r3, [sp, #4]
 80a0226:	bd08      	pop	{r3, pc}
 80a0228:	0806019c 	.word	0x0806019c

080a022c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a022c:	b508      	push	{r3, lr}
 80a022e:	4b02      	ldr	r3, [pc, #8]	; (80a0238 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0230:	681b      	ldr	r3, [r3, #0]
 80a0232:	691b      	ldr	r3, [r3, #16]
 80a0234:	9301      	str	r3, [sp, #4]
 80a0236:	bd08      	pop	{r3, pc}
 80a0238:	0806019c 	.word	0x0806019c

080a023c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a023c:	b508      	push	{r3, lr}
 80a023e:	4b02      	ldr	r3, [pc, #8]	; (80a0248 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0240:	681b      	ldr	r3, [r3, #0]
 80a0242:	695b      	ldr	r3, [r3, #20]
 80a0244:	9301      	str	r3, [sp, #4]
 80a0246:	bd08      	pop	{r3, pc}
 80a0248:	0806019c 	.word	0x0806019c

080a024c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a024c:	b508      	push	{r3, lr}
 80a024e:	4b02      	ldr	r3, [pc, #8]	; (80a0258 <HAL_Pin_Map+0xc>)
 80a0250:	681b      	ldr	r3, [r3, #0]
 80a0252:	681b      	ldr	r3, [r3, #0]
 80a0254:	9301      	str	r3, [sp, #4]
 80a0256:	bd08      	pop	{r3, pc}
 80a0258:	080601b0 	.word	0x080601b0

080a025c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a025c:	b508      	push	{r3, lr}
 80a025e:	4b02      	ldr	r3, [pc, #8]	; (80a0268 <HAL_Pin_Mode+0xc>)
 80a0260:	681b      	ldr	r3, [r3, #0]
 80a0262:	689b      	ldr	r3, [r3, #8]
 80a0264:	9301      	str	r3, [sp, #4]
 80a0266:	bd08      	pop	{r3, pc}
 80a0268:	080601b0 	.word	0x080601b0

080a026c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a026c:	b508      	push	{r3, lr}
 80a026e:	4b02      	ldr	r3, [pc, #8]	; (80a0278 <HAL_Get_Pin_Mode+0xc>)
 80a0270:	681b      	ldr	r3, [r3, #0]
 80a0272:	68db      	ldr	r3, [r3, #12]
 80a0274:	9301      	str	r3, [sp, #4]
 80a0276:	bd08      	pop	{r3, pc}
 80a0278:	080601b0 	.word	0x080601b0

080a027c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a027c:	b508      	push	{r3, lr}
 80a027e:	4b02      	ldr	r3, [pc, #8]	; (80a0288 <HAL_GPIO_Write+0xc>)
 80a0280:	681b      	ldr	r3, [r3, #0]
 80a0282:	691b      	ldr	r3, [r3, #16]
 80a0284:	9301      	str	r3, [sp, #4]
 80a0286:	bd08      	pop	{r3, pc}
 80a0288:	080601b0 	.word	0x080601b0

080a028c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a028c:	b508      	push	{r3, lr}
 80a028e:	4b02      	ldr	r3, [pc, #8]	; (80a0298 <HAL_I2C_Write_Data+0xc>)
 80a0290:	681b      	ldr	r3, [r3, #0]
 80a0292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0294:	9301      	str	r3, [sp, #4]
 80a0296:	bd08      	pop	{r3, pc}
 80a0298:	080601ac 	.word	0x080601ac

080a029c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a029c:	b508      	push	{r3, lr}
 80a029e:	4b02      	ldr	r3, [pc, #8]	; (80a02a8 <HAL_I2C_Available_Data+0xc>)
 80a02a0:	681b      	ldr	r3, [r3, #0]
 80a02a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a02a4:	9301      	str	r3, [sp, #4]
 80a02a6:	bd08      	pop	{r3, pc}
 80a02a8:	080601ac 	.word	0x080601ac

080a02ac <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a02ac:	b508      	push	{r3, lr}
 80a02ae:	4b02      	ldr	r3, [pc, #8]	; (80a02b8 <HAL_I2C_Read_Data+0xc>)
 80a02b0:	681b      	ldr	r3, [r3, #0]
 80a02b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a02b4:	9301      	str	r3, [sp, #4]
 80a02b6:	bd08      	pop	{r3, pc}
 80a02b8:	080601ac 	.word	0x080601ac

080a02bc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a02bc:	b508      	push	{r3, lr}
 80a02be:	4b02      	ldr	r3, [pc, #8]	; (80a02c8 <HAL_I2C_Peek_Data+0xc>)
 80a02c0:	681b      	ldr	r3, [r3, #0]
 80a02c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a02c4:	9301      	str	r3, [sp, #4]
 80a02c6:	bd08      	pop	{r3, pc}
 80a02c8:	080601ac 	.word	0x080601ac

080a02cc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a02cc:	b508      	push	{r3, lr}
 80a02ce:	4b02      	ldr	r3, [pc, #8]	; (80a02d8 <HAL_I2C_Flush_Data+0xc>)
 80a02d0:	681b      	ldr	r3, [r3, #0]
 80a02d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a02d4:	9301      	str	r3, [sp, #4]
 80a02d6:	bd08      	pop	{r3, pc}
 80a02d8:	080601ac 	.word	0x080601ac

080a02dc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a02dc:	b508      	push	{r3, lr}
 80a02de:	4b02      	ldr	r3, [pc, #8]	; (80a02e8 <HAL_I2C_Is_Enabled+0xc>)
 80a02e0:	681b      	ldr	r3, [r3, #0]
 80a02e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a02e4:	9301      	str	r3, [sp, #4]
 80a02e6:	bd08      	pop	{r3, pc}
 80a02e8:	080601ac 	.word	0x080601ac

080a02ec <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a02ec:	b508      	push	{r3, lr}
 80a02ee:	4b03      	ldr	r3, [pc, #12]	; (80a02fc <HAL_I2C_Init+0x10>)
 80a02f0:	681b      	ldr	r3, [r3, #0]
 80a02f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a02f6:	9301      	str	r3, [sp, #4]
 80a02f8:	bd08      	pop	{r3, pc}
 80a02fa:	0000      	.short	0x0000
 80a02fc:	080601ac 	.word	0x080601ac

080a0300 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0300:	b508      	push	{r3, lr}
 80a0302:	4b02      	ldr	r3, [pc, #8]	; (80a030c <HAL_SPI_Init+0xc>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	69db      	ldr	r3, [r3, #28]
 80a0308:	9301      	str	r3, [sp, #4]
 80a030a:	bd08      	pop	{r3, pc}
 80a030c:	080601b4 	.word	0x080601b4

080a0310 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b02      	ldr	r3, [pc, #8]	; (80a031c <HAL_SPI_Is_Enabled+0xc>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	6a1b      	ldr	r3, [r3, #32]
 80a0318:	9301      	str	r3, [sp, #4]
 80a031a:	bd08      	pop	{r3, pc}
 80a031c:	080601b4 	.word	0x080601b4

080a0320 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0320:	b508      	push	{r3, lr}
 80a0322:	4b02      	ldr	r3, [pc, #8]	; (80a032c <HAL_USART_Init+0xc>)
 80a0324:	681b      	ldr	r3, [r3, #0]
 80a0326:	699b      	ldr	r3, [r3, #24]
 80a0328:	9301      	str	r3, [sp, #4]
 80a032a:	bd08      	pop	{r3, pc}
 80a032c:	080601c4 	.word	0x080601c4

080a0330 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0330:	b508      	push	{r3, lr}
 80a0332:	4b02      	ldr	r3, [pc, #8]	; (80a033c <HAL_USART_Write_Data+0xc>)
 80a0334:	681b      	ldr	r3, [r3, #0]
 80a0336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0338:	9301      	str	r3, [sp, #4]
 80a033a:	bd08      	pop	{r3, pc}
 80a033c:	080601c4 	.word	0x080601c4

080a0340 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0340:	b508      	push	{r3, lr}
 80a0342:	4b02      	ldr	r3, [pc, #8]	; (80a034c <HAL_USART_Available_Data+0xc>)
 80a0344:	681b      	ldr	r3, [r3, #0]
 80a0346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0348:	9301      	str	r3, [sp, #4]
 80a034a:	bd08      	pop	{r3, pc}
 80a034c:	080601c4 	.word	0x080601c4

080a0350 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0350:	b508      	push	{r3, lr}
 80a0352:	4b02      	ldr	r3, [pc, #8]	; (80a035c <HAL_USART_Read_Data+0xc>)
 80a0354:	681b      	ldr	r3, [r3, #0]
 80a0356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0358:	9301      	str	r3, [sp, #4]
 80a035a:	bd08      	pop	{r3, pc}
 80a035c:	080601c4 	.word	0x080601c4

080a0360 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0360:	b508      	push	{r3, lr}
 80a0362:	4b02      	ldr	r3, [pc, #8]	; (80a036c <HAL_USART_Peek_Data+0xc>)
 80a0364:	681b      	ldr	r3, [r3, #0]
 80a0366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0368:	9301      	str	r3, [sp, #4]
 80a036a:	bd08      	pop	{r3, pc}
 80a036c:	080601c4 	.word	0x080601c4

080a0370 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0370:	b508      	push	{r3, lr}
 80a0372:	4b02      	ldr	r3, [pc, #8]	; (80a037c <HAL_USART_Flush_Data+0xc>)
 80a0374:	681b      	ldr	r3, [r3, #0]
 80a0376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0378:	9301      	str	r3, [sp, #4]
 80a037a:	bd08      	pop	{r3, pc}
 80a037c:	080601c4 	.word	0x080601c4

080a0380 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0380:	b508      	push	{r3, lr}
 80a0382:	4b02      	ldr	r3, [pc, #8]	; (80a038c <HAL_USART_Is_Enabled+0xc>)
 80a0384:	681b      	ldr	r3, [r3, #0]
 80a0386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0388:	9301      	str	r3, [sp, #4]
 80a038a:	bd08      	pop	{r3, pc}
 80a038c:	080601c4 	.word	0x080601c4

080a0390 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0390:	b508      	push	{r3, lr}
 80a0392:	4b02      	ldr	r3, [pc, #8]	; (80a039c <HAL_USART_Available_Data_For_Write+0xc>)
 80a0394:	681b      	ldr	r3, [r3, #0]
 80a0396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0398:	9301      	str	r3, [sp, #4]
 80a039a:	bd08      	pop	{r3, pc}
 80a039c:	080601c4 	.word	0x080601c4

080a03a0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a03a0:	b508      	push	{r3, lr}
 80a03a2:	4b02      	ldr	r3, [pc, #8]	; (80a03ac <HAL_USART_BeginConfig+0xc>)
 80a03a4:	681b      	ldr	r3, [r3, #0]
 80a03a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a03a8:	9301      	str	r3, [sp, #4]
 80a03aa:	bd08      	pop	{r3, pc}
 80a03ac:	080601c4 	.word	0x080601c4

080a03b0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a03b0:	b508      	push	{r3, lr}
 80a03b2:	4b02      	ldr	r3, [pc, #8]	; (80a03bc <HAL_USB_USART_Init+0xc>)
 80a03b4:	681b      	ldr	r3, [r3, #0]
 80a03b6:	681b      	ldr	r3, [r3, #0]
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	bd08      	pop	{r3, pc}
 80a03bc:	080601d8 	.word	0x080601d8

080a03c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a03c0:	b508      	push	{r3, lr}
 80a03c2:	4b02      	ldr	r3, [pc, #8]	; (80a03cc <HAL_USB_USART_Begin+0xc>)
 80a03c4:	681b      	ldr	r3, [r3, #0]
 80a03c6:	685b      	ldr	r3, [r3, #4]
 80a03c8:	9301      	str	r3, [sp, #4]
 80a03ca:	bd08      	pop	{r3, pc}
 80a03cc:	080601d8 	.word	0x080601d8

080a03d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a03d0:	b508      	push	{r3, lr}
 80a03d2:	4b02      	ldr	r3, [pc, #8]	; (80a03dc <HAL_USB_USART_Available_Data+0xc>)
 80a03d4:	681b      	ldr	r3, [r3, #0]
 80a03d6:	691b      	ldr	r3, [r3, #16]
 80a03d8:	9301      	str	r3, [sp, #4]
 80a03da:	bd08      	pop	{r3, pc}
 80a03dc:	080601d8 	.word	0x080601d8

080a03e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a03e0:	b508      	push	{r3, lr}
 80a03e2:	4b02      	ldr	r3, [pc, #8]	; (80a03ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	695b      	ldr	r3, [r3, #20]
 80a03e8:	9301      	str	r3, [sp, #4]
 80a03ea:	bd08      	pop	{r3, pc}
 80a03ec:	080601d8 	.word	0x080601d8

080a03f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a03f0:	b508      	push	{r3, lr}
 80a03f2:	4b02      	ldr	r3, [pc, #8]	; (80a03fc <HAL_USB_USART_Receive_Data+0xc>)
 80a03f4:	681b      	ldr	r3, [r3, #0]
 80a03f6:	699b      	ldr	r3, [r3, #24]
 80a03f8:	9301      	str	r3, [sp, #4]
 80a03fa:	bd08      	pop	{r3, pc}
 80a03fc:	080601d8 	.word	0x080601d8

080a0400 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0400:	b508      	push	{r3, lr}
 80a0402:	4b02      	ldr	r3, [pc, #8]	; (80a040c <HAL_USB_USART_Send_Data+0xc>)
 80a0404:	681b      	ldr	r3, [r3, #0]
 80a0406:	69db      	ldr	r3, [r3, #28]
 80a0408:	9301      	str	r3, [sp, #4]
 80a040a:	bd08      	pop	{r3, pc}
 80a040c:	080601d8 	.word	0x080601d8

080a0410 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0410:	b508      	push	{r3, lr}
 80a0412:	4b02      	ldr	r3, [pc, #8]	; (80a041c <HAL_USB_USART_Flush_Data+0xc>)
 80a0414:	681b      	ldr	r3, [r3, #0]
 80a0416:	6a1b      	ldr	r3, [r3, #32]
 80a0418:	9301      	str	r3, [sp, #4]
 80a041a:	bd08      	pop	{r3, pc}
 80a041c:	080601d8 	.word	0x080601d8

080a0420 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0420:	b508      	push	{r3, lr}
 80a0422:	4b02      	ldr	r3, [pc, #8]	; (80a042c <inet_gethostbyname+0xc>)
 80a0424:	681b      	ldr	r3, [r3, #0]
 80a0426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0428:	9301      	str	r3, [sp, #4]
 80a042a:	bd08      	pop	{r3, pc}
 80a042c:	080601c0 	.word	0x080601c0

080a0430 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0430:	b508      	push	{r3, lr}
 80a0432:	4b02      	ldr	r3, [pc, #8]	; (80a043c <set_system_mode+0xc>)
 80a0434:	681b      	ldr	r3, [r3, #0]
 80a0436:	685b      	ldr	r3, [r3, #4]
 80a0438:	9301      	str	r3, [sp, #4]
 80a043a:	bd08      	pop	{r3, pc}
 80a043c:	080601a4 	.word	0x080601a4

080a0440 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0440:	b508      	push	{r3, lr}
 80a0442:	4b02      	ldr	r3, [pc, #8]	; (80a044c <system_delay_ms+0xc>)
 80a0444:	681b      	ldr	r3, [r3, #0]
 80a0446:	695b      	ldr	r3, [r3, #20]
 80a0448:	9301      	str	r3, [sp, #4]
 80a044a:	bd08      	pop	{r3, pc}
 80a044c:	080601a4 	.word	0x080601a4

080a0450 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0450:	b508      	push	{r3, lr}
 80a0452:	4b03      	ldr	r3, [pc, #12]	; (80a0460 <system_ctrl_set_app_request_handler+0x10>)
 80a0454:	681b      	ldr	r3, [r3, #0]
 80a0456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a045a:	9301      	str	r3, [sp, #4]
 80a045c:	bd08      	pop	{r3, pc}
 80a045e:	0000      	.short	0x0000
 80a0460:	080601a4 	.word	0x080601a4

080a0464 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0464:	b508      	push	{r3, lr}
 80a0466:	4b03      	ldr	r3, [pc, #12]	; (80a0474 <system_ctrl_set_result+0x10>)
 80a0468:	681b      	ldr	r3, [r3, #0]
 80a046a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a046e:	9301      	str	r3, [sp, #4]
 80a0470:	bd08      	pop	{r3, pc}
 80a0472:	0000      	.short	0x0000
 80a0474:	080601a4 	.word	0x080601a4

080a0478 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601cc 	.word	0x080601cc

080a0488 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <network_connect+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	685b      	ldr	r3, [r3, #4]
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601c8 	.word	0x080601c8

080a0498 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <network_connecting+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	689b      	ldr	r3, [r3, #8]
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601c8 	.word	0x080601c8

080a04a8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <network_disconnect+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	68db      	ldr	r3, [r3, #12]
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	080601c8 	.word	0x080601c8

080a04b8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a04b8:	b508      	push	{r3, lr}
 80a04ba:	4b02      	ldr	r3, [pc, #8]	; (80a04c4 <network_ready+0xc>)
 80a04bc:	681b      	ldr	r3, [r3, #0]
 80a04be:	691b      	ldr	r3, [r3, #16]
 80a04c0:	9301      	str	r3, [sp, #4]
 80a04c2:	bd08      	pop	{r3, pc}
 80a04c4:	080601c8 	.word	0x080601c8

080a04c8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04c8:	b508      	push	{r3, lr}
 80a04ca:	4b02      	ldr	r3, [pc, #8]	; (80a04d4 <network_on+0xc>)
 80a04cc:	681b      	ldr	r3, [r3, #0]
 80a04ce:	695b      	ldr	r3, [r3, #20]
 80a04d0:	9301      	str	r3, [sp, #4]
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	080601c8 	.word	0x080601c8

080a04d8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <network_off+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	699b      	ldr	r3, [r3, #24]
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601c8 	.word	0x080601c8

080a04e8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <network_listen+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	69db      	ldr	r3, [r3, #28]
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601c8 	.word	0x080601c8

080a04f8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <network_listening+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	6a1b      	ldr	r3, [r3, #32]
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601c8 	.word	0x080601c8

080a0508 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <network_set_listen_timeout+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601c8 	.word	0x080601c8

080a0518 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <network_get_listen_timeout+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601c8 	.word	0x080601c8

080a0528 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <malloc+0xc>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	681b      	ldr	r3, [r3, #0]
 80a0530:	9301      	str	r3, [sp, #4]
 80a0532:	bd08      	pop	{r3, pc}
 80a0534:	080601a0 	.word	0x080601a0

080a0538 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <free+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	685b      	ldr	r3, [r3, #4]
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601a0 	.word	0x080601a0

080a0548 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0548:	2100      	movs	r1, #0
 80a054a:	f7ff bf79 	b.w	80a0440 <system_delay_ms>

080a054e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a054e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0550:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0552:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0554:	b113      	cbz	r3, 80a055c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0556:	2203      	movs	r2, #3
 80a0558:	4601      	mov	r1, r0
 80a055a:	4798      	blx	r3
    }
 80a055c:	4620      	mov	r0, r4
 80a055e:	bd10      	pop	{r4, pc}

080a0560 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a0560:	4770      	bx	lr

080a0562 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0564:	4606      	mov	r6, r0
 80a0566:	4615      	mov	r5, r2
 80a0568:	460c      	mov	r4, r1
 80a056a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a056c:	42bc      	cmp	r4, r7
 80a056e:	d006      	beq.n	80a057e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0570:	6833      	ldr	r3, [r6, #0]
 80a0572:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0576:	689b      	ldr	r3, [r3, #8]
 80a0578:	4630      	mov	r0, r6
 80a057a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a057c:	e7f6      	b.n	80a056c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a057e:	4628      	mov	r0, r5
 80a0580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0582 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0582:	2200      	movs	r2, #0
 80a0584:	7c00      	ldrb	r0, [r0, #16]
 80a0586:	f7ff be81 	b.w	80a028c <HAL_I2C_Write_Data>

080a058a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a058a:	2100      	movs	r1, #0
 80a058c:	7c00      	ldrb	r0, [r0, #16]
 80a058e:	f7ff be85 	b.w	80a029c <HAL_I2C_Available_Data>

080a0592 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0592:	2100      	movs	r1, #0
 80a0594:	7c00      	ldrb	r0, [r0, #16]
 80a0596:	f7ff be89 	b.w	80a02ac <HAL_I2C_Read_Data>

080a059a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a059a:	2100      	movs	r1, #0
 80a059c:	7c00      	ldrb	r0, [r0, #16]
 80a059e:	f7ff be8d 	b.w	80a02bc <HAL_I2C_Peek_Data>

080a05a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a05a2:	2100      	movs	r1, #0
 80a05a4:	7c00      	ldrb	r0, [r0, #16]
 80a05a6:	f7ff be91 	b.w	80a02cc <HAL_I2C_Flush_Data>

080a05aa <_ZN7TwoWireD0Ev>:
 80a05aa:	b510      	push	{r4, lr}
 80a05ac:	4604      	mov	r4, r0
 80a05ae:	f7ff fd76 	bl	80a009e <_ZdlPv>
 80a05b2:	4620      	mov	r0, r4
 80a05b4:	bd10      	pop	{r4, pc}
	...

080a05b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a05b8:	b510      	push	{r4, lr}
 80a05ba:	4604      	mov	r4, r0
 80a05bc:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a05be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a05c2:	60a3      	str	r3, [r4, #8]
 80a05c4:	4b04      	ldr	r3, [pc, #16]	; (80a05d8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a05c6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a05c8:	7420      	strb	r0, [r4, #16]
 80a05ca:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a05cc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a05ce:	f7ff fe8d 	bl	80a02ec <HAL_I2C_Init>

}
 80a05d2:	4620      	mov	r0, r4
 80a05d4:	bd10      	pop	{r4, pc}
 80a05d6:	bf00      	nop
 80a05d8:	080a13c0 	.word	0x080a13c0

080a05dc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a05dc:	2100      	movs	r1, #0
 80a05de:	7c00      	ldrb	r0, [r0, #16]
 80a05e0:	f7ff be7c 	b.w	80a02dc <HAL_I2C_Is_Enabled>

080a05e4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a05e4:	4770      	bx	lr

080a05e6 <_ZN9IPAddressD0Ev>:
 80a05e6:	b510      	push	{r4, lr}
 80a05e8:	4604      	mov	r4, r0
 80a05ea:	f7ff fd58 	bl	80a009e <_ZdlPv>
 80a05ee:	4620      	mov	r0, r4
 80a05f0:	bd10      	pop	{r4, pc}

080a05f2 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a05f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a05f4:	460f      	mov	r7, r1
 80a05f6:	f100 0608 	add.w	r6, r0, #8
 80a05fa:	1d05      	adds	r5, r0, #4
 80a05fc:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a05fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0602:	220a      	movs	r2, #10
 80a0604:	4638      	mov	r0, r7
 80a0606:	f000 f92a 	bl	80a085e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a060a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a060c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a060e:	d007      	beq.n	80a0620 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0610:	2c00      	cmp	r4, #0
 80a0612:	d0f4      	beq.n	80a05fe <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0614:	212e      	movs	r1, #46	; 0x2e
 80a0616:	4638      	mov	r0, r7
 80a0618:	f000 f8de 	bl	80a07d8 <_ZN5Print5printEc>
 80a061c:	4404      	add	r4, r0
 80a061e:	e7ee      	b.n	80a05fe <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0620:	4620      	mov	r0, r4
 80a0622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0624 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0624:	b510      	push	{r4, lr}
 80a0626:	4604      	mov	r4, r0
 80a0628:	4b04      	ldr	r3, [pc, #16]	; (80a063c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a062a:	2211      	movs	r2, #17
 80a062c:	f840 3b04 	str.w	r3, [r0], #4
 80a0630:	2100      	movs	r1, #0
 80a0632:	f000 fdce 	bl	80a11d2 <memset>
{
    clear();
}
 80a0636:	4620      	mov	r0, r4
 80a0638:	bd10      	pop	{r4, pc}
 80a063a:	bf00      	nop
 80a063c:	080a13e8 	.word	0x080a13e8

080a0640 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0640:	4603      	mov	r3, r0
 80a0642:	4a07      	ldr	r2, [pc, #28]	; (80a0660 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0644:	b510      	push	{r4, lr}
 80a0646:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a064a:	f101 0210 	add.w	r2, r1, #16
 80a064e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0652:	4291      	cmp	r1, r2
 80a0654:	f843 4b04 	str.w	r4, [r3], #4
 80a0658:	d1f9      	bne.n	80a064e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a065a:	780a      	ldrb	r2, [r1, #0]
 80a065c:	701a      	strb	r2, [r3, #0]
}
 80a065e:	bd10      	pop	{r4, pc}
 80a0660:	080a13e8 	.word	0x080a13e8

080a0664 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0664:	4a02      	ldr	r2, [pc, #8]	; (80a0670 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0666:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0668:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a066a:	2204      	movs	r2, #4
 80a066c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a066e:	4770      	bx	lr
 80a0670:	080a13e8 	.word	0x080a13e8

080a0674 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0674:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0676:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a067a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a067e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0682:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0686:	2304      	movs	r3, #4
 80a0688:	6041      	str	r1, [r0, #4]
 80a068a:	7503      	strb	r3, [r0, #20]
 80a068c:	bd10      	pop	{r4, pc}
	...

080a0690 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0692:	4d04      	ldr	r5, [pc, #16]	; (80a06a4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0694:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0696:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a069a:	9500      	str	r5, [sp, #0]
 80a069c:	f7ff ffea 	bl	80a0674 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a06a0:	b003      	add	sp, #12
 80a06a2:	bd30      	pop	{r4, r5, pc}
 80a06a4:	080a13e8 	.word	0x080a13e8

080a06a8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a06a8:	4a01      	ldr	r2, [pc, #4]	; (80a06b0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a06aa:	4b02      	ldr	r3, [pc, #8]	; (80a06b4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a06ac:	601a      	str	r2, [r3, #0]
 80a06ae:	4770      	bx	lr
 80a06b0:	080a14af 	.word	0x080a14af
 80a06b4:	20000380 	.word	0x20000380

080a06b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a06b8:	2300      	movs	r3, #0
 80a06ba:	461a      	mov	r2, r3
 80a06bc:	6840      	ldr	r0, [r0, #4]
 80a06be:	f7ff bee3 	b.w	80a0488 <network_connect>

080a06c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a06c2:	2200      	movs	r2, #0
 80a06c4:	2102      	movs	r1, #2
 80a06c6:	6840      	ldr	r0, [r0, #4]
 80a06c8:	f7ff beee 	b.w	80a04a8 <network_disconnect>

080a06cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a06cc:	2200      	movs	r2, #0
 80a06ce:	4611      	mov	r1, r2
 80a06d0:	6840      	ldr	r0, [r0, #4]
 80a06d2:	f7ff bee1 	b.w	80a0498 <network_connecting>

080a06d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a06d6:	2200      	movs	r2, #0
 80a06d8:	4611      	mov	r1, r2
 80a06da:	6840      	ldr	r0, [r0, #4]
 80a06dc:	f7ff beec 	b.w	80a04b8 <network_ready>

080a06e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a06e0:	2300      	movs	r3, #0
 80a06e2:	461a      	mov	r2, r3
 80a06e4:	4619      	mov	r1, r3
 80a06e6:	6840      	ldr	r0, [r0, #4]
 80a06e8:	f7ff beee 	b.w	80a04c8 <network_on>

080a06ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a06ec:	2300      	movs	r3, #0
 80a06ee:	461a      	mov	r2, r3
 80a06f0:	4619      	mov	r1, r3
 80a06f2:	6840      	ldr	r0, [r0, #4]
 80a06f4:	f7ff bef0 	b.w	80a04d8 <network_off>

080a06f8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a06f8:	2200      	movs	r2, #0
 80a06fa:	f081 0101 	eor.w	r1, r1, #1
 80a06fe:	6840      	ldr	r0, [r0, #4]
 80a0700:	f7ff bef2 	b.w	80a04e8 <network_listen>

080a0704 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0704:	2200      	movs	r2, #0
 80a0706:	6840      	ldr	r0, [r0, #4]
 80a0708:	f7ff befe 	b.w	80a0508 <network_set_listen_timeout>

080a070c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a070c:	2200      	movs	r2, #0
 80a070e:	4611      	mov	r1, r2
 80a0710:	6840      	ldr	r0, [r0, #4]
 80a0712:	f7ff bf01 	b.w	80a0518 <network_get_listen_timeout>

080a0716 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0716:	2200      	movs	r2, #0
 80a0718:	4611      	mov	r1, r2
 80a071a:	6840      	ldr	r0, [r0, #4]
 80a071c:	f7ff beec 	b.w	80a04f8 <network_listening>

080a0720 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0720:	b570      	push	{r4, r5, r6, lr}
 80a0722:	4616      	mov	r6, r2
 80a0724:	b08e      	sub	sp, #56	; 0x38
 80a0726:	4604      	mov	r4, r0
    IPAddress addr;
 80a0728:	a808      	add	r0, sp, #32
 80a072a:	f7ff ff7b 	bl	80a0624 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a072e:	2211      	movs	r2, #17
 80a0730:	2100      	movs	r1, #0
 80a0732:	a803      	add	r0, sp, #12
 80a0734:	f000 fd4d 	bl	80a11d2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0738:	4630      	mov	r0, r6
 80a073a:	f000 fd7b 	bl	80a1234 <strlen>
 80a073e:	2500      	movs	r5, #0
 80a0740:	4b0a      	ldr	r3, [pc, #40]	; (80a076c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0742:	9500      	str	r5, [sp, #0]
 80a0744:	b281      	uxth	r1, r0
 80a0746:	685b      	ldr	r3, [r3, #4]
 80a0748:	aa03      	add	r2, sp, #12
 80a074a:	4630      	mov	r0, r6
 80a074c:	f7ff fe68 	bl	80a0420 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0750:	b120      	cbz	r0, 80a075c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0752:	4629      	mov	r1, r5
 80a0754:	4620      	mov	r0, r4
 80a0756:	f7ff ff85 	bl	80a0664 <_ZN9IPAddressC1Em>
 80a075a:	e003      	b.n	80a0764 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a075c:	a903      	add	r1, sp, #12
 80a075e:	4620      	mov	r0, r4
 80a0760:	f7ff ff6e 	bl	80a0640 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0764:	4620      	mov	r0, r4
 80a0766:	b00e      	add	sp, #56	; 0x38
 80a0768:	bd70      	pop	{r4, r5, r6, pc}
 80a076a:	bf00      	nop
 80a076c:	200003f8 	.word	0x200003f8

080a0770 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0770:	4b02      	ldr	r3, [pc, #8]	; (80a077c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0772:	4a03      	ldr	r2, [pc, #12]	; (80a0780 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0774:	601a      	str	r2, [r3, #0]
 80a0776:	2200      	movs	r2, #0
 80a0778:	605a      	str	r2, [r3, #4]
 80a077a:	4770      	bx	lr
 80a077c:	20000384 	.word	0x20000384
 80a0780:	080a14e0 	.word	0x080a14e0

080a0784 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0786:	4606      	mov	r6, r0
 80a0788:	460d      	mov	r5, r1
 80a078a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a078c:	2400      	movs	r4, #0
  while (size--) {
 80a078e:	42bd      	cmp	r5, r7
 80a0790:	d00c      	beq.n	80a07ac <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0792:	6833      	ldr	r3, [r6, #0]
 80a0794:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0798:	689b      	ldr	r3, [r3, #8]
 80a079a:	4630      	mov	r0, r6
 80a079c:	4798      	blx	r3
     if (chunk>=0)
 80a079e:	2800      	cmp	r0, #0
 80a07a0:	db01      	blt.n	80a07a6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a07a2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a07a4:	e7f3      	b.n	80a078e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a07a6:	2c00      	cmp	r4, #0
 80a07a8:	bf08      	it	eq
 80a07aa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a07ac:	4620      	mov	r0, r4
 80a07ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a07b0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a07b0:	b570      	push	{r4, r5, r6, lr}
 80a07b2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a07b4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a07b6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a07b8:	b149      	cbz	r1, 80a07ce <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a07ba:	f000 fd3b 	bl	80a1234 <strlen>
 80a07be:	682b      	ldr	r3, [r5, #0]
 80a07c0:	4602      	mov	r2, r0
 80a07c2:	4621      	mov	r1, r4
 80a07c4:	4628      	mov	r0, r5
    }
 80a07c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a07ca:	68db      	ldr	r3, [r3, #12]
 80a07cc:	4718      	bx	r3
    }
 80a07ce:	bd70      	pop	{r4, r5, r6, pc}

080a07d0 <_ZN5Print5printEPKc>:
 80a07d0:	b508      	push	{r3, lr}
 80a07d2:	f7ff ffed 	bl	80a07b0 <_ZN5Print5writeEPKc>
 80a07d6:	bd08      	pop	{r3, pc}

080a07d8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a07d8:	6803      	ldr	r3, [r0, #0]
 80a07da:	689b      	ldr	r3, [r3, #8]
 80a07dc:	4718      	bx	r3

080a07de <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07de:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a07e0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a07e2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a07e4:	f7ff fff8 	bl	80a07d8 <_ZN5Print5printEc>
  n += print('\n');
 80a07e8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a07ea:	4604      	mov	r4, r0
  n += print('\n');
 80a07ec:	4628      	mov	r0, r5
 80a07ee:	f7ff fff3 	bl	80a07d8 <_ZN5Print5printEc>
  return n;
}
 80a07f2:	4420      	add	r0, r4
 80a07f4:	bd38      	pop	{r3, r4, r5, pc}

080a07f6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a07f6:	b538      	push	{r3, r4, r5, lr}
 80a07f8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a07fa:	f7ff ffd9 	bl	80a07b0 <_ZN5Print5writeEPKc>
 80a07fe:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a0800:	4628      	mov	r0, r5
 80a0802:	f7ff ffec 	bl	80a07de <_ZN5Print7printlnEv>
  return n;
}
 80a0806:	4420      	add	r0, r4
 80a0808:	bd38      	pop	{r3, r4, r5, pc}

080a080a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a080a:	2a01      	cmp	r2, #1
 80a080c:	bf98      	it	ls
 80a080e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0810:	b530      	push	{r4, r5, lr}
 80a0812:	460b      	mov	r3, r1
 80a0814:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0816:	2100      	movs	r1, #0
 80a0818:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a081c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a0820:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a0824:	fb05 3312 	mls	r3, r5, r2, r3
 80a0828:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a082a:	2b09      	cmp	r3, #9
 80a082c:	bf94      	ite	ls
 80a082e:	3330      	addls	r3, #48	; 0x30
 80a0830:	3337      	addhi	r3, #55	; 0x37
 80a0832:	b2db      	uxtb	r3, r3
 80a0834:	4621      	mov	r1, r4
 80a0836:	f804 3901 	strb.w	r3, [r4], #-1
 80a083a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a083c:	2d00      	cmp	r5, #0
 80a083e:	d1ef      	bne.n	80a0820 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0840:	f7ff ffb6 	bl	80a07b0 <_ZN5Print5writeEPKc>
}
 80a0844:	b00b      	add	sp, #44	; 0x2c
 80a0846:	bd30      	pop	{r4, r5, pc}

080a0848 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a0848:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a084a:	b922      	cbnz	r2, 80a0856 <_ZN5Print5printEmi+0xe>
 80a084c:	6803      	ldr	r3, [r0, #0]
 80a084e:	b2c9      	uxtb	r1, r1
 80a0850:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a0852:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a0854:	4718      	bx	r3
  else return printNumber(n, base);
 80a0856:	b2d2      	uxtb	r2, r2
}
 80a0858:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a085a:	f7ff bfd6 	b.w	80a080a <_ZN5Print11printNumberEmh>

080a085e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a085e:	f7ff bff3 	b.w	80a0848 <_ZN5Print5printEmi>

080a0862 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 80a0862:	b538      	push	{r3, r4, r5, lr}
 80a0864:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a0866:	f7ff ffef 	bl	80a0848 <_ZN5Print5printEmi>
 80a086a:	4604      	mov	r4, r0
  n += println();
 80a086c:	4628      	mov	r0, r5
 80a086e:	f7ff ffb6 	bl	80a07de <_ZN5Print7printlnEv>
  return n;
}
 80a0872:	4420      	add	r0, r4
 80a0874:	bd38      	pop	{r3, r4, r5, pc}

080a0876 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a0876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a087a:	4607      	mov	r7, r0
 80a087c:	460e      	mov	r6, r1
  if (base == 0) {
 80a087e:	4615      	mov	r5, r2
 80a0880:	b92a      	cbnz	r2, 80a088e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a0882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a0886:	6803      	ldr	r3, [r0, #0]
 80a0888:	b2c9      	uxtb	r1, r1
 80a088a:	689b      	ldr	r3, [r3, #8]
 80a088c:	4718      	bx	r3
  } else if (base == 10) {
 80a088e:	2a0a      	cmp	r2, #10
 80a0890:	d102      	bne.n	80a0898 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a0892:	2900      	cmp	r1, #0
 80a0894:	da01      	bge.n	80a089a <_ZN5Print5printEli+0x24>
 80a0896:	e004      	b.n	80a08a2 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a0898:	b2d2      	uxtb	r2, r2
  }
}
 80a089a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a089e:	f7ff bfb4 	b.w	80a080a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a08a2:	212d      	movs	r1, #45	; 0x2d
 80a08a4:	f7ff ff98 	bl	80a07d8 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a08a8:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a08aa:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a08ac:	4271      	negs	r1, r6
 80a08ae:	4638      	mov	r0, r7
 80a08b0:	f7ff ffab 	bl	80a080a <_ZN5Print11printNumberEmh>
 80a08b4:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a08b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a08ba <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a08ba:	b538      	push	{r3, r4, r5, lr}
 80a08bc:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a08be:	f7ff ffda 	bl	80a0876 <_ZN5Print5printEli>
 80a08c2:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a08c4:	4628      	mov	r0, r5
 80a08c6:	f7ff ff8a 	bl	80a07de <_ZN5Print7printlnEv>
  return n;
}
 80a08ca:	4420      	add	r0, r4
 80a08cc:	bd38      	pop	{r3, r4, r5, pc}

080a08ce <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a08ce:	b510      	push	{r4, lr}
 80a08d0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a08d2:	f7ff fe3c 	bl	80a054e <_ZNSt14_Function_baseD1Ev>
 80a08d6:	4620      	mov	r0, r4
 80a08d8:	bd10      	pop	{r4, pc}
	...

080a08dc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a08dc:	4803      	ldr	r0, [pc, #12]	; (80a08ec <_GLOBAL__sub_I_RGB+0x10>)
 80a08de:	2300      	movs	r3, #0
 80a08e0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a08e2:	4a03      	ldr	r2, [pc, #12]	; (80a08f0 <_GLOBAL__sub_I_RGB+0x14>)
 80a08e4:	4903      	ldr	r1, [pc, #12]	; (80a08f4 <_GLOBAL__sub_I_RGB+0x18>)
 80a08e6:	f000 bb09 	b.w	80a0efc <__aeabi_atexit>
 80a08ea:	bf00      	nop
 80a08ec:	2000038c 	.word	0x2000038c
 80a08f0:	2000036c 	.word	0x2000036c
 80a08f4:	080a08cf 	.word	0x080a08cf

080a08f8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a08f8:	4770      	bx	lr

080a08fa <_ZN8SPIClassD0Ev>:
 80a08fa:	b510      	push	{r4, lr}
 80a08fc:	4604      	mov	r4, r0
 80a08fe:	f7ff fbce 	bl	80a009e <_ZdlPv>
 80a0902:	4620      	mov	r0, r4
 80a0904:	bd10      	pop	{r4, pc}
	...

080a0908 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0908:	b570      	push	{r4, r5, r6, lr}
 80a090a:	4604      	mov	r4, r0
 80a090c:	460e      	mov	r6, r1
 80a090e:	4b07      	ldr	r3, [pc, #28]	; (80a092c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a0910:	2500      	movs	r5, #0
 80a0912:	6003      	str	r3, [r0, #0]
 80a0914:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a0918:	f7ff fc78 	bl	80a020c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a091c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a091e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a0920:	f7ff fcee 	bl	80a0300 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a0924:	60a5      	str	r5, [r4, #8]
}
 80a0926:	4620      	mov	r0, r4
 80a0928:	bd70      	pop	{r4, r5, r6, pc}
 80a092a:	bf00      	nop
 80a092c:	080a1514 	.word	0x080a1514

080a0930 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a0930:	7900      	ldrb	r0, [r0, #4]
 80a0932:	f7ff bced 	b.w	80a0310 <HAL_SPI_Is_Enabled>
	...

080a0938 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a093c:	4b03      	ldr	r3, [pc, #12]	; (80a094c <_GLOBAL__sub_I_System+0x14>)
 80a093e:	2000      	movs	r0, #0
 80a0940:	7018      	strb	r0, [r3, #0]
 80a0942:	8058      	strh	r0, [r3, #2]
 80a0944:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0946:	f7ff bd73 	b.w	80a0430 <set_system_mode>
 80a094a:	bf00      	nop
 80a094c:	2000039c 	.word	0x2000039c

080a0950 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0950:	4b02      	ldr	r3, [pc, #8]	; (80a095c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0952:	681a      	ldr	r2, [r3, #0]
 80a0954:	4b02      	ldr	r3, [pc, #8]	; (80a0960 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0956:	601a      	str	r2, [r3, #0]
 80a0958:	4770      	bx	lr
 80a095a:	bf00      	nop
 80a095c:	20000300 	.word	0x20000300
 80a0960:	200003a4 	.word	0x200003a4

080a0964 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0964:	4770      	bx	lr

080a0966 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0966:	7441      	strb	r1, [r0, #17]
 80a0968:	4770      	bx	lr

080a096a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a096a:	7c00      	ldrb	r0, [r0, #16]
 80a096c:	f7ff bd10 	b.w	80a0390 <HAL_USART_Available_Data_For_Write>

080a0970 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a0970:	7c00      	ldrb	r0, [r0, #16]
 80a0972:	f7ff bce5 	b.w	80a0340 <HAL_USART_Available_Data>

080a0976 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a0976:	7c00      	ldrb	r0, [r0, #16]
 80a0978:	f7ff bcf2 	b.w	80a0360 <HAL_USART_Peek_Data>

080a097c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a097c:	7c00      	ldrb	r0, [r0, #16]
 80a097e:	f7ff bce7 	b.w	80a0350 <HAL_USART_Read_Data>

080a0982 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0982:	7c00      	ldrb	r0, [r0, #16]
 80a0984:	f7ff bcf4 	b.w	80a0370 <HAL_USART_Flush_Data>

080a0988 <_ZN11USARTSerialD0Ev>:
 80a0988:	b510      	push	{r4, lr}
 80a098a:	4604      	mov	r4, r0
 80a098c:	f7ff fb87 	bl	80a009e <_ZdlPv>
 80a0990:	4620      	mov	r0, r4
 80a0992:	bd10      	pop	{r4, pc}

080a0994 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0994:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0996:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0998:	4604      	mov	r4, r0
 80a099a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a099c:	b925      	cbnz	r5, 80a09a8 <_ZN11USARTSerial5writeEh+0x14>
 80a099e:	7c00      	ldrb	r0, [r0, #16]
 80a09a0:	f7ff fcf6 	bl	80a0390 <HAL_USART_Available_Data_For_Write>
 80a09a4:	2800      	cmp	r0, #0
 80a09a6:	dd05      	ble.n	80a09b4 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a09a8:	4631      	mov	r1, r6
 80a09aa:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a09ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a09b0:	f7ff bcbe 	b.w	80a0330 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a09b4:	4628      	mov	r0, r5
 80a09b6:	bd70      	pop	{r4, r5, r6, pc}

080a09b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a09b8:	b510      	push	{r4, lr}
 80a09ba:	4604      	mov	r4, r0
 80a09bc:	4608      	mov	r0, r1
 80a09be:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a09c0:	2200      	movs	r2, #0
 80a09c2:	6062      	str	r2, [r4, #4]
 80a09c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a09c8:	60a2      	str	r2, [r4, #8]
 80a09ca:	4a05      	ldr	r2, [pc, #20]	; (80a09e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a09cc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a09ce:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a09d0:	2201      	movs	r2, #1
 80a09d2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a09d4:	461a      	mov	r2, r3
 80a09d6:	f7ff fca3 	bl	80a0320 <HAL_USART_Init>
}
 80a09da:	4620      	mov	r0, r4
 80a09dc:	bd10      	pop	{r4, pc}
 80a09de:	bf00      	nop
 80a09e0:	080a1550 	.word	0x080a1550

080a09e4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a09e4:	2300      	movs	r3, #0
 80a09e6:	7c00      	ldrb	r0, [r0, #16]
 80a09e8:	f7ff bcda 	b.w	80a03a0 <HAL_USART_BeginConfig>

080a09ec <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a09ec:	2200      	movs	r2, #0
 80a09ee:	f7ff bff9 	b.w	80a09e4 <_ZN11USARTSerial5beginEmm>

080a09f2 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a09f2:	7c00      	ldrb	r0, [r0, #16]
 80a09f4:	f7ff bcc4 	b.w	80a0380 <HAL_USART_Is_Enabled>

080a09f8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a09f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a09fa:	4c19      	ldr	r4, [pc, #100]	; (80a0a60 <_Z22__fetch_global_Serial1v+0x68>)
 80a09fc:	6825      	ldr	r5, [r4, #0]
 80a09fe:	b94d      	cbnz	r5, 80a0a14 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a0a00:	2084      	movs	r0, #132	; 0x84
 80a0a02:	f7ff fb4a 	bl	80a009a <_Znwj>
 80a0a06:	4606      	mov	r6, r0
 80a0a08:	b118      	cbz	r0, 80a0a12 <_Z22__fetch_global_Serial1v+0x1a>
 80a0a0a:	2284      	movs	r2, #132	; 0x84
 80a0a0c:	4629      	mov	r1, r5
 80a0a0e:	f000 fbe0 	bl	80a11d2 <memset>
 80a0a12:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a0a14:	4d13      	ldr	r5, [pc, #76]	; (80a0a64 <_Z22__fetch_global_Serial1v+0x6c>)
 80a0a16:	682e      	ldr	r6, [r5, #0]
 80a0a18:	b94e      	cbnz	r6, 80a0a2e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a0a1a:	2084      	movs	r0, #132	; 0x84
 80a0a1c:	f7ff fb3d 	bl	80a009a <_Znwj>
 80a0a20:	4607      	mov	r7, r0
 80a0a22:	b118      	cbz	r0, 80a0a2c <_Z22__fetch_global_Serial1v+0x34>
 80a0a24:	2284      	movs	r2, #132	; 0x84
 80a0a26:	4631      	mov	r1, r6
 80a0a28:	f000 fbd3 	bl	80a11d2 <memset>
 80a0a2c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a0a2e:	4f0e      	ldr	r7, [pc, #56]	; (80a0a68 <_Z22__fetch_global_Serial1v+0x70>)
 80a0a30:	6839      	ldr	r1, [r7, #0]
 80a0a32:	f011 0601 	ands.w	r6, r1, #1
 80a0a36:	d111      	bne.n	80a0a5c <_Z22__fetch_global_Serial1v+0x64>
 80a0a38:	4638      	mov	r0, r7
 80a0a3a:	f7ff fb32 	bl	80a00a2 <__cxa_guard_acquire>
 80a0a3e:	b168      	cbz	r0, 80a0a5c <_Z22__fetch_global_Serial1v+0x64>
 80a0a40:	6822      	ldr	r2, [r4, #0]
 80a0a42:	4631      	mov	r1, r6
 80a0a44:	682b      	ldr	r3, [r5, #0]
 80a0a46:	4809      	ldr	r0, [pc, #36]	; (80a0a6c <_Z22__fetch_global_Serial1v+0x74>)
 80a0a48:	f7ff ffb6 	bl	80a09b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0a4c:	4638      	mov	r0, r7
 80a0a4e:	f7ff fb2d 	bl	80a00ac <__cxa_guard_release>
 80a0a52:	4a07      	ldr	r2, [pc, #28]	; (80a0a70 <_Z22__fetch_global_Serial1v+0x78>)
 80a0a54:	4907      	ldr	r1, [pc, #28]	; (80a0a74 <_Z22__fetch_global_Serial1v+0x7c>)
 80a0a56:	4805      	ldr	r0, [pc, #20]	; (80a0a6c <_Z22__fetch_global_Serial1v+0x74>)
 80a0a58:	f000 fa50 	bl	80a0efc <__aeabi_atexit>
#endif
	return serial1;
}
 80a0a5c:	4803      	ldr	r0, [pc, #12]	; (80a0a6c <_Z22__fetch_global_Serial1v+0x74>)
 80a0a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a0a60:	200003c4 	.word	0x200003c4
 80a0a64:	200003bc 	.word	0x200003bc
 80a0a68:	200003c0 	.word	0x200003c0
 80a0a6c:	200003a8 	.word	0x200003a8
 80a0a70:	2000036c 	.word	0x2000036c
 80a0a74:	080a0965 	.word	0x080a0965

080a0a78 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0a78:	7441      	strb	r1, [r0, #17]
 80a0a7a:	4770      	bx	lr

080a0a7c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a0a7c:	4770      	bx	lr

080a0a7e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a0a7e:	2100      	movs	r1, #0
 80a0a80:	7c00      	ldrb	r0, [r0, #16]
 80a0a82:	f7ff bcb5 	b.w	80a03f0 <HAL_USB_USART_Receive_Data>

080a0a86 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a0a86:	2101      	movs	r1, #1
 80a0a88:	7c00      	ldrb	r0, [r0, #16]
 80a0a8a:	f7ff bcb1 	b.w	80a03f0 <HAL_USB_USART_Receive_Data>

080a0a8e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a0a8e:	7c00      	ldrb	r0, [r0, #16]
 80a0a90:	f7ff bca6 	b.w	80a03e0 <HAL_USB_USART_Available_Data_For_Write>

080a0a94 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a0a94:	7c00      	ldrb	r0, [r0, #16]
 80a0a96:	f7ff bc9b 	b.w	80a03d0 <HAL_USB_USART_Available_Data>

080a0a9a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a0a9a:	b538      	push	{r3, r4, r5, lr}
 80a0a9c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0a9e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a0aa0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0aa2:	f7ff fc9d 	bl	80a03e0 <HAL_USB_USART_Available_Data_For_Write>
 80a0aa6:	2800      	cmp	r0, #0
 80a0aa8:	dc01      	bgt.n	80a0aae <_ZN9USBSerial5writeEh+0x14>
 80a0aaa:	7c60      	ldrb	r0, [r4, #17]
 80a0aac:	b120      	cbz	r0, 80a0ab8 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a0aae:	4629      	mov	r1, r5
 80a0ab0:	7c20      	ldrb	r0, [r4, #16]
 80a0ab2:	f7ff fca5 	bl	80a0400 <HAL_USB_USART_Send_Data>
    return 1;
 80a0ab6:	2001      	movs	r0, #1
  }
  return 0;
}
 80a0ab8:	bd38      	pop	{r3, r4, r5, pc}

080a0aba <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0aba:	7c00      	ldrb	r0, [r0, #16]
 80a0abc:	f7ff bca8 	b.w	80a0410 <HAL_USB_USART_Flush_Data>

080a0ac0 <_ZN9USBSerialD0Ev>:
 80a0ac0:	b510      	push	{r4, lr}
 80a0ac2:	4604      	mov	r4, r0
 80a0ac4:	f7ff faeb 	bl	80a009e <_ZdlPv>
 80a0ac8:	4620      	mov	r0, r4
 80a0aca:	bd10      	pop	{r4, pc}

080a0acc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a0acc:	b510      	push	{r4, lr}
 80a0ace:	4604      	mov	r4, r0
 80a0ad0:	2300      	movs	r3, #0
 80a0ad2:	6063      	str	r3, [r4, #4]
 80a0ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0ad8:	60a3      	str	r3, [r4, #8]
 80a0ada:	4b05      	ldr	r3, [pc, #20]	; (80a0af0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a0adc:	4608      	mov	r0, r1
 80a0ade:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a0ae0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a0ae2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a0ae4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a0ae6:	4611      	mov	r1, r2
 80a0ae8:	f7ff fc62 	bl	80a03b0 <HAL_USB_USART_Init>
}
 80a0aec:	4620      	mov	r0, r4
 80a0aee:	bd10      	pop	{r4, pc}
 80a0af0:	080a1580 	.word	0x080a1580

080a0af4 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a0af4:	2200      	movs	r2, #0
 80a0af6:	7c00      	ldrb	r0, [r0, #16]
 80a0af8:	f7ff bc62 	b.w	80a03c0 <HAL_USB_USART_Begin>

080a0afc <_Z19acquireSerialBufferv>:
 80a0afc:	b510      	push	{r4, lr}
 80a0afe:	4604      	mov	r4, r0
 80a0b00:	2214      	movs	r2, #20
 80a0b02:	2100      	movs	r1, #0
 80a0b04:	f000 fb65 	bl	80a11d2 <memset>
 80a0b08:	4620      	mov	r0, r4
 80a0b0a:	bd10      	pop	{r4, pc}

080a0b0c <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0b0c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0b0e:	4d0e      	ldr	r5, [pc, #56]	; (80a0b48 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a0b10:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a0b12:	a801      	add	r0, sp, #4
 80a0b14:	f7ff fff2 	bl	80a0afc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a0b18:	6829      	ldr	r1, [r5, #0]
 80a0b1a:	f011 0401 	ands.w	r4, r1, #1
 80a0b1e:	d110      	bne.n	80a0b42 <_Z16_fetch_usbserialv+0x36>
 80a0b20:	4628      	mov	r0, r5
 80a0b22:	f7ff fabe 	bl	80a00a2 <__cxa_guard_acquire>
 80a0b26:	b160      	cbz	r0, 80a0b42 <_Z16_fetch_usbserialv+0x36>
 80a0b28:	aa01      	add	r2, sp, #4
 80a0b2a:	4621      	mov	r1, r4
 80a0b2c:	4807      	ldr	r0, [pc, #28]	; (80a0b4c <_Z16_fetch_usbserialv+0x40>)
 80a0b2e:	f7ff ffcd 	bl	80a0acc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b32:	4628      	mov	r0, r5
 80a0b34:	f7ff faba 	bl	80a00ac <__cxa_guard_release>
 80a0b38:	4a05      	ldr	r2, [pc, #20]	; (80a0b50 <_Z16_fetch_usbserialv+0x44>)
 80a0b3a:	4906      	ldr	r1, [pc, #24]	; (80a0b54 <_Z16_fetch_usbserialv+0x48>)
 80a0b3c:	4803      	ldr	r0, [pc, #12]	; (80a0b4c <_Z16_fetch_usbserialv+0x40>)
 80a0b3e:	f000 f9dd 	bl	80a0efc <__aeabi_atexit>
	return _usbserial;
}
 80a0b42:	4802      	ldr	r0, [pc, #8]	; (80a0b4c <_Z16_fetch_usbserialv+0x40>)
 80a0b44:	b007      	add	sp, #28
 80a0b46:	bd30      	pop	{r4, r5, pc}
 80a0b48:	200003c8 	.word	0x200003c8
 80a0b4c:	200003d0 	.word	0x200003d0
 80a0b50:	2000036c 	.word	0x2000036c
 80a0b54:	080a0a7d 	.word	0x080a0a7d

080a0b58 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0b58:	b510      	push	{r4, lr}
 80a0b5a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0b5c:	2214      	movs	r2, #20
 80a0b5e:	2100      	movs	r1, #0
 80a0b60:	f000 fb37 	bl	80a11d2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	bd10      	pop	{r4, pc}

080a0b68 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0b68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b6a:	4c0e      	ldr	r4, [pc, #56]	; (80a0ba4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0b6c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0b6e:	a801      	add	r0, sp, #4
 80a0b70:	f7ff fff2 	bl	80a0b58 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0b74:	6823      	ldr	r3, [r4, #0]
 80a0b76:	07db      	lsls	r3, r3, #31
 80a0b78:	d410      	bmi.n	80a0b9c <_Z17_fetch_usbserial1v+0x34>
 80a0b7a:	4620      	mov	r0, r4
 80a0b7c:	f7ff fa91 	bl	80a00a2 <__cxa_guard_acquire>
 80a0b80:	b160      	cbz	r0, 80a0b9c <_Z17_fetch_usbserial1v+0x34>
 80a0b82:	aa01      	add	r2, sp, #4
 80a0b84:	2101      	movs	r1, #1
 80a0b86:	4808      	ldr	r0, [pc, #32]	; (80a0ba8 <_Z17_fetch_usbserial1v+0x40>)
 80a0b88:	f7ff ffa0 	bl	80a0acc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0b8c:	4620      	mov	r0, r4
 80a0b8e:	f7ff fa8d 	bl	80a00ac <__cxa_guard_release>
 80a0b92:	4a06      	ldr	r2, [pc, #24]	; (80a0bac <_Z17_fetch_usbserial1v+0x44>)
 80a0b94:	4906      	ldr	r1, [pc, #24]	; (80a0bb0 <_Z17_fetch_usbserial1v+0x48>)
 80a0b96:	4804      	ldr	r0, [pc, #16]	; (80a0ba8 <_Z17_fetch_usbserial1v+0x40>)
 80a0b98:	f000 f9b0 	bl	80a0efc <__aeabi_atexit>
  return _usbserial1;
}
 80a0b9c:	4802      	ldr	r0, [pc, #8]	; (80a0ba8 <_Z17_fetch_usbserial1v+0x40>)
 80a0b9e:	b006      	add	sp, #24
 80a0ba0:	bd10      	pop	{r4, pc}
 80a0ba2:	bf00      	nop
 80a0ba4:	200003cc 	.word	0x200003cc
 80a0ba8:	200003e4 	.word	0x200003e4
 80a0bac:	2000036c 	.word	0x2000036c
 80a0bb0:	080a0a7d 	.word	0x080a0a7d

080a0bb4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0bb4:	2200      	movs	r2, #0
 80a0bb6:	4611      	mov	r1, r2
 80a0bb8:	6840      	ldr	r0, [r0, #4]
 80a0bba:	f7ff bc7d 	b.w	80a04b8 <network_ready>

080a0bbe <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0bbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0bc0:	4616      	mov	r6, r2
 80a0bc2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0bc4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0bc6:	460f      	mov	r7, r1
 80a0bc8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0bca:	2100      	movs	r1, #0
 80a0bcc:	a803      	add	r0, sp, #12
 80a0bce:	f000 fb00 	bl	80a11d2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0bd2:	4630      	mov	r0, r6
 80a0bd4:	f000 fb2e 	bl	80a1234 <strlen>
 80a0bd8:	2500      	movs	r5, #0
 80a0bda:	9500      	str	r5, [sp, #0]
 80a0bdc:	b281      	uxth	r1, r0
 80a0bde:	687b      	ldr	r3, [r7, #4]
 80a0be0:	aa03      	add	r2, sp, #12
 80a0be2:	4630      	mov	r0, r6
 80a0be4:	f7ff fc1c 	bl	80a0420 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0be8:	b120      	cbz	r0, 80a0bf4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0bea:	4629      	mov	r1, r5
 80a0bec:	4620      	mov	r0, r4
 80a0bee:	f7ff fd39 	bl	80a0664 <_ZN9IPAddressC1Em>
 80a0bf2:	e003      	b.n	80a0bfc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0bf4:	a903      	add	r1, sp, #12
 80a0bf6:	4620      	mov	r0, r4
 80a0bf8:	f7ff fd22 	bl	80a0640 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0bfc:	4620      	mov	r0, r4
 80a0bfe:	b009      	add	sp, #36	; 0x24
 80a0c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0c02 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0c02:	2200      	movs	r2, #0
 80a0c04:	4611      	mov	r1, r2
 80a0c06:	6840      	ldr	r0, [r0, #4]
 80a0c08:	f7ff bc76 	b.w	80a04f8 <network_listening>

080a0c0c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0c0c:	2200      	movs	r2, #0
 80a0c0e:	4611      	mov	r1, r2
 80a0c10:	6840      	ldr	r0, [r0, #4]
 80a0c12:	f7ff bc81 	b.w	80a0518 <network_get_listen_timeout>

080a0c16 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0c16:	2200      	movs	r2, #0
 80a0c18:	6840      	ldr	r0, [r0, #4]
 80a0c1a:	f7ff bc75 	b.w	80a0508 <network_set_listen_timeout>

080a0c1e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0c1e:	2200      	movs	r2, #0
 80a0c20:	f081 0101 	eor.w	r1, r1, #1
 80a0c24:	6840      	ldr	r0, [r0, #4]
 80a0c26:	f7ff bc5f 	b.w	80a04e8 <network_listen>

080a0c2a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0c2a:	2300      	movs	r3, #0
 80a0c2c:	461a      	mov	r2, r3
 80a0c2e:	4619      	mov	r1, r3
 80a0c30:	6840      	ldr	r0, [r0, #4]
 80a0c32:	f7ff bc51 	b.w	80a04d8 <network_off>

080a0c36 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0c36:	2300      	movs	r3, #0
 80a0c38:	461a      	mov	r2, r3
 80a0c3a:	4619      	mov	r1, r3
 80a0c3c:	6840      	ldr	r0, [r0, #4]
 80a0c3e:	f7ff bc43 	b.w	80a04c8 <network_on>

080a0c42 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0c42:	2200      	movs	r2, #0
 80a0c44:	4611      	mov	r1, r2
 80a0c46:	6840      	ldr	r0, [r0, #4]
 80a0c48:	f7ff bc26 	b.w	80a0498 <network_connecting>

080a0c4c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0c4c:	2200      	movs	r2, #0
 80a0c4e:	2102      	movs	r1, #2
 80a0c50:	6840      	ldr	r0, [r0, #4]
 80a0c52:	f7ff bc29 	b.w	80a04a8 <network_disconnect>

080a0c56 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0c56:	2300      	movs	r3, #0
 80a0c58:	461a      	mov	r2, r3
 80a0c5a:	6840      	ldr	r0, [r0, #4]
 80a0c5c:	f7ff bc14 	b.w	80a0488 <network_connect>

080a0c60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a0c60:	4b02      	ldr	r3, [pc, #8]	; (80a0c6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0c62:	2204      	movs	r2, #4
 80a0c64:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0c66:	4a02      	ldr	r2, [pc, #8]	; (80a0c70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0c68:	601a      	str	r2, [r3, #0]
 80a0c6a:	4770      	bx	lr
 80a0c6c:	200003f8 	.word	0x200003f8
 80a0c70:	080a15b0 	.word	0x080a15b0

080a0c74 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0c74:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0c76:	4b14      	ldr	r3, [pc, #80]	; (80a0cc8 <serialEventRun+0x54>)
 80a0c78:	b133      	cbz	r3, 80a0c88 <serialEventRun+0x14>
 80a0c7a:	f7ff ff47 	bl	80a0b0c <_Z16_fetch_usbserialv>
 80a0c7e:	6803      	ldr	r3, [r0, #0]
 80a0c80:	691b      	ldr	r3, [r3, #16]
 80a0c82:	4798      	blx	r3
 80a0c84:	2800      	cmp	r0, #0
 80a0c86:	dc16      	bgt.n	80a0cb6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a0c88:	4b10      	ldr	r3, [pc, #64]	; (80a0ccc <serialEventRun+0x58>)
 80a0c8a:	b133      	cbz	r3, 80a0c9a <serialEventRun+0x26>
 80a0c8c:	f7ff feb4 	bl	80a09f8 <_Z22__fetch_global_Serial1v>
 80a0c90:	6803      	ldr	r3, [r0, #0]
 80a0c92:	691b      	ldr	r3, [r3, #16]
 80a0c94:	4798      	blx	r3
 80a0c96:	2800      	cmp	r0, #0
 80a0c98:	dc10      	bgt.n	80a0cbc <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a0c9a:	4b0d      	ldr	r3, [pc, #52]	; (80a0cd0 <serialEventRun+0x5c>)
 80a0c9c:	b10b      	cbz	r3, 80a0ca2 <serialEventRun+0x2e>
 80a0c9e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0ca2:	4b0c      	ldr	r3, [pc, #48]	; (80a0cd4 <serialEventRun+0x60>)
 80a0ca4:	b17b      	cbz	r3, 80a0cc6 <serialEventRun+0x52>
 80a0ca6:	f7ff ff5f 	bl	80a0b68 <_Z17_fetch_usbserial1v>
 80a0caa:	6803      	ldr	r3, [r0, #0]
 80a0cac:	691b      	ldr	r3, [r3, #16]
 80a0cae:	4798      	blx	r3
 80a0cb0:	2800      	cmp	r0, #0
 80a0cb2:	dc06      	bgt.n	80a0cc2 <serialEventRun+0x4e>
 80a0cb4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a0cb6:	f3af 8000 	nop.w
 80a0cba:	e7e5      	b.n	80a0c88 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0cbc:	f3af 8000 	nop.w
 80a0cc0:	e7eb      	b.n	80a0c9a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0cc2:	f3af 8000 	nop.w
 80a0cc6:	bd08      	pop	{r3, pc}
	...

080a0cd8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a0cd8:	b508      	push	{r3, lr}
	serialEventRun();
 80a0cda:	f7ff ffcb 	bl	80a0c74 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0cde:	f7ff faad 	bl	80a023c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0ce2:	4b01      	ldr	r3, [pc, #4]	; (80a0ce8 <_post_loop+0x10>)
 80a0ce4:	6018      	str	r0, [r3, #0]
 80a0ce6:	bd08      	pop	{r3, pc}
 80a0ce8:	20000408 	.word	0x20000408

080a0cec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0cec:	4802      	ldr	r0, [pc, #8]	; (80a0cf8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0cee:	4a03      	ldr	r2, [pc, #12]	; (80a0cfc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0cf0:	4903      	ldr	r1, [pc, #12]	; (80a0d00 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0cf2:	1a12      	subs	r2, r2, r0
 80a0cf4:	f000 ba62 	b.w	80a11bc <memcpy>
 80a0cf8:	40024000 	.word	0x40024000
 80a0cfc:	40024004 	.word	0x40024004
 80a0d00:	080a1780 	.word	0x080a1780

080a0d04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0d04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0d06:	2300      	movs	r3, #0
 80a0d08:	9300      	str	r3, [sp, #0]
 80a0d0a:	461a      	mov	r2, r3
 80a0d0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0d10:	f7ff fba8 	bl	80a0464 <system_ctrl_set_result>
}
 80a0d14:	b003      	add	sp, #12
 80a0d16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0d1c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a0d1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0d1e:	8843      	ldrh	r3, [r0, #2]
 80a0d20:	2b0a      	cmp	r3, #10
 80a0d22:	d008      	beq.n	80a0d36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0d24:	2b50      	cmp	r3, #80	; 0x50
 80a0d26:	d109      	bne.n	80a0d3c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a0d28:	4b09      	ldr	r3, [pc, #36]	; (80a0d50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0d2a:	681b      	ldr	r3, [r3, #0]
 80a0d2c:	b13b      	cbz	r3, 80a0d3e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a0d2e:	b003      	add	sp, #12
 80a0d30:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a0d34:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a0d36:	f7ff ffe5 	bl	80a0d04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a0d3a:	e006      	b.n	80a0d4a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0d3c:	2300      	movs	r3, #0
 80a0d3e:	9300      	str	r3, [sp, #0]
 80a0d40:	461a      	mov	r2, r3
 80a0d42:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0d46:	f7ff fb8d 	bl	80a0464 <system_ctrl_set_result>
        break;
    }
}
 80a0d4a:	b003      	add	sp, #12
 80a0d4c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0d50:	20000400 	.word	0x20000400

080a0d54 <module_user_init_hook>:

void module_user_init_hook()
{
 80a0d54:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a0d56:	4c10      	ldr	r4, [pc, #64]	; (80a0d98 <module_user_init_hook+0x44>)
 80a0d58:	4d10      	ldr	r5, [pc, #64]	; (80a0d9c <module_user_init_hook+0x48>)
 80a0d5a:	6823      	ldr	r3, [r4, #0]
 80a0d5c:	42ab      	cmp	r3, r5
 80a0d5e:	4b10      	ldr	r3, [pc, #64]	; (80a0da0 <module_user_init_hook+0x4c>)
 80a0d60:	bf0c      	ite	eq
 80a0d62:	2201      	moveq	r2, #1
 80a0d64:	2200      	movne	r2, #0
 80a0d66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0d68:	d002      	beq.n	80a0d70 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a0d6a:	f7ff ffbf 	bl	80a0cec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0d6e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0d70:	f7ff fa54 	bl	80a021c <HAL_RNG_GetRandomNumber>
 80a0d74:	4604      	mov	r4, r0
    srand(seed);
 80a0d76:	f000 fa35 	bl	80a11e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0d7a:	4b0a      	ldr	r3, [pc, #40]	; (80a0da4 <module_user_init_hook+0x50>)
 80a0d7c:	b113      	cbz	r3, 80a0d84 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0d7e:	4620      	mov	r0, r4
 80a0d80:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0d84:	2100      	movs	r1, #0
 80a0d86:	4807      	ldr	r0, [pc, #28]	; (80a0da4 <module_user_init_hook+0x50>)
 80a0d88:	f7ff fb76 	bl	80a0478 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0d90:	2100      	movs	r1, #0
 80a0d92:	4805      	ldr	r0, [pc, #20]	; (80a0da8 <module_user_init_hook+0x54>)
 80a0d94:	f7ff bb5c 	b.w	80a0450 <system_ctrl_set_app_request_handler>
 80a0d98:	40024000 	.word	0x40024000
 80a0d9c:	9a271c1e 	.word	0x9a271c1e
 80a0da0:	20000404 	.word	0x20000404
 80a0da4:	00000000 	.word	0x00000000
 80a0da8:	080a0d1d 	.word	0x080a0d1d

080a0dac <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0dac:	b510      	push	{r4, lr}
 80a0dae:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0db0:	480f      	ldr	r0, [pc, #60]	; (80a0df0 <pinAvailable+0x44>)
 80a0db2:	f7ff fdbd 	bl	80a0930 <_ZN8SPIClass9isEnabledEv>
 80a0db6:	b128      	cbz	r0, 80a0dc4 <pinAvailable+0x18>
 80a0db8:	f1a4 030d 	sub.w	r3, r4, #13
 80a0dbc:	2b02      	cmp	r3, #2
 80a0dbe:	d801      	bhi.n	80a0dc4 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a0dc0:	2000      	movs	r0, #0
 80a0dc2:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0dc4:	f000 f840 	bl	80a0e48 <_Z19__fetch_global_Wirev>
 80a0dc8:	f7ff fc08 	bl	80a05dc <_ZN7TwoWire9isEnabledEv>
 80a0dcc:	b108      	cbz	r0, 80a0dd2 <pinAvailable+0x26>
 80a0dce:	2c01      	cmp	r4, #1
 80a0dd0:	d9f6      	bls.n	80a0dc0 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0dd2:	f7ff fe11 	bl	80a09f8 <_Z22__fetch_global_Serial1v>
 80a0dd6:	f7ff fe0c 	bl	80a09f2 <_ZN11USARTSerial9isEnabledEv>
 80a0dda:	b118      	cbz	r0, 80a0de4 <pinAvailable+0x38>
 80a0ddc:	f1a4 0312 	sub.w	r3, r4, #18
 80a0de0:	2b01      	cmp	r3, #1
 80a0de2:	d9ed      	bls.n	80a0dc0 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0de4:	2c17      	cmp	r4, #23
 80a0de6:	bf8c      	ite	hi
 80a0de8:	2000      	movhi	r0, #0
 80a0dea:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0dec:	bd10      	pop	{r4, pc}
 80a0dee:	bf00      	nop
 80a0df0:	2000043c 	.word	0x2000043c

080a0df4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0df4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0df6:	b538      	push	{r3, r4, r5, lr}
 80a0df8:	4604      	mov	r4, r0
 80a0dfa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0dfc:	d80a      	bhi.n	80a0e14 <pinMode+0x20>
 80a0dfe:	29ff      	cmp	r1, #255	; 0xff
 80a0e00:	d008      	beq.n	80a0e14 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0e02:	f7ff ffd3 	bl	80a0dac <pinAvailable>
 80a0e06:	b128      	cbz	r0, 80a0e14 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0e08:	4629      	mov	r1, r5
 80a0e0a:	4620      	mov	r0, r4
}
 80a0e0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0e10:	f7ff ba24 	b.w	80a025c <HAL_Pin_Mode>
 80a0e14:	bd38      	pop	{r3, r4, r5, pc}

080a0e16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0e16:	b538      	push	{r3, r4, r5, lr}
 80a0e18:	4604      	mov	r4, r0
 80a0e1a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0e1c:	f7ff fa26 	bl	80a026c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0e20:	28ff      	cmp	r0, #255	; 0xff
 80a0e22:	d010      	beq.n	80a0e46 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0e24:	2806      	cmp	r0, #6
 80a0e26:	d804      	bhi.n	80a0e32 <digitalWrite+0x1c>
 80a0e28:	234d      	movs	r3, #77	; 0x4d
 80a0e2a:	fa23 f000 	lsr.w	r0, r3, r0
 80a0e2e:	07c3      	lsls	r3, r0, #31
 80a0e30:	d409      	bmi.n	80a0e46 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0e32:	4620      	mov	r0, r4
 80a0e34:	f7ff ffba 	bl	80a0dac <pinAvailable>
 80a0e38:	b128      	cbz	r0, 80a0e46 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0e3a:	4629      	mov	r1, r5
 80a0e3c:	4620      	mov	r0, r4
}
 80a0e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0e42:	f7ff ba1b 	b.w	80a027c <HAL_GPIO_Write>
 80a0e46:	bd38      	pop	{r3, r4, r5, pc}

080a0e48 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a0e48:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a0e4a:	4d0b      	ldr	r5, [pc, #44]	; (80a0e78 <_Z19__fetch_global_Wirev+0x30>)
 80a0e4c:	6829      	ldr	r1, [r5, #0]
 80a0e4e:	f011 0401 	ands.w	r4, r1, #1
 80a0e52:	d10f      	bne.n	80a0e74 <_Z19__fetch_global_Wirev+0x2c>
 80a0e54:	4628      	mov	r0, r5
 80a0e56:	f7ff f924 	bl	80a00a2 <__cxa_guard_acquire>
 80a0e5a:	b158      	cbz	r0, 80a0e74 <_Z19__fetch_global_Wirev+0x2c>
 80a0e5c:	4621      	mov	r1, r4
 80a0e5e:	4807      	ldr	r0, [pc, #28]	; (80a0e7c <_Z19__fetch_global_Wirev+0x34>)
 80a0e60:	f7ff fbaa 	bl	80a05b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a0e64:	4628      	mov	r0, r5
 80a0e66:	f7ff f921 	bl	80a00ac <__cxa_guard_release>
 80a0e6a:	4a05      	ldr	r2, [pc, #20]	; (80a0e80 <_Z19__fetch_global_Wirev+0x38>)
 80a0e6c:	4905      	ldr	r1, [pc, #20]	; (80a0e84 <_Z19__fetch_global_Wirev+0x3c>)
 80a0e6e:	4803      	ldr	r0, [pc, #12]	; (80a0e7c <_Z19__fetch_global_Wirev+0x34>)
 80a0e70:	f000 f844 	bl	80a0efc <__aeabi_atexit>
	return wire;
}
 80a0e74:	4801      	ldr	r0, [pc, #4]	; (80a0e7c <_Z19__fetch_global_Wirev+0x34>)
 80a0e76:	bd38      	pop	{r3, r4, r5, pc}
 80a0e78:	2000040c 	.word	0x2000040c
 80a0e7c:	20000410 	.word	0x20000410
 80a0e80:	2000036c 	.word	0x2000036c
 80a0e84:	080a0561 	.word	0x080a0561

080a0e88 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0e88:	b513      	push	{r0, r1, r4, lr}
 80a0e8a:	4c08      	ldr	r4, [pc, #32]	; (80a0eac <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0e8c:	2300      	movs	r3, #0
 80a0e8e:	461a      	mov	r2, r3
 80a0e90:	4619      	mov	r1, r3
 80a0e92:	9300      	str	r3, [sp, #0]
 80a0e94:	4620      	mov	r0, r4
 80a0e96:	f7ff fbfb 	bl	80a0690 <_ZN9IPAddressC1Ehhhh>
 80a0e9a:	4620      	mov	r0, r4
 80a0e9c:	4a04      	ldr	r2, [pc, #16]	; (80a0eb0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0e9e:	4905      	ldr	r1, [pc, #20]	; (80a0eb4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0ea0:	b002      	add	sp, #8
 80a0ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0ea6:	f000 b829 	b.w	80a0efc <__aeabi_atexit>
 80a0eaa:	bf00      	nop
 80a0eac:	20000424 	.word	0x20000424
 80a0eb0:	2000036c 	.word	0x2000036c
 80a0eb4:	080a05e5 	.word	0x080a05e5

080a0eb8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0eb8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0eba:	4c0c      	ldr	r4, [pc, #48]	; (80a0eec <_GLOBAL__sub_I_SPI+0x34>)
 80a0ebc:	4e0c      	ldr	r6, [pc, #48]	; (80a0ef0 <_GLOBAL__sub_I_SPI+0x38>)
 80a0ebe:	4d0d      	ldr	r5, [pc, #52]	; (80a0ef4 <_GLOBAL__sub_I_SPI+0x3c>)
 80a0ec0:	2100      	movs	r1, #0
 80a0ec2:	4620      	mov	r0, r4
 80a0ec4:	f7ff fd20 	bl	80a0908 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0ec8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0eca:	4c0b      	ldr	r4, [pc, #44]	; (80a0ef8 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a0ecc:	4632      	mov	r2, r6
 80a0ece:	4629      	mov	r1, r5
 80a0ed0:	f000 f814 	bl	80a0efc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a0ed4:	2101      	movs	r1, #1
 80a0ed6:	4620      	mov	r0, r4
 80a0ed8:	f7ff fd16 	bl	80a0908 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0edc:	4632      	mov	r2, r6
 80a0ede:	4629      	mov	r1, r5
 80a0ee0:	4620      	mov	r0, r4
 80a0ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a0ee6:	f000 b809 	b.w	80a0efc <__aeabi_atexit>
 80a0eea:	bf00      	nop
 80a0eec:	2000043c 	.word	0x2000043c
 80a0ef0:	2000036c 	.word	0x2000036c
 80a0ef4:	080a08f9 	.word	0x080a08f9
 80a0ef8:	2000044c 	.word	0x2000044c

080a0efc <__aeabi_atexit>:
 80a0efc:	460b      	mov	r3, r1
 80a0efe:	4601      	mov	r1, r0
 80a0f00:	4618      	mov	r0, r3
 80a0f02:	f000 b94d 	b.w	80a11a0 <__cxa_atexit>
	...

080a0f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a0f08:	4b24      	ldr	r3, [pc, #144]	; (80a0f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a0f0a:	681a      	ldr	r2, [r3, #0]
 80a0f0c:	07d0      	lsls	r0, r2, #31
 80a0f0e:	bf5c      	itt	pl
 80a0f10:	2201      	movpl	r2, #1
 80a0f12:	601a      	strpl	r2, [r3, #0]
 80a0f14:	4b22      	ldr	r3, [pc, #136]	; (80a0fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a0f16:	681a      	ldr	r2, [r3, #0]
 80a0f18:	07d1      	lsls	r1, r2, #31
 80a0f1a:	bf5c      	itt	pl
 80a0f1c:	2201      	movpl	r2, #1
 80a0f1e:	601a      	strpl	r2, [r3, #0]
 80a0f20:	4b20      	ldr	r3, [pc, #128]	; (80a0fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a0f22:	681a      	ldr	r2, [r3, #0]
 80a0f24:	07d2      	lsls	r2, r2, #31
 80a0f26:	bf5c      	itt	pl
 80a0f28:	2201      	movpl	r2, #1
 80a0f2a:	601a      	strpl	r2, [r3, #0]
 80a0f2c:	4b1e      	ldr	r3, [pc, #120]	; (80a0fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a0f2e:	681a      	ldr	r2, [r3, #0]
 80a0f30:	07d0      	lsls	r0, r2, #31
 80a0f32:	bf5c      	itt	pl
 80a0f34:	2201      	movpl	r2, #1
 80a0f36:	601a      	strpl	r2, [r3, #0]
 80a0f38:	4b1c      	ldr	r3, [pc, #112]	; (80a0fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a0f3a:	681a      	ldr	r2, [r3, #0]
 80a0f3c:	07d1      	lsls	r1, r2, #31
 80a0f3e:	bf5c      	itt	pl
 80a0f40:	2201      	movpl	r2, #1
 80a0f42:	601a      	strpl	r2, [r3, #0]
 80a0f44:	4b1a      	ldr	r3, [pc, #104]	; (80a0fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a0f46:	681a      	ldr	r2, [r3, #0]
 80a0f48:	07d2      	lsls	r2, r2, #31
 80a0f4a:	bf5c      	itt	pl
 80a0f4c:	2201      	movpl	r2, #1
 80a0f4e:	601a      	strpl	r2, [r3, #0]
 80a0f50:	4b18      	ldr	r3, [pc, #96]	; (80a0fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a0f52:	681a      	ldr	r2, [r3, #0]
 80a0f54:	07d0      	lsls	r0, r2, #31
 80a0f56:	bf5c      	itt	pl
 80a0f58:	2201      	movpl	r2, #1
 80a0f5a:	601a      	strpl	r2, [r3, #0]
 80a0f5c:	4b16      	ldr	r3, [pc, #88]	; (80a0fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a0f5e:	681a      	ldr	r2, [r3, #0]
 80a0f60:	07d1      	lsls	r1, r2, #31
 80a0f62:	bf5c      	itt	pl
 80a0f64:	2201      	movpl	r2, #1
 80a0f66:	601a      	strpl	r2, [r3, #0]
 80a0f68:	4b14      	ldr	r3, [pc, #80]	; (80a0fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a0f6a:	681a      	ldr	r2, [r3, #0]
 80a0f6c:	07d2      	lsls	r2, r2, #31
 80a0f6e:	bf5c      	itt	pl
 80a0f70:	2201      	movpl	r2, #1
 80a0f72:	601a      	strpl	r2, [r3, #0]
 80a0f74:	4b12      	ldr	r3, [pc, #72]	; (80a0fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a0f76:	681a      	ldr	r2, [r3, #0]
 80a0f78:	07d0      	lsls	r0, r2, #31
 80a0f7a:	bf5c      	itt	pl
 80a0f7c:	2201      	movpl	r2, #1
 80a0f7e:	601a      	strpl	r2, [r3, #0]
 80a0f80:	4b10      	ldr	r3, [pc, #64]	; (80a0fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a0f82:	681a      	ldr	r2, [r3, #0]
 80a0f84:	07d1      	lsls	r1, r2, #31
 80a0f86:	bf5c      	itt	pl
 80a0f88:	2201      	movpl	r2, #1
 80a0f8a:	601a      	strpl	r2, [r3, #0]
 80a0f8c:	4b0e      	ldr	r3, [pc, #56]	; (80a0fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a0f8e:	681a      	ldr	r2, [r3, #0]
 80a0f90:	07d2      	lsls	r2, r2, #31
 80a0f92:	bf5c      	itt	pl
 80a0f94:	2201      	movpl	r2, #1
 80a0f96:	601a      	strpl	r2, [r3, #0]
 80a0f98:	4770      	bx	lr
 80a0f9a:	bf00      	nop
 80a0f9c:	20000488 	.word	0x20000488
 80a0fa0:	20000484 	.word	0x20000484
 80a0fa4:	20000480 	.word	0x20000480
 80a0fa8:	2000047c 	.word	0x2000047c
 80a0fac:	20000478 	.word	0x20000478
 80a0fb0:	20000474 	.word	0x20000474
 80a0fb4:	20000470 	.word	0x20000470
 80a0fb8:	2000046c 	.word	0x2000046c
 80a0fbc:	20000468 	.word	0x20000468
 80a0fc0:	20000464 	.word	0x20000464
 80a0fc4:	20000460 	.word	0x20000460
 80a0fc8:	2000045c 	.word	0x2000045c

080a0fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0fcc:	4b18      	ldr	r3, [pc, #96]	; (80a1030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0fce:	681a      	ldr	r2, [r3, #0]
 80a0fd0:	07d1      	lsls	r1, r2, #31
 80a0fd2:	bf5c      	itt	pl
 80a0fd4:	2201      	movpl	r2, #1
 80a0fd6:	601a      	strpl	r2, [r3, #0]
 80a0fd8:	4b16      	ldr	r3, [pc, #88]	; (80a1034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0fda:	681a      	ldr	r2, [r3, #0]
 80a0fdc:	07d2      	lsls	r2, r2, #31
 80a0fde:	bf5c      	itt	pl
 80a0fe0:	2201      	movpl	r2, #1
 80a0fe2:	601a      	strpl	r2, [r3, #0]
 80a0fe4:	4b14      	ldr	r3, [pc, #80]	; (80a1038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0fe6:	681a      	ldr	r2, [r3, #0]
 80a0fe8:	07d0      	lsls	r0, r2, #31
 80a0fea:	bf5c      	itt	pl
 80a0fec:	2201      	movpl	r2, #1
 80a0fee:	601a      	strpl	r2, [r3, #0]
 80a0ff0:	4b12      	ldr	r3, [pc, #72]	; (80a103c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0ff2:	681a      	ldr	r2, [r3, #0]
 80a0ff4:	07d1      	lsls	r1, r2, #31
 80a0ff6:	bf5c      	itt	pl
 80a0ff8:	2201      	movpl	r2, #1
 80a0ffa:	601a      	strpl	r2, [r3, #0]
 80a0ffc:	4b10      	ldr	r3, [pc, #64]	; (80a1040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0ffe:	681a      	ldr	r2, [r3, #0]
 80a1000:	07d2      	lsls	r2, r2, #31
 80a1002:	bf5c      	itt	pl
 80a1004:	2201      	movpl	r2, #1
 80a1006:	601a      	strpl	r2, [r3, #0]
 80a1008:	4b0e      	ldr	r3, [pc, #56]	; (80a1044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a100a:	681a      	ldr	r2, [r3, #0]
 80a100c:	07d0      	lsls	r0, r2, #31
 80a100e:	bf5c      	itt	pl
 80a1010:	2201      	movpl	r2, #1
 80a1012:	601a      	strpl	r2, [r3, #0]
 80a1014:	4b0c      	ldr	r3, [pc, #48]	; (80a1048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1016:	681a      	ldr	r2, [r3, #0]
 80a1018:	07d1      	lsls	r1, r2, #31
 80a101a:	bf5c      	itt	pl
 80a101c:	2201      	movpl	r2, #1
 80a101e:	601a      	strpl	r2, [r3, #0]
 80a1020:	4b0a      	ldr	r3, [pc, #40]	; (80a104c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1022:	681a      	ldr	r2, [r3, #0]
 80a1024:	07d2      	lsls	r2, r2, #31
 80a1026:	bf5c      	itt	pl
 80a1028:	2201      	movpl	r2, #1
 80a102a:	601a      	strpl	r2, [r3, #0]
 80a102c:	4770      	bx	lr
 80a102e:	bf00      	nop
 80a1030:	200004a8 	.word	0x200004a8
 80a1034:	200004a4 	.word	0x200004a4
 80a1038:	200004a0 	.word	0x200004a0
 80a103c:	2000049c 	.word	0x2000049c
 80a1040:	20000498 	.word	0x20000498
 80a1044:	20000494 	.word	0x20000494
 80a1048:	20000490 	.word	0x20000490
 80a104c:	2000048c 	.word	0x2000048c

080a1050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1050:	4b18      	ldr	r3, [pc, #96]	; (80a10b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1052:	681a      	ldr	r2, [r3, #0]
 80a1054:	07d1      	lsls	r1, r2, #31
 80a1056:	bf5c      	itt	pl
 80a1058:	2201      	movpl	r2, #1
 80a105a:	601a      	strpl	r2, [r3, #0]
 80a105c:	4b16      	ldr	r3, [pc, #88]	; (80a10b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a105e:	681a      	ldr	r2, [r3, #0]
 80a1060:	07d2      	lsls	r2, r2, #31
 80a1062:	bf5c      	itt	pl
 80a1064:	2201      	movpl	r2, #1
 80a1066:	601a      	strpl	r2, [r3, #0]
 80a1068:	4b14      	ldr	r3, [pc, #80]	; (80a10bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a106a:	681a      	ldr	r2, [r3, #0]
 80a106c:	07d0      	lsls	r0, r2, #31
 80a106e:	bf5c      	itt	pl
 80a1070:	2201      	movpl	r2, #1
 80a1072:	601a      	strpl	r2, [r3, #0]
 80a1074:	4b12      	ldr	r3, [pc, #72]	; (80a10c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1076:	681a      	ldr	r2, [r3, #0]
 80a1078:	07d1      	lsls	r1, r2, #31
 80a107a:	bf5c      	itt	pl
 80a107c:	2201      	movpl	r2, #1
 80a107e:	601a      	strpl	r2, [r3, #0]
 80a1080:	4b10      	ldr	r3, [pc, #64]	; (80a10c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1082:	681a      	ldr	r2, [r3, #0]
 80a1084:	07d2      	lsls	r2, r2, #31
 80a1086:	bf5c      	itt	pl
 80a1088:	2201      	movpl	r2, #1
 80a108a:	601a      	strpl	r2, [r3, #0]
 80a108c:	4b0e      	ldr	r3, [pc, #56]	; (80a10c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a108e:	681a      	ldr	r2, [r3, #0]
 80a1090:	07d0      	lsls	r0, r2, #31
 80a1092:	bf5c      	itt	pl
 80a1094:	2201      	movpl	r2, #1
 80a1096:	601a      	strpl	r2, [r3, #0]
 80a1098:	4b0c      	ldr	r3, [pc, #48]	; (80a10cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a109a:	681a      	ldr	r2, [r3, #0]
 80a109c:	07d1      	lsls	r1, r2, #31
 80a109e:	bf5c      	itt	pl
 80a10a0:	2201      	movpl	r2, #1
 80a10a2:	601a      	strpl	r2, [r3, #0]
 80a10a4:	4b0a      	ldr	r3, [pc, #40]	; (80a10d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a10a6:	681a      	ldr	r2, [r3, #0]
 80a10a8:	07d2      	lsls	r2, r2, #31
 80a10aa:	bf5c      	itt	pl
 80a10ac:	2201      	movpl	r2, #1
 80a10ae:	601a      	strpl	r2, [r3, #0]
 80a10b0:	4770      	bx	lr
 80a10b2:	bf00      	nop
 80a10b4:	200004c8 	.word	0x200004c8
 80a10b8:	200004c4 	.word	0x200004c4
 80a10bc:	200004c0 	.word	0x200004c0
 80a10c0:	200004bc 	.word	0x200004bc
 80a10c4:	200004b8 	.word	0x200004b8
 80a10c8:	200004b4 	.word	0x200004b4
 80a10cc:	200004b0 	.word	0x200004b0
 80a10d0:	200004ac 	.word	0x200004ac

080a10d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a10d4:	4b24      	ldr	r3, [pc, #144]	; (80a1168 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a10d6:	681a      	ldr	r2, [r3, #0]
 80a10d8:	07d0      	lsls	r0, r2, #31
 80a10da:	bf5c      	itt	pl
 80a10dc:	2201      	movpl	r2, #1
 80a10de:	601a      	strpl	r2, [r3, #0]
 80a10e0:	4b22      	ldr	r3, [pc, #136]	; (80a116c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a10e2:	681a      	ldr	r2, [r3, #0]
 80a10e4:	07d1      	lsls	r1, r2, #31
 80a10e6:	bf5c      	itt	pl
 80a10e8:	2201      	movpl	r2, #1
 80a10ea:	601a      	strpl	r2, [r3, #0]
 80a10ec:	4b20      	ldr	r3, [pc, #128]	; (80a1170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a10ee:	681a      	ldr	r2, [r3, #0]
 80a10f0:	07d2      	lsls	r2, r2, #31
 80a10f2:	bf5c      	itt	pl
 80a10f4:	2201      	movpl	r2, #1
 80a10f6:	601a      	strpl	r2, [r3, #0]
 80a10f8:	4b1e      	ldr	r3, [pc, #120]	; (80a1174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a10fa:	681a      	ldr	r2, [r3, #0]
 80a10fc:	07d0      	lsls	r0, r2, #31
 80a10fe:	bf5c      	itt	pl
 80a1100:	2201      	movpl	r2, #1
 80a1102:	601a      	strpl	r2, [r3, #0]
 80a1104:	4b1c      	ldr	r3, [pc, #112]	; (80a1178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1106:	681a      	ldr	r2, [r3, #0]
 80a1108:	07d1      	lsls	r1, r2, #31
 80a110a:	bf5c      	itt	pl
 80a110c:	2201      	movpl	r2, #1
 80a110e:	601a      	strpl	r2, [r3, #0]
 80a1110:	4b1a      	ldr	r3, [pc, #104]	; (80a117c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1112:	681a      	ldr	r2, [r3, #0]
 80a1114:	07d2      	lsls	r2, r2, #31
 80a1116:	bf5c      	itt	pl
 80a1118:	2201      	movpl	r2, #1
 80a111a:	601a      	strpl	r2, [r3, #0]
 80a111c:	4b18      	ldr	r3, [pc, #96]	; (80a1180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a111e:	681a      	ldr	r2, [r3, #0]
 80a1120:	07d0      	lsls	r0, r2, #31
 80a1122:	bf5c      	itt	pl
 80a1124:	2201      	movpl	r2, #1
 80a1126:	601a      	strpl	r2, [r3, #0]
 80a1128:	4b16      	ldr	r3, [pc, #88]	; (80a1184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a112a:	681a      	ldr	r2, [r3, #0]
 80a112c:	07d1      	lsls	r1, r2, #31
 80a112e:	bf5c      	itt	pl
 80a1130:	2201      	movpl	r2, #1
 80a1132:	601a      	strpl	r2, [r3, #0]
 80a1134:	4b14      	ldr	r3, [pc, #80]	; (80a1188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1136:	681a      	ldr	r2, [r3, #0]
 80a1138:	07d2      	lsls	r2, r2, #31
 80a113a:	bf5c      	itt	pl
 80a113c:	2201      	movpl	r2, #1
 80a113e:	601a      	strpl	r2, [r3, #0]
 80a1140:	4b12      	ldr	r3, [pc, #72]	; (80a118c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1142:	681a      	ldr	r2, [r3, #0]
 80a1144:	07d0      	lsls	r0, r2, #31
 80a1146:	bf5c      	itt	pl
 80a1148:	2201      	movpl	r2, #1
 80a114a:	601a      	strpl	r2, [r3, #0]
 80a114c:	4b10      	ldr	r3, [pc, #64]	; (80a1190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a114e:	681a      	ldr	r2, [r3, #0]
 80a1150:	07d1      	lsls	r1, r2, #31
 80a1152:	bf5c      	itt	pl
 80a1154:	2201      	movpl	r2, #1
 80a1156:	601a      	strpl	r2, [r3, #0]
 80a1158:	4b0e      	ldr	r3, [pc, #56]	; (80a1194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a115a:	681a      	ldr	r2, [r3, #0]
 80a115c:	07d2      	lsls	r2, r2, #31
 80a115e:	bf5c      	itt	pl
 80a1160:	2201      	movpl	r2, #1
 80a1162:	601a      	strpl	r2, [r3, #0]
 80a1164:	4770      	bx	lr
 80a1166:	bf00      	nop
 80a1168:	200004f8 	.word	0x200004f8
 80a116c:	200004f4 	.word	0x200004f4
 80a1170:	200004f0 	.word	0x200004f0
 80a1174:	200004ec 	.word	0x200004ec
 80a1178:	200004e8 	.word	0x200004e8
 80a117c:	200004e4 	.word	0x200004e4
 80a1180:	200004e0 	.word	0x200004e0
 80a1184:	200004dc 	.word	0x200004dc
 80a1188:	200004d8 	.word	0x200004d8
 80a118c:	200004d4 	.word	0x200004d4
 80a1190:	200004d0 	.word	0x200004d0
 80a1194:	200004cc 	.word	0x200004cc

080a1198 <atoi>:
 80a1198:	220a      	movs	r2, #10
 80a119a:	2100      	movs	r1, #0
 80a119c:	f000 b8d8 	b.w	80a1350 <strtol>

080a11a0 <__cxa_atexit>:
 80a11a0:	b510      	push	{r4, lr}
 80a11a2:	4c05      	ldr	r4, [pc, #20]	; (80a11b8 <__cxa_atexit+0x18>)
 80a11a4:	4613      	mov	r3, r2
 80a11a6:	b12c      	cbz	r4, 80a11b4 <__cxa_atexit+0x14>
 80a11a8:	460a      	mov	r2, r1
 80a11aa:	4601      	mov	r1, r0
 80a11ac:	2002      	movs	r0, #2
 80a11ae:	f3af 8000 	nop.w
 80a11b2:	bd10      	pop	{r4, pc}
 80a11b4:	4620      	mov	r0, r4
 80a11b6:	bd10      	pop	{r4, pc}
 80a11b8:	00000000 	.word	0x00000000

080a11bc <memcpy>:
 80a11bc:	b510      	push	{r4, lr}
 80a11be:	1e43      	subs	r3, r0, #1
 80a11c0:	440a      	add	r2, r1
 80a11c2:	4291      	cmp	r1, r2
 80a11c4:	d004      	beq.n	80a11d0 <memcpy+0x14>
 80a11c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a11ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a11ce:	e7f8      	b.n	80a11c2 <memcpy+0x6>
 80a11d0:	bd10      	pop	{r4, pc}

080a11d2 <memset>:
 80a11d2:	4603      	mov	r3, r0
 80a11d4:	4402      	add	r2, r0
 80a11d6:	4293      	cmp	r3, r2
 80a11d8:	d002      	beq.n	80a11e0 <memset+0xe>
 80a11da:	f803 1b01 	strb.w	r1, [r3], #1
 80a11de:	e7fa      	b.n	80a11d6 <memset+0x4>
 80a11e0:	4770      	bx	lr
	...

080a11e4 <srand>:
 80a11e4:	b538      	push	{r3, r4, r5, lr}
 80a11e6:	4b12      	ldr	r3, [pc, #72]	; (80a1230 <srand+0x4c>)
 80a11e8:	4605      	mov	r5, r0
 80a11ea:	681c      	ldr	r4, [r3, #0]
 80a11ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a11ee:	b9d3      	cbnz	r3, 80a1226 <srand+0x42>
 80a11f0:	2018      	movs	r0, #24
 80a11f2:	f7ff f999 	bl	80a0528 <malloc>
 80a11f6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a11fa:	63a0      	str	r0, [r4, #56]	; 0x38
 80a11fc:	8003      	strh	r3, [r0, #0]
 80a11fe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1202:	8043      	strh	r3, [r0, #2]
 80a1204:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1208:	8083      	strh	r3, [r0, #4]
 80a120a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a120e:	80c3      	strh	r3, [r0, #6]
 80a1210:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1214:	8103      	strh	r3, [r0, #8]
 80a1216:	2305      	movs	r3, #5
 80a1218:	8143      	strh	r3, [r0, #10]
 80a121a:	230b      	movs	r3, #11
 80a121c:	8183      	strh	r3, [r0, #12]
 80a121e:	2201      	movs	r2, #1
 80a1220:	2300      	movs	r3, #0
 80a1222:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1226:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1228:	2200      	movs	r2, #0
 80a122a:	611d      	str	r5, [r3, #16]
 80a122c:	615a      	str	r2, [r3, #20]
 80a122e:	bd38      	pop	{r3, r4, r5, pc}
 80a1230:	20000368 	.word	0x20000368

080a1234 <strlen>:
 80a1234:	4603      	mov	r3, r0
 80a1236:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a123a:	2a00      	cmp	r2, #0
 80a123c:	d1fb      	bne.n	80a1236 <strlen+0x2>
 80a123e:	1a18      	subs	r0, r3, r0
 80a1240:	3801      	subs	r0, #1
 80a1242:	4770      	bx	lr

080a1244 <_strtol_r>:
 80a1244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1248:	460f      	mov	r7, r1
 80a124a:	4680      	mov	r8, r0
 80a124c:	483f      	ldr	r0, [pc, #252]	; (80a134c <_strtol_r+0x108>)
 80a124e:	f8d0 9000 	ldr.w	r9, [r0]
 80a1252:	463d      	mov	r5, r7
 80a1254:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1258:	eb09 0004 	add.w	r0, r9, r4
 80a125c:	7840      	ldrb	r0, [r0, #1]
 80a125e:	f000 0008 	and.w	r0, r0, #8
 80a1262:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a1266:	b108      	cbz	r0, 80a126c <_strtol_r+0x28>
 80a1268:	462f      	mov	r7, r5
 80a126a:	e7f2      	b.n	80a1252 <_strtol_r+0xe>
 80a126c:	2c2d      	cmp	r4, #45	; 0x2d
 80a126e:	d103      	bne.n	80a1278 <_strtol_r+0x34>
 80a1270:	1cbd      	adds	r5, r7, #2
 80a1272:	787c      	ldrb	r4, [r7, #1]
 80a1274:	2601      	movs	r6, #1
 80a1276:	e003      	b.n	80a1280 <_strtol_r+0x3c>
 80a1278:	2c2b      	cmp	r4, #43	; 0x2b
 80a127a:	bf04      	itt	eq
 80a127c:	787c      	ldrbeq	r4, [r7, #1]
 80a127e:	1cbd      	addeq	r5, r7, #2
 80a1280:	b113      	cbz	r3, 80a1288 <_strtol_r+0x44>
 80a1282:	2b10      	cmp	r3, #16
 80a1284:	d10a      	bne.n	80a129c <_strtol_r+0x58>
 80a1286:	e05b      	b.n	80a1340 <_strtol_r+0xfc>
 80a1288:	2c30      	cmp	r4, #48	; 0x30
 80a128a:	d157      	bne.n	80a133c <_strtol_r+0xf8>
 80a128c:	7828      	ldrb	r0, [r5, #0]
 80a128e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a1292:	2858      	cmp	r0, #88	; 0x58
 80a1294:	d14d      	bne.n	80a1332 <_strtol_r+0xee>
 80a1296:	786c      	ldrb	r4, [r5, #1]
 80a1298:	2310      	movs	r3, #16
 80a129a:	3502      	adds	r5, #2
 80a129c:	2e00      	cmp	r6, #0
 80a129e:	bf14      	ite	ne
 80a12a0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a12a4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a12a8:	fbbc faf3 	udiv	sl, ip, r3
 80a12ac:	2700      	movs	r7, #0
 80a12ae:	4638      	mov	r0, r7
 80a12b0:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a12b4:	eb09 0e04 	add.w	lr, r9, r4
 80a12b8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a12bc:	f01e 0f04 	tst.w	lr, #4
 80a12c0:	d001      	beq.n	80a12c6 <_strtol_r+0x82>
 80a12c2:	3c30      	subs	r4, #48	; 0x30
 80a12c4:	e00b      	b.n	80a12de <_strtol_r+0x9a>
 80a12c6:	f01e 0e03 	ands.w	lr, lr, #3
 80a12ca:	d01b      	beq.n	80a1304 <_strtol_r+0xc0>
 80a12cc:	f1be 0f01 	cmp.w	lr, #1
 80a12d0:	bf0c      	ite	eq
 80a12d2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a12d6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a12da:	ebce 0404 	rsb	r4, lr, r4
 80a12de:	42a3      	cmp	r3, r4
 80a12e0:	dd10      	ble.n	80a1304 <_strtol_r+0xc0>
 80a12e2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a12e6:	d00a      	beq.n	80a12fe <_strtol_r+0xba>
 80a12e8:	4550      	cmp	r0, sl
 80a12ea:	d806      	bhi.n	80a12fa <_strtol_r+0xb6>
 80a12ec:	d101      	bne.n	80a12f2 <_strtol_r+0xae>
 80a12ee:	4564      	cmp	r4, ip
 80a12f0:	dc03      	bgt.n	80a12fa <_strtol_r+0xb6>
 80a12f2:	fb03 4000 	mla	r0, r3, r0, r4
 80a12f6:	2701      	movs	r7, #1
 80a12f8:	e001      	b.n	80a12fe <_strtol_r+0xba>
 80a12fa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a12fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1302:	e7d7      	b.n	80a12b4 <_strtol_r+0x70>
 80a1304:	1c7b      	adds	r3, r7, #1
 80a1306:	d10c      	bne.n	80a1322 <_strtol_r+0xde>
 80a1308:	2e00      	cmp	r6, #0
 80a130a:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a130e:	bf14      	ite	ne
 80a1310:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a1314:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1318:	f8c8 3000 	str.w	r3, [r8]
 80a131c:	b92a      	cbnz	r2, 80a132a <_strtol_r+0xe6>
 80a131e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1322:	b106      	cbz	r6, 80a1326 <_strtol_r+0xe2>
 80a1324:	4240      	negs	r0, r0
 80a1326:	b172      	cbz	r2, 80a1346 <_strtol_r+0x102>
 80a1328:	b107      	cbz	r7, 80a132c <_strtol_r+0xe8>
 80a132a:	1e69      	subs	r1, r5, #1
 80a132c:	6011      	str	r1, [r2, #0]
 80a132e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1332:	2430      	movs	r4, #48	; 0x30
 80a1334:	2b00      	cmp	r3, #0
 80a1336:	d1b1      	bne.n	80a129c <_strtol_r+0x58>
 80a1338:	2308      	movs	r3, #8
 80a133a:	e7af      	b.n	80a129c <_strtol_r+0x58>
 80a133c:	230a      	movs	r3, #10
 80a133e:	e7ad      	b.n	80a129c <_strtol_r+0x58>
 80a1340:	2c30      	cmp	r4, #48	; 0x30
 80a1342:	d0a3      	beq.n	80a128c <_strtol_r+0x48>
 80a1344:	e7aa      	b.n	80a129c <_strtol_r+0x58>
 80a1346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a134a:	bf00      	nop
 80a134c:	20000304 	.word	0x20000304

080a1350 <strtol>:
 80a1350:	4613      	mov	r3, r2
 80a1352:	460a      	mov	r2, r1
 80a1354:	4601      	mov	r1, r0
 80a1356:	4802      	ldr	r0, [pc, #8]	; (80a1360 <strtol+0x10>)
 80a1358:	6800      	ldr	r0, [r0, #0]
 80a135a:	f7ff bf73 	b.w	80a1244 <_strtol_r>
 80a135e:	bf00      	nop
 80a1360:	20000368 	.word	0x20000368

080a1364 <dynalib_user>:
 80a1364:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a1374:	00000000 6c6c6548 6172206f 546e6576     ....Hello ravenT
 80a1384:	53002154 72616e6f 6e6f6320 7463656e     T!.Sonar connect
 80a1394:	53006465 74726174 4500203a 203a646e     ed.Start: .End: 
 80a13a4:	616c4500 64657370 5000203a 65737261     .Elapsed: .Parse
 80a13b4:	00203a64                                d: .

080a13b8 <_ZTV7TwoWire>:
	...
 80a13c0:	080a0561 080a05ab 080a0583 080a0563     a...........c...
 80a13d0:	080a058b 080a0593 080a059b 080a05a3     ................

080a13e0 <_ZTV9IPAddress>:
	...
 80a13e8:	080a05f3 080a05e5 080a05e7 6e6c0066     ............f.ln
 80a13f8:	006e6600 65646f63 74656400 006c6961     .fn.code.detail.
 80a1408:	25000a0d 75303130 205d0020 00642500     ...%010u .] .%d.
 80a1418:	2800202c 00203a29 63005b20 2065646f     , .(): . [.code 
 80a1428:	2500203d 65640069 6c696174 203d2073     = .%i.details = 
 80a1438:	75616200 65530064 6c616972 42535500     .baud.Serial.USB
 80a1448:	69726553 00316c61 65707974 72617000     Serial1.type.par
 80a1458:	63006d61 6900646d 6e680064 74730064     am.cmd.id.hnd.st
 80a1468:	66006d72 00746c69 006c766c 48646461     rm.filt.lvl.addH
 80a1478:	6c646e61 72007265 766f6d65 6e614865     andler.removeHan
 80a1488:	72656c64 756e6500 6e61486d 72656c64     dler.enumHandler
 80a1498:	534a0073 74534e4f 6d616572 48676f4c     s.JSONStreamLogH
 80a14a8:	6c646e61 61007265 6e007070 00656e6f     andler.app.none.
 80a14b8:	63617274 6e690065 77006f66 006e7261     trace.info.warn.
 80a14c8:	6f727265 61700072 0063696e 006c6c61     error.panic.all.

080a14d8 <_ZTVN5spark12NetworkClassE>:
	...
 80a14e0:	080a06b9 080a06c3 080a06cd 080a06d7     ................
 80a14f0:	080a06e1 080a06ed 080a06f9 080a0705     ................
 80a1500:	080a070d 080a0717 080a0721              ........!...

080a150c <_ZTV8SPIClass>:
	...
 80a1514:	080a08f9 080a08fb 2b25005a 3a643330     ........Z.%+03d:
 80a1524:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 80a1534:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 80a1544:	00000000                                ....

080a1548 <_ZTV11USARTSerial>:
	...
 80a1550:	080a0965 080a0989 080a0995 080a0785     e...............
 80a1560:	080a0971 080a097d 080a0977 080a0983     q...}...w.......
 80a1570:	080a0967 080a096b                       g...k...

080a1578 <_ZTV9USBSerial>:
	...
 80a1580:	080a0a7d 080a0ac1 080a0a9b 080a0785     }...............
 80a1590:	080a0a95 080a0a7f 080a0a87 080a0abb     ................
 80a15a0:	080a0a8f 080a0a79                       ....y...

080a15a8 <_ZTVN5spark9WiFiClassE>:
	...
 80a15b0:	080a0c57 080a0c4d 080a0c43 080a0bb5     W...M...C.......
 80a15c0:	080a0c37 080a0c2b 080a0c1f 080a0c17     7...+...........
 80a15d0:	080a0c0d 080a0c03 080a0bbf              ............

080a15dc <_ctype_>:
 80a15dc:	20202000 20202020 28282020 20282828     .         ((((( 
 80a15ec:	20202020 20202020 20202020 20202020                     
 80a15fc:	10108820 10101010 10101010 10101010      ...............
 80a160c:	04040410 04040404 10040404 10101010     ................
 80a161c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a162c:	01010101 01010101 01010101 10101010     ................
 80a163c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a164c:	02020202 02020202 02020202 10101010     ................
 80a165c:	00000020 00000000 00000000 00000000      ...............
	...

080a16e0 <__sf_fake_stdin>:
	...

080a1700 <__sf_fake_stdout>:
	...

080a1720 <__sf_fake_stderr>:
	...
 80a1740:	00000043                                         C.

080a1742 <link_const_variable_data_end>:
	...

080a1744 <link_constructors_location>:
 80a1744:	080a01f9 	.word	0x080a01f9
 80a1748:	080a06a9 	.word	0x080a06a9
 80a174c:	080a0771 	.word	0x080a0771
 80a1750:	080a08dd 	.word	0x080a08dd
 80a1754:	080a0939 	.word	0x080a0939
 80a1758:	080a0951 	.word	0x080a0951
 80a175c:	080a0c61 	.word	0x080a0c61
 80a1760:	080a0e89 	.word	0x080a0e89
 80a1764:	080a0eb9 	.word	0x080a0eb9
 80a1768:	080a0f09 	.word	0x080a0f09
 80a176c:	080a0fcd 	.word	0x080a0fcd
 80a1770:	080a1051 	.word	0x080a1051
 80a1774:	080a10d5 	.word	0x080a10d5

080a1778 <link_constructors_end>:
	...
